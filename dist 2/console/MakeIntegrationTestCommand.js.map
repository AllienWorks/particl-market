{"version":3,"file":"MakeIntegrationTestCommand.js","sourceRoot":"","sources":["../../src/console/MakeIntegrationTestCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF;;;;GAIG;AACH,mEAAgE;AAChE,uCAAoD;AACpD,6CAA+C;AAE/C,gCAAwC,SAAQ,yCAAmB;IAAnE;;QAKW,WAAM,GAAG,cAAc,CAAC;QACxB,SAAI,GAAG,kBAAkB,CAAC;QAC1B,WAAM,GAAG,EAAE,CAAC;QACZ,aAAQ,GAAG,gBAAgB,CAAC;QAC5B,kBAAa,GAAG,KAAK,CAAC;QACtB,WAAM,GAAG,IAAI,CAAC;IAYzB,CAAC;IAVgB,GAAG;;;YACZ,MAAM,aAAS,WAAE,CAAC;QACtB,CAAC;KAAA;IAEY,KAAK;;YACd,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YAC7F,MAAM,kBAAU,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,iBAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9D,MAAM,wBAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC/D,CAAC;KAAA;;AAnBa,kCAAO,GAAG,uBAAuB,CAAC;AAClC,sCAAW,GAAG,+BAA+B,CAAC;AAHhE,gEAsBC","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\n/**\n * MakeIntegrationTestCommand\n * -------------------------------------\n *\n */\nimport { AbstractMakeCommand } from './lib/AbstractMakeCommand';\nimport { parseName, existsFile } from './lib/utils';\nimport { writeTemplate } from './lib/template';\n\nexport class MakeIntegrationTestCommand extends AbstractMakeCommand {\n\n    public static command = 'make:integration-test';\n    public static description = 'Generate new integration test';\n\n    public target = '/integration';\n    public type = 'Integration Test';\n    public suffix = '';\n    public template = 'model-test.hbs';\n    public updateTargets = false;\n    public isTest = true;\n\n    public async run(): Promise<void> {\n        await super.run();\n    }\n\n    public async write(): Promise<void> {\n        const filePath = this.buildFilePath(this.target, this.context.name, this.isTest, '.test.ts');\n        await existsFile(filePath, true, this.isTest);\n        this.context.name = parseName(this.context.name, this.suffix);\n        await writeTemplate(this.template, filePath, this.context);\n    }\n}\n"]}