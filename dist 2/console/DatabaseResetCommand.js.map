{"version":3,"file":"DatabaseResetCommand.js","sourceRoot":"","sources":["../../src/console/DatabaseResetCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,2CAAwC;AAExC,6BAA6B;AAC7B,2DAAwD;AACxD,iDAAoD;AAEpD,MAAM,GAAG,GAAG,IAAI,eAAM,CAAC,UAAU,CAAC,CAAC;AAGnC;;;;;;GAMG;AACH,0BAAkC,SAAQ,iCAAe;IAKxC,GAAG;;YACZ,MAAM,IAAI,GAAG,IAAI,CAAC,yBAA6B,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAQ,IAAI,CAAC,OAAO,CAAC;YAElC,oCAAoC;YACpC,MAAM,OAAO,CAAC,uBAAuB,EAAE,CAAC;YAExC,2BAA2B;YAC3B,GAAG,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;YACrC,MAAM,mBAAmB,GAAG,MAAM,OAAO,CAAC,cAAc,EAAE,CAAC;YAE3D,sBAAsB;YACtB,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAChC,MAAM,OAAO,CAAC,eAAe,CAAC,CAAC,EAAE,mBAAmB,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,CAAC;YAExE,oBAAoB;YACpB,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAC9B,MAAM,OAAO,CAAC,MAAM,EAAE,CAAC;YAEvB,mCAAmC;YACnC,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YACrB,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrB,CAAC;KAAA;;AA1Ba,4BAAO,GAAG,UAAU,CAAC;AACrB,gCAAW,GAAG,uDAAuD,CAAC;AAHxF,oDA8BC","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { Logger } from '../core/Logger';\n\nimport * as Knex from 'knex';\nimport { AbstractCommand } from './lib/AbstractCommand';\nimport { DatabaseConfig } from '../config/Database';\n\nconst log = new Logger(__filename);\n\n\n/**\n * DatabaseResetCommand rollback all current migrations and\n * then migrate to the latest one.\n *\n * @export\n * @class DatabaseResetCommand\n */\nexport class DatabaseResetCommand extends AbstractCommand {\n\n    public static command = 'db:reset';\n    public static description = 'Reverse all current migrations and migrate to latest.';\n\n    public async run(): Promise<void> {\n        const knex = Knex(DatabaseConfig as Knex.Config);\n\n        const migrate: any = knex.migrate;\n\n        // Force unlock in case of bad state\n        await migrate.forceFreeMigrationsLock();\n\n        // Get completed migrations\n        log.info('Get completed migrations');\n        const completedMigrations = await migrate._listCompleted();\n\n        // Rollback migrations\n        log.info('Rollback migrations');\n        await migrate._waterfallBatch(0, completedMigrations.reverse(), 'down');\n\n        // Migrate to latest\n        log.info('Migrate to latest');\n        await migrate.latest();\n\n        // Close connection to the database\n        await knex.destroy();\n        log.info('Done');\n    }\n\n}\n\n\n"]}