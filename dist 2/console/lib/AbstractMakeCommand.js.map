{"version":3,"file":"AbstractMakeCommand.js","sourceRoot":"","sources":["../../../src/console/lib/AbstractMakeCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\n/**\n * AbstractMakeCommand\n * -------------------------------------\n *\n */\nimport * as _ from 'lodash';\nimport * as path from 'path';\nimport * as inquirer from 'inquirer';\n\nimport { writeTemplate } from './template';\nimport { existsFile, parseName, updateTargets, inputIsRequired } from './utils';\n\nexport interface MakeCommand {\n    context: any;\n    type: string;\n    suffix: string;\n    template: string;\n    target: string;\n    updateTargets: boolean;\n\n    run(): Promise<void>;\n    write(): Promise<void>;\n}\n\nexport class AbstractMakeCommand {\n\n    public static command = 'make:command';\n    public static description = 'description';\n\n    public static async action(command: MakeCommand): Promise<void> {\n        try {\n            await command.run();\n            await command.write();\n            if (command.updateTargets) {\n                await updateTargets();\n            }\n            process.exit(0);\n        } catch (e) {\n            process.exit(1);\n        }\n    }\n\n    public context: any;\n    public type = 'Type';\n    public suffix = 'Suffix';\n    public prefix = '';\n    public template = 'template.hbs';\n    public target = 'api/target/path';\n    public updateTargets = true;\n    public isTest = false;\n\n    constructor(context?: any) {\n        this.context = _.cloneDeep(context);\n    }\n\n    public async run(): Promise<void> {\n        this.context = await this.askFileName(this.context, this.type, this.suffix, this.prefix);\n    }\n\n    public async write(): Promise<void> {\n        const filePath = this.buildFilePath(this.target, this.context.name, this.isTest);\n        await existsFile(filePath, true, this.isTest);\n        this.context.name = parseName(this.context.name, this.suffix);\n        await writeTemplate(this.template, filePath, this.context);\n    }\n\n    public buildFilePath = (targetPath: string, fileName: string, isTest = false, extension = '.ts') => {\n        if (isTest) {\n            return path.join(__dirname, `/../../../test${targetPath}`, `${fileName}${extension}`);\n        } else {\n            return path.join(__dirname, `/../../${targetPath}`, `${fileName}${extension}`);\n        }\n    }\n\n    public parseName(suffix: string = '', prefix: string = ''): (name: string) => string {\n        return (name: string) => {\n            let ns = name.split('/');\n            ns = ns.map((v) => _.camelCase(v));\n            ns[ns.length - 1] = _.upperFirst(ns[ns.length - 1]);\n            return (ns.join('/')) + prefix + suffix;\n        };\n    }\n\n    public async askFileName(context: any, name: string, suffix: string, prefix: string): Promise<any> {\n        const nameParser = this.parseName(suffix, prefix);\n        if (context === undefined || context.name === undefined) {\n            const prompt = inquirer.createPromptModule();\n            context = await prompt([\n                {\n                    type: 'input',\n                    name: 'name',\n                    message: `Enter the name of the ${name}:`,\n                    filter: nameParser,\n                    validate: inputIsRequired\n                }\n            ]);\n            const amount = context.name.split('/').length - 1;\n            context.deepness = '';\n            _.times(amount, () => context.deepness += '../');\n        } else {\n            context.name = nameParser(context.name);\n        }\n        return context;\n    }\n\n}\n"]}