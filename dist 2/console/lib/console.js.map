{"version":3,"file":"console.js","sourceRoot":"","sources":["../../../src/console/lib/console.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;AAEjF;;;;;;;;;GASG;AAEH,4BAA0B;AAC1B,6BAA6B;AAC7B,6BAA6B;AAC7B,uCAAuC;AACvC,iCAAiC;AACjC,+BAA+B;AAE/B,+DAA+D;AAC/D,mCAAgC;AAChC,eAAM,EAAE,CAAC;AAET,wBAAwB;AACxB,4DAAyD;AACzD,IAAI,2BAAY,EAAE,CAAC,SAAS,EAAE,CAAC;AAE/B,MAAM,CAAC,SAAS,EAAE,CAAC,KAAU,EAAE,IAAS;IACpC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAE9B,yBAAyB;IACzB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAQ,EAAE,OAAiB;QACxE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,MAAM,CAAC;QACX,CAAC;QAED,MAAM,KAAK,GAAG,OAAO;aAChB,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aACpC,GAAG,CAAC,CAAC,IAAI,CAAC;YACP,IAAI,EAAE,CAAC;YACP,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;SAC/G,CAAC,CAAC,CAAC;QAER,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACzD,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YACvB,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,MAAM,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE5B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC5C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,GAAG,iBAAiB,CAAC,CAAC,CAAC;YAC3E,OAAO,CAAC,GAAG,EAAE,CAAC;YACd,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAC,CAAC,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;YACnB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACjD,OAAO,CAAC,GAAG,EAAE,CAAC;QAClB,CAAC;QAED,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;YACf,SAAS;iBACJ,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;iBAClB,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC;iBAC1B,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAElC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\n/**\n * console.Commander\n * ------------------------------------------------\n *\n * Here you can define your console commands, so you are able\n * to use them in the terminal with 'npm run console <command>'.\n *\n * These console commands can also be accessed in the production\n * environment. For example to import users.\n */\n\nimport 'reflect-metadata';\nimport * as glob from 'glob';\nimport * as path from 'path';\nimport * as commander from 'commander';\nimport * as figlet from 'figlet';\nimport * as chalk from 'chalk';\n\n// It also loads the .env file into the 'process.env' variable.\nimport { config } from 'dotenv';\nconfig();\n\n// Configures the logger\nimport { LoggerConfig } from '../../config/LoggerConfig';\nnew LoggerConfig().configure();\n\nfiglet('console', (error: any, data: any) => {\n    console.log(chalk.blue(data));\n\n    // Find all command files\n    glob(path.join(__dirname, '../**/*Command.ts'), (err: any, matches: string[]) => {\n        if (err) {\n            console.log(err);\n            return;\n        }\n\n        const files = matches\n            .filter(m => m.search(/\\/lib/g) <= 0)\n            .map(m => ({\n                path: m,\n                name: m.replace(__dirname.split(path.sep).join('/').replace('/lib', ''), '').replace('.ts', '').substring(1)\n            }));\n\n        const commands = files.map(f => require(f.path)[f.name]);\n        const keys = commands.map(c => {\n            return c.command;\n        });\n        const key = process.argv[2];\n\n        if (keys.indexOf(key) < 0 && key !== '--help') {\n            console.log(chalk.red('➜ ') + chalk.bold(`Command ${key} was not found!`));\n            console.log();\n            return;\n        }\n\n        if (key !== '--help') {\n            console.log(chalk.green('➜ ') + chalk.bold(key));\n            console.log();\n        }\n\n        commands.forEach((c) => {\n            commander\n                .command(c.command)\n                .description(c.description)\n                .action(() => c.action(new c()));\n        });\n\n        commander.parse(process.argv);\n\n    });\n});\n"]}