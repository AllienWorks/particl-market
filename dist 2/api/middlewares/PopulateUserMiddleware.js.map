{"version":3,"file":"PopulateUserMiddleware.js","sourceRoot":"","sources":["../../../src/api/middlewares/PopulateUserMiddleware.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAE1C,yDAAsD;AACtD,+CAAuD;AAGvD,IAAa,sBAAsB,GAAnC;IAII,YAC4C,MAAyB,EACE,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAKxF,QAAG,GAAG,CAAC,GAAsB,EAAE,GAAuB,EAAE,IAA4B;YACvF,sDAAsD;YACtD,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC3C,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,4BAA4B,CAAC,CAAC;YACzD,CAAC;YACD,+DAA+D;YAC/D,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC;iBAC/C,IAAI,CAAC,CAAC,IAAI;gBACP,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;gBACzB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,8BAA8B,GAAG,CAAC,IAAI,CAAC,EAAE,wBAAwB,CAAC,CAAC;gBAClF,IAAI,EAAE,CAAC;YACX,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,KAAK;gBACT,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;gBAC/D,IAAI,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACX,CAAC,CAAA;QAnBG,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;CAoBJ,CAAA;AA7BY,sBAAsB;IAK1B,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;qDAAsB,yBAAW;GANtF,sBAAsB,CA6BlC;AA7BY,wDAAsB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { UserService } from '../services/UserService';\nimport { Types, Core, Targets } from '../../constants';\n\n\nexport class PopulateUserMiddleware implements interfaces.Middleware {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.UserService) private userService: UserService\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public use = (req: myExpress.Request, res: myExpress.Response, next: myExpress.NextFunction): void => {\n        // Check if the authenticate middleware was successful\n        if (!req.tokeninfo || !req.tokeninfo.user_id) {\n            return res.failed(400, 'Missing token information!');\n        }\n        // Find user from the token and store him in the request object\n        this.userService.findByUserId(req.tokeninfo.user_id)\n            .then((user) => {\n                req.user = user.toJSON();\n                this.log.debug(`populated user with the id=${req.user.id} to the request object`);\n                next();\n            })\n            .catch((error) => {\n                this.log.warn(`could not populate user to the request object`);\n                next(error);\n            });\n    }\n\n}\n"]}