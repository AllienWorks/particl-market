{"version":3,"file":"MulterMiddleware.js","sourceRoot":"","sources":["../../../src/api/middlewares/MulterMiddleware.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAE1C,+CAAuD;AACvD,iCAAiC;AACjC,wDAAqD;AAErD,IAAa,gBAAgB,GAA7B;IAKI,YAC4C,MAAyB;QAS9D,QAAG,GAAG,CAAC,GAAsB,EAAE,GAAuB,EAAE,IAA4B;YACvF,MAAM,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;YAC3C,gBAAgB,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QACrC,CAAC,CAAA;QAEM,gBAAW,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YAC/B,oBAAoB;YACpB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;gBACpD,MAAM,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,+BAA+B,CAAC,EAAE,KAAK,CAAC,CAAC;YACjE,CAAC;YAED,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACnB,CAAC,CAAA;QAnBG,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;QAElC,0BAA0B;QAC1B,mDAAmD;QACnD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,EAAE,IAAI,EAAE,iBAAO,CAAC,cAAc,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IAC3F,CAAC;CAeJ,CAAA;AA5BY,gBAAgB;IAMpB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;;GANlC,gBAAgB,CA4B5B;AA5BY,4CAAgB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport * as multer from 'multer';\nimport { DataDir } from '../../core/helpers/DataDir';\n\nexport class MulterMiddleware implements interfaces.Middleware {\n\n    public log: LoggerType;\n    private upload: any;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n\n        // setup multer middleware\n        // this.upload = multer({ dest: 'data/uploads/' });\n        this.upload = multer({ dest: DataDir.getUploadsPath(), fileFilter: this.imageFilter });\n    }\n\n    public use = (req: myExpress.Request, res: myExpress.Response, next: myExpress.NextFunction): void => {\n        const multerMiddleware = this.upload.any();\n        multerMiddleware(req, res, next);\n    }\n\n    public imageFilter = (req, file, cb) => {\n        // accept image only\n        if (!file.originalname.match(/\\.(jpg|jpeg|png|gif)$/)) {\n            return cb(new Error('Only image files are allowed!'), false);\n        }\n\n        cb(null, true);\n    }\n}\n"]}