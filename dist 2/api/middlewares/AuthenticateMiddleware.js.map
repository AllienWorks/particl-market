{"version":3,"file":"AuthenticateMiddleware.js","sourceRoot":"","sources":["../../../src/api/middlewares/AuthenticateMiddleware.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAG1C,+CAA8C;AAE9C,IAAa,sBAAsB,GAAnC;IAII,YAC4C,MAAyB,EACpB,OAAuB;QAAvB,YAAO,GAAP,OAAO,CAAgB;QAKjE,QAAG,GAAG,CAAC,GAAsB,EAAE,GAAuB,EAAE,IAA4B;YAEvF,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,CAAC;gBACvC,MAAM,CAAC,IAAI,EAAE,CAAC;YAClB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,IAAI,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAChF,MAAM,cAAc,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;oBAChG,0HAA0H;oBAE1H,EAAE,CAAC,CAAC,cAAc,KAAK,OAAO,CAAC,GAAG,CAAC,eAAe,GAAG,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAAC;wBACzF,MAAM,CAAC,IAAI,EAAE,CAAC;oBAClB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,+CAA+C,CAAC,CAAC;oBAC5E,CAAC;gBACL,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,+CAA+C,CAAC,CAAC;gBAC5E,CAAC;YACL,CAAC;QACL,CAAC,CAAA;QArBG,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;CAqBJ,CAAA;AA9BY,sBAAsB;IAK1B,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,GAAG,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,SAAS,CAAC,CAAA;;GAN/B,sBAAsB,CA8BlC;AA9BY,wDAAsB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport * as Request from 'request';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core } from '../../constants';\n\nexport class AuthenticateMiddleware implements interfaces.Middleware {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) Logger: typeof LoggerType,\n        @inject(Types.Lib) @named('request') private request: typeof Request\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public use = (req: myExpress.Request, res: myExpress.Response, next: myExpress.NextFunction): void => {\n\n        if (process.env.MARKET_RPC_AUTH_DISABLED) {\n            return next();\n        } else {\n            if (req.headers.authorization && req.headers.authorization.search('Basic ') === 0) {\n                const authentication = new Buffer(req.headers.authorization.split(' ')[1], 'base64').toString();\n                // this.log.debug('auth:' + authentication + '===' + process.env.MARKET_RPC_USER + ':' + process.env.MARKET_RPC_PASSWORD);\n\n                if (authentication === process.env.MARKET_RPC_USER + ':' + process.env.MARKET_RPC_PASSWORD) {\n                    return next();\n                } else {\n                    return res.failed(401, 'You are not allowed to request this resource!');\n                }\n            } else {\n                return res.failed(401, 'You are not allowed to request this resource!');\n            }\n        }\n    }\n}\n"]}