{"version":3,"file":"RpcController.js","sourceRoot":"","sources":["../../../src/api/controllers/RpcController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { controller, httpPost, response, requestBody } from 'inversify-express-utils';\nimport { app } from '../../app';\nimport { Types, Core, Targets } from '../../constants';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { JsonRpc2Request, JsonRpc2Response, RpcErrorCode } from '../../core/api/jsonrpc';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport * as _ from 'lodash';\n\nimport { RpcCommandFactory } from '../factories/RpcCommandFactory';\nimport { RpcRequest } from '../requests/RpcRequest';\nimport { Commands} from '../commands/CommandEnumType';\nimport { RpcCommandInterface } from '../commands/RpcCommandInterface';\n\n// Get middlewares\nconst rpc = app.IoC.getNamed<interfaces.Middleware>(Types.Middleware, Targets.Middleware.RpcMiddleware);\nconst authenticateMiddleware = app.IoC.getNamed<interfaces.Middleware>(Types.Middleware, Targets.Middleware.AuthenticateMiddleware);\n\nlet rpcIdCount = 0;\n@controller('/rpc', authenticateMiddleware.use, rpc.use)\nexport class RpcController {\n\n    private log: LoggerType;\n    private VERSION = '2.0';\n    private MAX_INT32 = 2147483647;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Factory) @named(Targets.Factory.RpcCommandFactory) private rpcCommandFactory: RpcCommandFactory\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    @httpPost('/')\n    public async handleRPC( @response() res: myExpress.Response, @requestBody() body: any): Promise<any> {\n\n        let rpcRequest = this.createRequest(body.method, body.params, body.id);\n        this.log.debug('controller.handleRPC():', rpcRequest.method + ' ' + rpcRequest.params);\n\n        // get the commandType for the method name\n        const commandType = _.find(Commands.rootCommands, command => command.commandName === body.method);\n        if (commandType) {\n            // ... use the commandType to get the correct RpcCommand implementation and execute\n            const rpcCommand: RpcCommandInterface<any> = this.rpcCommandFactory.get(commandType);\n            const newRpcRequest = await rpcCommand.validate(rpcRequest);\n            rpcRequest = newRpcRequest ? newRpcRequest : rpcRequest;\n            const result = await rpcCommand.execute(rpcRequest, this.rpcCommandFactory);\n            return this.createResponse(rpcRequest.id, result);\n        } else {\n            throw new NotFoundException('Unknown command: ' + body.method + '\\n');\n        }\n\n    }\n\n    private createRequest(method: string, params?: any, id?: string | number): RpcRequest {\n        if (id === null || id === undefined) {\n            id = this.generateId();\n        } else if (typeof (id) !== 'number') {\n            id = String(id);\n        }\n        return new RpcRequest({ jsonrpc: this.VERSION, method: method.toLowerCase(), params, id });\n    }\n\n    private createResponse(id: string | number = '', result?: any, error?: any): JsonRpc2Response {\n        if (error) {\n            return { id, jsonrpc: this.VERSION, error };\n        } else {\n            return { id, jsonrpc: this.VERSION, result };\n        }\n    }\n\n    private generateId(): number {\n        if (rpcIdCount >= this.MAX_INT32) {\n            rpcIdCount = 0;\n        }\n        return ++rpcIdCount;\n    }\n\n    private getErrorMessage(code: number): string {\n        switch (code) {\n            case RpcErrorCode.ParseError:\n                return 'Parse error';\n            case RpcErrorCode.InvalidRequest:\n                return 'Invalid Request';\n            case RpcErrorCode.MethodNotFound:\n                return 'Method not found';\n            case RpcErrorCode.InvalidParams:\n                return 'Invalid params';\n            case RpcErrorCode.InternalError:\n                return 'Internal error';\n        }\n        return 'Unknown Error';\n    }\n}\n"]}