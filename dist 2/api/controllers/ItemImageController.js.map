{"version":3,"file":"ItemImageController.js","sourceRoot":"","sources":["../../../src/api/controllers/ItemImageController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { controller, httpGet, httpPost, httpPut, httpDelete, response, requestBody, requestParam, request } from 'inversify-express-utils';\nimport { Types, Core, Targets } from '../../constants';\nimport { app } from '../../app';\nimport { ItemImageService } from '../services/ItemImageService';\nimport { ItemImageHttpUploadService } from '../services/ItemImageHttpUploadService';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { ImagePostUploadRequest } from '../requests/ImagePostUploadRequest';\nimport * as _ from 'lodash';\nimport * as resources from 'resources';\n\n// Get middlewares\nconst restApi = app.IoC.getNamed<interfaces.Middleware>(Types.Middleware, Targets.Middleware.AuthenticateMiddleware);\nconst multerMiddleware = app.IoC.getNamed<interfaces.Middleware>(Types.Middleware, Targets.Middleware.MulterMiddleware);\n\n@controller('/item-images', multerMiddleware.use, restApi.use)\nexport class ItemImageController {\n\n    public log: LoggerType;\n\n    constructor(@inject(Types.Service) @named(Targets.Service.ItemImageService) private itemImageService: ItemImageService,\n                @inject(Types.Service) @named(Targets.Service.ItemImageHttpUploadService) private itemImageHttpUploadService: ItemImageHttpUploadService,\n                @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType) {\n        this.log = new Logger(__filename);\n    }\n\n    @httpPost('/template/:templateId')\n    public async create(@response() res: myExpress.Response, @requestParam('templateId') templateId: string,\n                        @requestBody() body: any, @request() req: any): Promise<resources.ItemImage[]> {\n\n        return this.itemImageHttpUploadService.httpPostImageUpload(new ImagePostUploadRequest({\n            listingItemTemplateId: templateId,\n            requestBody: body,\n            request: req\n        }));\n    }\n\n    @httpGet('/:id/:imageVersion')\n    public async publishImage(@response() res: myExpress.Response, @requestParam('id') id: string, @requestParam('imageVersion')\n        imageVersion: string): Promise<any> {\n\n        // find the itemImage by id\n        const itemImage = await this.itemImageService.findOne(parseInt(id, 10));\n\n        const itemImageResult = itemImage.toJSON();\n\n        // search the itemImageData like params image version\n        const imgVersion: any = await _.find(itemImageResult.ItemImageDatas, data => data['imageVersion'] === imageVersion);\n\n        if (itemImage === null || itemImageResult.ItemImageDatas.length === 0 || !imgVersion) {\n            res.status(404).send('Image Not found');\n        } else {\n            const data = imgVersion.ItemImageDataContent.data || imgVersion.data;\n            const dataBuffer = new Buffer(data, 'base64');\n            res.setHeader('Content-Disposition', 'filename=' + imageVersion);\n            res.send(dataBuffer);\n        }\n    }\n}\n\n"]}