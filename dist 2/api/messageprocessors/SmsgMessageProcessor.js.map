{"version":3,"file":"SmsgMessageProcessor.js","sourceRoot":"","sources":["../../../src/api/messageprocessors/SmsgMessageProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, multiInject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets, Events } from '../../constants';\n\nimport { EventEmitter } from '../../core/api/events';\nimport { SmsgService } from '../services/SmsgService';\n\nimport { MessageProcessorInterface } from './MessageProcessorInterface';\nimport { SmsgMessageService } from '../services/SmsgMessageService';\nimport { SmsgMessageFactory } from '../factories/SmsgMessageFactory';\nimport * as resources from 'resources';\nimport { SmsgMessageCreateRequest } from '../requests/SmsgMessageCreateRequest';\nimport { SmsgMessage } from '../models/SmsgMessage';\nimport { IncomingSmsgMessage } from '../messages/IncomingSmsgMessage';\n\nexport class SmsgMessageProcessor implements MessageProcessorInterface {\n\n    public log: LoggerType;\n\n    private timeout: any;\n    private interval = 5000;\n\n    // tslint:disable:max-line-length\n    constructor(\n        @inject(Types.Factory) @named(Targets.Factory.SmsgMessageFactory) private smsgMessageFactory: SmsgMessageFactory,\n        @inject(Types.Service) @named(Targets.Service.SmsgMessageService) private smsgMessageService: SmsgMessageService,\n        @inject(Types.Service) @named(Targets.Service.SmsgService) private smsgService: SmsgService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Core) @named(Core.Events) public eventEmitter: EventEmitter\n    ) {\n        this.log = new Logger(__filename);\n    }\n    // tslint:enable:max-line-length\n\n    /**\n     * polls for new smsgmessages and stores them in the database\n     *\n     * @param {SmsgMessage[]} messages\n     * @returns {Promise<void>}\n     */\n    public async process(messages: IncomingSmsgMessage[]): Promise<void> {\n\n        for (const message of messages) {\n\n            // get the message again using smsg, since the smsginbox doesnt return expiration\n            const msg: IncomingSmsgMessage = await this.smsgService.smsg(message.msgid, false, true);\n            const smsgMessageCreateRequest: SmsgMessageCreateRequest = await this.smsgMessageFactory.get(msg);\n\n            // this.log.debug('smsgMessageCreateRequest: ', JSON.stringify(smsgMessageCreateRequest, null, 2));\n            await this.smsgMessageService.create(smsgMessageCreateRequest)\n                .then(async smsgMessageModel => {\n\n                    const smsgMessage: resources.SmsgMessage = smsgMessageModel.toJSON();\n                    this.log.debug('INCOMING SMSGMESSAGE: '\n                        + smsgMessage.from + ' => ' + smsgMessage.to\n                        + ' : ' + smsgMessage.type\n                        + ' : ' + smsgMessage.status\n                        + ' : ' + smsgMessage.msgid);\n\n                    // after message is stored, remove it\n                    await this.smsgService.smsg(message.msgid, true, true);\n                })\n                .catch(reason => {\n                    this.log.error('ERROR: ', reason);\n                });\n        }\n    }\n\n    public stop(): void {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = undefined;\n        }\n    }\n\n    public schedulePoll(): void {\n        this.timeout = setTimeout(\n            async () => {\n                await this.poll();\n                this.schedulePoll();\n            },\n            this.interval\n        );\n    }\n\n    /**\n     * main poller\n     *\n     * @returns {Promise<void>}\n     */\n    private async poll(): Promise<void> {\n        await this.pollMessages()\n            .then( async messages => {\n                if (messages.result !== '0') {\n                    const smsgMessages: IncomingSmsgMessage[] = messages.messages;\n                    await this.process(smsgMessages);\n                }\n                return;\n            })\n            .catch( reason => {\n                this.log.error('poll(), error: ' + reason);\n                return;\n            });\n    }\n\n    /**\n     * TODO: should not fetch all unreads at the same time\n     *\n     * @returns {Promise<any>}\n     */\n    private async pollMessages(): Promise<any> {\n        const response = await this.smsgService.smsgInbox('unread');\n        return response;\n    }\n}\n"]}