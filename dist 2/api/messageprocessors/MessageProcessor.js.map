{"version":3,"file":"MessageProcessor.js","sourceRoot":"","sources":["../../../src/api/messageprocessors/MessageProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport { inject, multiInject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets, Events } from '../../constants';\n\nimport { EventEmitter } from '../../core/api/events';\n\nimport { MessageProcessorInterface } from './MessageProcessorInterface';\nimport { MarketplaceMessage } from '../messages/MarketplaceMessage';\nimport { BidMessageType } from '../enums/BidMessageType';\nimport { EscrowMessageType } from '../enums/EscrowMessageType';\nimport { ProposalMessageType } from '../enums/ProposalMessageType';\nimport { VoteMessageType } from '../enums/VoteMessageType';\nimport * as resources from 'resources';\nimport { SmsgMessageService } from '../services/SmsgMessageService';\nimport { ListingItemMessageType } from '../enums/ListingItemMessageType';\nimport { SmsgMessageSearchParams } from '../requests/SmsgMessageSearchParams';\nimport { SmsgMessageStatus } from '../enums/SmsgMessageStatus';\nimport { SearchOrder } from '../enums/SearchOrder';\nimport { SmsgMessage } from '../models/SmsgMessage';\nimport { MarketplaceEvent } from '../messages/MarketplaceEvent';\nimport { SmsgMessageFactory } from '../factories/SmsgMessageFactory';\nimport { ActionMessageInterface } from '../messages/ActionMessageInterface';\nimport { ListingItemMessageInterface } from '../messages/ListingItemMessageInterface';\nimport { ProposalMessageInterface } from '../messages/ProposalMessageInterface';\nimport { VoteMessageInterface } from '../messages/VoteMessageInterface';\nimport { IncomingSmsgMessage } from '../messages/IncomingSmsgMessage';\n\ntype AllowedMessageTypes = ListingItemMessageType | BidMessageType | EscrowMessageType | ProposalMessageType | VoteMessageType;\n\nexport class MessageProcessor implements MessageProcessorInterface {\n\n    public log: LoggerType;\n\n    private interval: any;\n    private pollCount = 0;\n\n    private DEFAULT_INTERVAL = 5 * 1000;\n\n    private LISTINGITEM_MESSAGES = [ListingItemMessageType.MP_ITEM_ADD];\n    private BID_MESSAGES = [BidMessageType.MPA_BID, BidMessageType.MPA_ACCEPT, BidMessageType.MPA_REJECT, BidMessageType.MPA_CANCEL];\n    private ESCROW_MESSAGES = [EscrowMessageType.MPA_LOCK, EscrowMessageType.MPA_RELEASE, EscrowMessageType.MPA_REQUEST_REFUND, EscrowMessageType.MPA_REFUND];\n    private PROPOSAL_MESSAGES = [ProposalMessageType.MP_PROPOSAL_ADD];\n    private VOTE_MESSAGES = [VoteMessageType.MP_VOTE];\n\n    // tslint:disable:max-line-length\n    constructor(\n        @inject(Types.Factory) @named(Targets.Factory.SmsgMessageFactory) private smsgMessageFactory: SmsgMessageFactory,\n        @inject(Types.Service) @named(Targets.Service.SmsgMessageService) private smsgMessageService: SmsgMessageService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Core) @named(Core.Events) public eventEmitter: EventEmitter\n    ) {\n        this.log = new Logger(__filename);\n    }\n    // tslint:enable:max-line-length\n\n    /**\n     * main messageprocessor, ...\n     *\n     * @param {module:resources.SmsgMessage[]} smsgMessages\n     * @param {boolean} emitEvent\n     * @returns {Promise<void>}\n     */\n    public async process(smsgMessages: resources.SmsgMessage[], emitEvent: boolean = true): Promise<void> {\n\n        for (const smsgMessage of smsgMessages) {\n\n            this.log.debug('PROCESSING: ', smsgMessage.msgid);\n\n            // this.log.debug('smsgMessage:', JSON.stringify(smsgMessage, null, 2));\n\n            // TODO: throw instead of returning null\n            const marketplaceMessage: MarketplaceMessage | null = await this.smsgMessageFactory.getMarketplaceMessage(smsgMessage);\n            const eventType: string | null = await this.getEventForMessageType(smsgMessage.type);\n\n            // this.log.debug('marketplaceMessage:', JSON.stringify(marketplaceMessage, null, 2));\n            // this.log.debug('eventType:', JSON.stringify(eventType, null, 2));\n            // this.log.debug('emitEvent:', JSON.stringify(emitEvent, null, 2));\n\n            if (marketplaceMessage !== null && eventType !== null) {\n\n                if (emitEvent) {\n                    // todo: check if this is actually necessary?\n                    marketplaceMessage.market = smsgMessage.to;\n                    smsgMessage.text = '';\n\n                    const marketplaceEvent: MarketplaceEvent = {\n                        smsgMessage,\n                        marketplaceMessage\n                    };\n\n                    this.log.debug('SMSGMESSAGE: '\n                        + smsgMessage.from + ' => ' + smsgMessage.to\n                        + ' : ' + smsgMessage.type\n                        + ' : ' + smsgMessage.status\n                        + ' : ' + smsgMessage.msgid);\n\n                    // this.log.debug('SENDING: ', eventType);\n\n                    // send event to the eventTypes processor\n                    this.eventEmitter.emit(eventType, marketplaceEvent);\n\n                    // send event to cli\n                    // todo: send marketplaceEvent\n                    this.eventEmitter.emit(Events.Cli, {\n                        message: eventType,\n                        data: marketplaceMessage\n                    });\n                }\n\n            } else {\n\n                this.log.debug('marketplaceMessage:', JSON.stringify(marketplaceMessage, null, 2));\n                this.log.debug('eventType:', JSON.stringify(eventType, null, 2));\n                this.log.debug('emitEvent:', JSON.stringify(emitEvent, null, 2));\n\n                this.log.debug('PROCESSING: ' + smsgMessage.msgid + ' PARSING FAILED');\n\n                await this.smsgMessageService.updateSmsgMessageStatus(smsgMessage, SmsgMessageStatus.PARSING_FAILED);\n            }\n        }\n    }\n\n    public stop(): void {\n        if (this.interval) {\n            clearInterval(this.interval);\n            this.interval = undefined;\n        }\n    }\n\n    public schedulePoll(pollingInterval: number = this.DEFAULT_INTERVAL): void {\n\n        // this.log.debug('schedulePoll(), pollingInterval: ', pollingInterval);\n\n/*\n        this.timeout = setTimeout(\n            async () => {\n                pollingInterval = await this.poll();\n                this.schedulePoll(pollingInterval);\n                this.log.debug('schedulePoll(), done: ', timeout);\n            },\n            pollingInterval\n        );\n*/\n\n        this.interval = setInterval(() => {\n\n            clearInterval(this.interval);\n            this.poll().then(interval => {\n                this.schedulePoll(interval); // re-run\n            });\n\n        }, pollingInterval);\n\n    }\n\n    /**\n     * main poller\n     *\n     * @returns {Promise<void>}\n     */\n    public async poll(emitEvent: boolean = true): Promise<number> {  // public for tests\n\n        const startTime = new Date().getTime();\n\n        // fetch and process new ProposalMessages\n        // fetch and process new VoteMessages\n        // fetch and process new ListingItemMessages\n        // fetch and process new BidMessages\n        // fetch and process new EscrowMessages\n        // fetch and process the waiting ones\n\n        const searchParams = [\n            {types: this.PROPOSAL_MESSAGES,     status: SmsgMessageStatus.NEW,      amount: 10, nextInverval: this.DEFAULT_INTERVAL},\n            {types: this.VOTE_MESSAGES,         status: SmsgMessageStatus.NEW,      amount: 10, nextInverval: this.DEFAULT_INTERVAL},\n            {types: this.LISTINGITEM_MESSAGES,  status: SmsgMessageStatus.NEW,      amount: 1,  nextInverval: this.DEFAULT_INTERVAL},\n            {types: this.BID_MESSAGES,          status: SmsgMessageStatus.NEW,      amount: 10, nextInverval: this.DEFAULT_INTERVAL},\n            {types: this.ESCROW_MESSAGES,       status: SmsgMessageStatus.NEW,      amount: 10, nextInverval: this.DEFAULT_INTERVAL},\n            {types: [],                         status: SmsgMessageStatus.WAITING,  amount: 10, nextInverval: this.DEFAULT_INTERVAL}\n        ];\n\n        let fetchNext = true;\n        let nextInterval = 1000;\n\n        // search for different types of messages in order: proposal -> vote -> listingitem -> ...\n        for (const params of searchParams) {\n\n            // if we find messages, skip fetching more until we poll for more\n            if (fetchNext) {\n                // this.log.debug('MessageProcessor.poll #' + this.pollCount + ': find: ' + JSON.stringify(params));\n\n                fetchNext = await this.getSmsgMessages(params.types, params.status, params.amount)\n                    .then( async smsgMessages => {\n\n                        // this.log.debug('smsgMessages: ' + JSON.stringify(smsgMessages, null, 2));\n\n                        if (!_.isEmpty(smsgMessages)) {\n                            for (const smsgMessage of smsgMessages) {\n                                await this.smsgMessageService.updateSmsgMessageStatus(smsgMessage, SmsgMessageStatus.PROCESSING);\n                                smsgMessage.status = SmsgMessageStatus.PROCESSING;\n                            }\n                            await this.process(smsgMessages, emitEvent);\n\n                            // we just processed certain types of messages, so skip processing the next types until we\n                            // have processed all of these\n                            return false;\n                        } else {\n                            nextInterval = params.nextInverval;\n\n                            // move to process the next types of messages\n                            return true;\n                        }\n                    })\n                    .catch( reason => {\n                        this.log.error('Messageprocessor.poll(), ERROR: ', reason);\n                        return true;\n                    });\n\n                // this.log.debug('Messageprocessor.poll(), fetchNext: ', fetchNext);\n\n            }\n        }\n\n        this.log.debug('MessageProcessor.poll #' + this.pollCount + ': ' + (new Date().getTime() - startTime) + 'ms');\n        this.pollCount++;\n\n        return nextInterval;\n    }\n\n    /**\n     *\n     * @param {any[]} types\n     * @param {SmsgMessageStatus} status\n     * @param {number} amount\n     * @returns {Promise<module:resources.SmsgMessage[]>}\n     */\n    private async getSmsgMessages(types: any[], // ListingItemMessageType | BidMessageType | EscrowMessageType | ProposalMessageType | VoteMessageType,\n                                  status: SmsgMessageStatus, amount: number = 10): Promise<resources.SmsgMessage[]> {\n\n        const searchParams = {\n            order: SearchOrder.DESC,\n            orderByColumn: 'received',\n            status,\n            types,\n            page: 0,\n            pageLimit: amount,\n            age: 1000 * 20\n        } as SmsgMessageSearchParams;\n\n        const messagesModel = await this.smsgMessageService.searchBy(searchParams);\n        const messages = messagesModel.toJSON();\n\n        if (messages.length > 0) {\n            this.log.debug('found ' + messages.length + ' messages. types: [' + types + '], status: ' + status);\n        }\n        return messages;\n    }\n\n    private async getEventForMessageType(\n        messageType: AllowedMessageTypes):\n        Promise<string | null> {\n\n        switch (messageType) {\n            case BidMessageType.MPA_BID:\n                return Events.BidReceivedEvent;\n            case BidMessageType.MPA_ACCEPT:\n                return Events.AcceptBidReceivedEvent;\n            case BidMessageType.MPA_REJECT:\n                return Events.RejectBidReceivedEvent;\n            case BidMessageType.MPA_CANCEL:\n                return Events.CancelBidReceivedEvent;\n            case EscrowMessageType.MPA_LOCK:\n                return Events.LockEscrowReceivedEvent;\n            case EscrowMessageType.MPA_REQUEST_REFUND:\n                return Events.RequestRefundEscrowReceivedEvent;\n            case EscrowMessageType.MPA_REFUND:\n                return Events.RefundEscrowReceivedEvent;\n            case EscrowMessageType.MPA_RELEASE:\n                return Events.ReleaseEscrowReceivedEvent;\n            case ProposalMessageType.MP_PROPOSAL_ADD:\n                return Events.ProposalReceivedEvent;\n            case VoteMessageType.MP_VOTE:\n                return Events.VoteReceivedEvent;\n            case ListingItemMessageType.MP_ITEM_ADD:\n                return Events.ListingItemReceivedEvent;\n            case ListingItemMessageType.UNKNOWN:\n            default:\n                return null;\n        }\n    }\n}\n"]}