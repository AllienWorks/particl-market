{"version":3,"file":"ServerStartedListener.js","sourceRoot":"","sources":["../../../src/api/listeners/ServerStartedListener.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { DefaultItemCategoryService } from '../services/DefaultItemCategoryService';\nimport { DefaultProfileService } from '../services/DefaultProfileService';\nimport { DefaultMarketService } from '../services/DefaultMarketService';\nimport { EventEmitter } from '../../core/api/events';\nimport { MessageProcessor} from '../messageprocessors/MessageProcessor';\nimport { CoreRpcService } from '../services/CoreRpcService';\nimport { ExpiredListingItemProcessor } from '../messageprocessors/ExpiredListingItemProcessor';\nimport { SmsgMessageProcessor } from '../messageprocessors/SmsgMessageProcessor';\nimport { Environment } from '../../core/helpers/Environment';\nimport { ListingItemActionService } from '../services/ListingItemActionService';\nimport { BidActionService } from '../services/BidActionService';\nimport { EscrowActionService } from '../services/EscrowActionService';\nimport { ProposalActionService } from '../services/ProposalActionService';\nimport { VoteActionService } from '../services/VoteActionService';\n\nexport class ServerStartedListener implements interfaces.Listener {\n\n    public static Event = Symbol('ServerStartedListenerEvent');\n    public static ServerReadyEvent = Symbol('ServerReadyListenerEvent');\n\n    public log: LoggerType;\n    public isAppReady = false;\n    public isStarted = false;\n    private previousState = false;\n\n    private timeout: any;\n    private interval = 1000;\n\n// tslint:disable:max-line-length\n    constructor(\n        @inject(Types.MessageProcessor) @named(Targets.MessageProcessor.MessageProcessor) public messageProcessor: MessageProcessor,\n        @inject(Types.MessageProcessor) @named(Targets.MessageProcessor.SmsgMessageProcessor) public smsgMessageProcessor: SmsgMessageProcessor,\n        @inject(Types.MessageProcessor) @named(Targets.MessageProcessor.ExpiredListingItemProcessor) public expiredListingItemProcessor: ExpiredListingItemProcessor,\n        @inject(Types.Service) @named(Targets.Service.DefaultItemCategoryService) public defaultItemCategoryService: DefaultItemCategoryService,\n        @inject(Types.Service) @named(Targets.Service.DefaultProfileService) public defaultProfileService: DefaultProfileService,\n        @inject(Types.Service) @named(Targets.Service.DefaultMarketService) public defaultMarketService: DefaultMarketService,\n        @inject(Types.Service) @named(Targets.Service.CoreRpcService) public coreRpcService: CoreRpcService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemActionService) public listingItemActionService: ListingItemActionService,\n        @inject(Types.Service) @named(Targets.Service.BidActionService) public bidActionService: BidActionService,\n        @inject(Types.Service) @named(Targets.Service.EscrowActionService) public escrowActionService: EscrowActionService,\n        @inject(Types.Service) @named(Targets.Service.ProposalActionService) public proposalActionService: ProposalActionService,\n        @inject(Types.Service) @named(Targets.Service.VoteActionService) public voteActionService: VoteActionService,\n        @inject(Types.Core) @named(Core.Events) public eventEmitter: EventEmitter,\n        @inject(Types.Core) @named(Core.Logger) Logger: typeof LoggerType\n    ) {\n        // ActionServices need to be injected here to start the event listeners when testing\n\n        this.log = new Logger(__filename);\n    }\n// tslint:enable:max-line-length\n\n    /**\n     *\n     * @param payload\n     * @returns {Promise<void>}\n     */\n    public async act(payload: any): Promise<any> {\n        this.log.info('Received event ServerStartedListenerEvent', payload);\n        this.isAppReady = true;\n        this.pollForConnection();\n    }\n\n    public pollForConnection(): void {\n        this.timeout = setTimeout(\n            async () => {\n                this.isStarted = await this.checkConnection();\n                this.pollForConnection();\n            },\n            this.interval\n        );\n    }\n\n    public stop(): void {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = undefined;\n        }\n    }\n\n    private async checkConnection(): Promise<boolean> {\n        const isConnected = await this.coreRpcService.isConnected();\n        if (isConnected) {\n\n            if (this.previousState !== isConnected) {\n                this.log.info('connection with particld established.');\n\n                // seed the default market\n                await this.defaultMarketService.seedDefaultMarket();\n\n                // seed the default categories\n                await this.defaultItemCategoryService.seedDefaultCategories();\n\n                // seed the default Profile\n                await this.defaultProfileService.seedDefaultProfile();\n\n                // start expiredListingItemProcessor\n                this.expiredListingItemProcessor.scheduleProcess();\n\n                // start message polling, unless we're running tests\n                if (!Environment.isTest()) {\n                    this.smsgMessageProcessor.schedulePoll();\n                    this.messageProcessor.schedulePoll();\n                }\n                this.interval = 10000;\n            }\n\n            // this.log.info('connected to particld, checking again in ' + this.interval + 'ms.');\n        } else {\n\n            if (this.previousState !== isConnected) {\n                this.log.info('connection with particld disconnected.');\n\n                // stop message polling\n                this.messageProcessor.stop();\n                this.interval = 1000;\n            }\n\n            if (process.env.NODE_ENV !== 'test') {\n                this.log.error('failed to connect to particld, retrying in ' + this.interval + 'ms.');\n            }\n        }\n\n        this.previousState = isConnected;\n\n        return isConnected;\n    }\n\n\n}\n"]}