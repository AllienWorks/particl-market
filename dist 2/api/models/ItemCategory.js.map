{"version":3,"file":"ItemCategory.js","sourceRoot":"","sources":["../../../src/api/models/ItemCategory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { Bookshelf } from '../../config/Database';\nimport { Collection, Model } from 'bookshelf';\n\nexport class ItemCategory extends Bookshelf.Model<ItemCategory> {\n\n    public static async fetchById(value: number, withRelated: boolean = true): Promise<ItemCategory> {\n        if (withRelated) {\n            return await ItemCategory.where<ItemCategory>({ id: value }).fetch({\n                withRelated: [\n                    'ParentItemCategory',\n                    'ParentItemCategory.ParentItemCategory',\n                    'ParentItemCategory.ParentItemCategory.ParentItemCategory',\n                    'ParentItemCategory.ParentItemCategory.ParentItemCategory.ParentItemCategory',\n                    'ChildItemCategories'\n                ]\n            });\n        } else {\n            return await ItemCategory.where<ItemCategory>({ id: value }).fetch();\n        }\n    }\n\n    public static async fetchByKey(key: string, withRelated: boolean = true): Promise<ItemCategory> {\n        if (withRelated) {\n            return await ItemCategory.where<ItemCategory>({ key }).fetch({\n                withRelated: [\n                    'ParentItemCategory',\n                    'ParentItemCategory.ParentItemCategory',\n                    'ParentItemCategory.ParentItemCategory.ParentItemCategory',\n                    'ParentItemCategory.ParentItemCategory.ParentItemCategory.ParentItemCategory',\n                    'ChildItemCategories'\n                ]\n            });\n        } else {\n            return await ItemCategory.where<ItemCategory>({ key }).fetch();\n        }\n    }\n\n    public static async fetchRoot(): Promise<ItemCategory> {\n        return await ItemCategory.where<ItemCategory>({ key: 'cat_ROOT' }).fetch({\n            withRelated: [\n                'ChildItemCategories',\n                'ChildItemCategories.ChildItemCategories',\n                'ChildItemCategories.ChildItemCategories.ChildItemCategories',\n                'ChildItemCategories.ChildItemCategories.ChildItemCategories.ChildItemCategories'\n            ]\n        });\n    }\n\n    public static async fetchAllByName(name: string, withRelated: boolean = true): Promise<Collection<ItemCategory>> {\n        const listingCollection = ItemCategory.forge<Model<ItemCategory>>()\n            .query(qb => {\n                qb.where('name', 'LIKE', '%' + name + '%');\n            })\n            .orderBy('id', 'ASC');\n\n        if (withRelated) {\n            return await listingCollection.fetchAll({\n                withRelated: [\n                    'ParentItemCategory',\n                    'ParentItemCategory.ParentItemCategory',\n                    'ParentItemCategory.ParentItemCategory.ParentItemCategory',\n                    'ParentItemCategory.ParentItemCategory.ParentItemCategory.ParentItemCategory',\n                    'ChildItemCategories'\n                ]\n            });\n        } else {\n            return await listingCollection.fetchAll();\n        }\n    }\n\n    public static async fetchCategoryByNameAndParentID(categoryName: string, parentCategoryId: number | null): Promise<ItemCategory> {\n        return await ItemCategory.where<ItemCategory>({ name: categoryName, parent_item_category_id: parentCategoryId }).fetch();\n    }\n\n    public get tableName(): string { return 'item_categories'; }\n    public get hasTimestamps(): boolean { return true; }\n\n    public get Id(): number { return this.get('id'); }\n    public set Id(value: number) { this.set('id', value); }\n\n    public get Name(): string { return this.get('name'); }\n    public set Name(value: string) { this.set('name', value); }\n\n    public get Key(): string { return this.get('key'); }\n    public set Key(value: string) { this.set('key', value); }\n\n    public get Description(): string { return this.get('description'); }\n    public set Description(value: string) { this.set('description', value); }\n\n    public get UpdatedAt(): Date { return this.get('updatedAt'); }\n    public set UpdatedAt(value: Date) { this.set('updatedAt', value); }\n\n    public get CreatedAt(): Date { return this.get('createdAt'); }\n    public set CreatedAt(value: Date) { this.set('createdAt', value); }\n\n    // ItemCategory can haz a parent ItemCategory\n    public ParentItemCategory(): ItemCategory {\n        // model.hasOne(Target, [foreignKey], [foreignKeyTarget])\n        // return this.hasOne(ItemCategory, 'parent_item_category_id', 'id');\n        // model.belongsTo(Target, [foreignKey], [foreignKeyTarget])\n        return this.belongsTo(ItemCategory, 'parent_item_category_id', 'id');\n    }\n\n    public ChildItemCategories(): Collection<ItemCategory> {\n        // model.hasMany(Target, [foreignKey], [foreignKeyTarget])\n        return this.hasMany(ItemCategory, 'parent_item_category_id', 'id');\n    }\n}\n"]}