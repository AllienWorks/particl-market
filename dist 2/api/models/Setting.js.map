{"version":3,"file":"Setting.js","sourceRoot":"","sources":["../../../src/api/models/Setting.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { Bookshelf } from '../../config/Database';\nimport {Collection, Model} from 'bookshelf';\nimport { Profile } from './Profile';\n\nexport class Setting extends Bookshelf.Model<Setting> {\n\n    public static RELATIONS = [\n        'Profile'\n    ];\n\n    public static async fetchAllByProfileId(profileId: number, withRelated: boolean = true): Promise<Collection<Setting>> {\n        const SettingCollection = Setting.forge<Model<Setting>>()\n            .query(qb => {\n                qb.where('profile_id', '=', profileId);\n            })\n            .orderBy('id', 'ASC');\n\n        if (withRelated) {\n            return await SettingCollection.fetchAll({\n                withRelated: this.RELATIONS\n            });\n        } else {\n            return await SettingCollection.fetchAll();\n        }\n    }\n\n    public static async fetchById(value: number, withRelated: boolean = true): Promise<Setting> {\n        if (withRelated) {\n            return await Setting.where<Setting>({ id: value }).fetch({\n                withRelated: this.RELATIONS\n            });\n        } else {\n            return await Setting.where<Setting>({ id: value }).fetch();\n        }\n    }\n\n    public static async fetchByKeyAndProfileId(key: string, profileId: number, withRelated: boolean = true): Promise<Setting> {\n        if (withRelated) {\n            return await Setting.where<Setting>({ profile_id: profileId, key }).fetch({\n                withRelated: this.RELATIONS\n            });\n        } else {\n            return await Setting.where<Setting>({ profile_id: profileId, key }).fetch();\n        }\n    }\n\n    public get tableName(): string { return 'settings'; }\n    public get hasTimestamps(): boolean { return true; }\n\n    public get Id(): number { return this.get('id'); }\n    public set Id(value: number) { this.set('id', value); }\n\n    public get Key(): string { return this.get('key'); }\n    public set Key(value: string) { this.set('key', value); }\n\n    public get Value(): string { return this.get('value'); }\n    public set Value(value: string) { this.set('value', value); }\n\n    public get UpdatedAt(): Date { return this.get('updatedAt'); }\n    public set UpdatedAt(value: Date) { this.set('updatedAt', value); }\n\n    public get CreatedAt(): Date { return this.get('createdAt'); }\n    public set CreatedAt(value: Date) { this.set('createdAt', value); }\n\n    public Profile(): Profile {\n        return this.belongsTo(Profile, 'profile_id', 'id');\n    }\n}\n"]}