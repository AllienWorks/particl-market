{"version":3,"file":"BaseCommand.js","sourceRoot":"","sources":["../../../src/api/commands/BaseCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,uDAA8D;AAI9D,4BAA4B;AAC5B,uEAAoE;AAEpE;IAKI,YAAY,OAAgB;QACxB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,0BAAQ,CAAC;IAC7B,CAAC;IAED;;;;;;OAMG;IACU,WAAW,CAAC,OAAmB,EAAE,cAAiC;;YAC3E,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YAC3C,8DAA8D;YAC9D,MAAM,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,OAAO,IAAI,OAAO,CAAC,WAAW,KAAK,WAAW,CAAC,CAAC;YACpG,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBACd,MAAM,UAAU,GAAG,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;gBACnD,WAAW;gBACX,MAAM,aAAa,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBACzD,OAAO,GAAG,aAAa,GAAG,aAAa,GAAG,OAAO,CAAC;gBAClD,UAAU;gBACV,MAAM,CAAC,MAAM,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;YAC7D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,IAAI,qCAAiB,CAAC,sBAAsB,GAAG,WAAW,GAAG,IAAI,CAAC,CAAC;YAC7E,CAAC;QACL,CAAC;KAAA;IAED;;;OAGG;IACI,gBAAgB;QACnB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;IACtC,CAAC;IAEY,QAAQ,CAAC,IAAgB;;YAClC,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;KAAA;IAEM,IAAI;QACP,MAAM,CAAC,yBAAyB,CAAC;IACrC,CAAC;IAEM,KAAK;QACR,MAAM,CAAC,yBAAyB,CAAC;IACrC,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,6BAA6B,CAAC;IACzC,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;IACpC,CAAC;IAEM,UAAU;QACb,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;CAEJ;AArED,kCAqEC","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { CommandEnumType, Commands } from './CommandEnumType';\nimport { Command } from './Command';\nimport { RpcRequest } from '../requests/RpcRequest';\nimport { RpcCommandFactory } from '../factories/RpcCommandFactory';\nimport * as _ from 'lodash';\nimport { NotFoundException } from '../exceptions/NotFoundException';\n\nexport class BaseCommand {\n\n    public commands: CommandEnumType;\n    public command: Command;\n\n    constructor(command: Command) {\n        this.command = command;\n        this.commands = Commands;\n    }\n\n    /**\n     * execute the next command in data.params\n     *\n     * @param rpcCommandFactory\n     * @param data\n     * @returns {Promise<Bookshelf.Model<any>>}\n     */\n    public async executeNext(request: RpcRequest, commandFactory: RpcCommandFactory): Promise<BaseCommand> {\n        const commandName = request.params.shift();\n        // find a matching command from current commands childCommands\n        const commandType = _.find(this.getChildCommands(), command => command.commandName === commandName);\n        if (commandType) {\n            const rpcCommand = commandFactory.get(commandType);\n            // validate\n            const newRpcRequest = await rpcCommand.validate(request);\n            request = newRpcRequest ? newRpcRequest : request;\n            // execute\n            return await rpcCommand.execute(request, commandFactory);\n        } else {\n            throw new NotFoundException('Unknown subcommand: ' + commandName + '\\n');\n        }\n    }\n\n    /**\n     * returns the child Commands of this command\n     * @returns {Command[]}\n     */\n    public getChildCommands(): Command[] {\n        return this.command.childCommands;\n    }\n\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        return data;\n    }\n\n    public help(): string {\n        return ' <TODO: Command.help()>';\n    }\n\n    public usage(): string {\n        return '<TODO: Command.usage()>';\n    }\n\n    public description(): string {\n        return 'TODO: Command.description()';\n    }\n\n    public example(): any {\n        return null;\n    }\n\n    public getName(): string {\n        return this.command.commandName;\n    }\n\n    public getCommand(): Command {\n        return this.command;\n    }\n\n}\n"]}