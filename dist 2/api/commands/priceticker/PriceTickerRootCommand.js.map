{"version":3,"file":"PriceTickerRootCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/priceticker/PriceTickerRootCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAC1C,0DAAuD;AAEvD,yDAA+D;AAE/D,kDAA0D;AAE1D,gDAA6C;AAC7C,yEAAsE;AACtE,wDAA8C;AAE9C,0EAAuE;AACvE,wEAAqE;AAIrE,IAAa,sBAAsB,GAAnC,4BAAoC,SAAQ,yBAAW;IAInD,YACmD,MAAyB,EACE,kBAAsC;QAEhH,KAAK,CAAC,0BAAQ,CAAC,gBAAgB,CAAC,CAAC;QAHc,WAAM,GAAN,MAAM,CAAmB;QACE,uBAAkB,GAAlB,kBAAkB,CAAoB;QAGhH,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;;;;OAUG;IAEU,OAAO,CAAuB,IAAgB,EAAE,iBAAoC;;YAC7F,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACzB,8BAA8B;gBAC9B,MAAM,UAAU,GAAa,EAAE,CAAC;gBAChC,GAAG,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC9B,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;gBACzC,CAAC;gBACD,MAAM,UAAU,GAAQ,MAAM,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;gBAClF,MAAM,CAAC,UAAU,CAAC;YACtB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,IAAI,mCAAgB,CAAC,0BAA0B,CAAC,CAAC;YAC3D,CAAC;QACL,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,kCAAkC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IACpF,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI;cACpB,2CAA2C,CAAC;IACtD,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,oCAAoC,CAAC;IAChD,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,sBAAsB,CAAC;IAClC,CAAC;CAEJ,CAAA;AA/BG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU,EAAqB,qCAAiB;;qDAYhG;AApCQ,sBAAsB;IAK1B,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;qDAA6B,uCAAkB;GAN3G,sBAAsB,CAuDlC;AAvDY,wDAAsB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\n\nimport { BaseCommand } from '../BaseCommand';\nimport { RpcCommandFactory } from '../../factories/RpcCommandFactory';\nimport { Commands } from '../CommandEnumType';\n\nimport { PriceTickerService } from '../../services/PriceTickerService';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { PriceTicker } from '../../models/PriceTicker';\n\n\nexport class PriceTickerRootCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<PriceTicker>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.PriceTickerService) private priceTickerService: PriceTickerService\n    ) {\n        super(Commands.PRICETICKER_ROOT);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     *\n     * data.params[]:\n     * [0] currency\n     * [...n] currency\n     *\n     * example: [ETH, BTC, XRP]\n     *\n     * @param data\n     * @returns {Promise<Bookshelf.Collection<PriceTicker>>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest, rpcCommandFactory: RpcCommandFactory): Promise<Bookshelf.Collection<PriceTicker>> {\n        if (data.params.length > 0) {\n            // convert params to uppercase\n            const currencies: string[] = [];\n            for (const param of data.params) {\n                currencies.push(param.toUpperCase());\n            }\n            const returnData: any = await this.priceTickerService.getPriceTickers(currencies);\n            return returnData;\n        } else {\n            throw new MessageException('Currency can\\'t be blank');\n        }\n    }\n\n    public usage(): string {\n        return this.getName() + ' <currency> [currencies...]  -  ' + this.description();\n    }\n\n    public help(): string {\n        return this.usage() + '\\n'\n            + '    <currency>               - Currency. ';\n    }\n\n    public description(): string {\n        return 'Commands for managing PriceTicker.';\n    }\n\n    public example(): any {\n        return 'priceticker PART BTC';\n    }\n\n}\n"]}