{"version":3,"file":"ItemCategoryGetCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/itemcategory/ItemCategoryGetCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAC1C,yDAA+D;AAC/D,kDAA0D;AAC1D,4EAAyE;AACzE,0DAAuD;AAGvD,wDAA6C;AAC7C,gDAA6C;AAE7C,IAAa,sBAAsB,GAAnC,4BAAoC,SAAQ,yBAAW;IAInD,YACmD,MAAyB,EACG,mBAAwC;QAEnH,KAAK,CAAC,0BAAQ,CAAC,YAAY,CAAC,CAAC;QAHkB,WAAM,GAAN,MAAM,CAAmB;QACG,wBAAmB,GAAnB,mBAAmB,CAAqB;QAGnH,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;;OAQG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACrC,MAAM,CAAC,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAClE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,MAAM,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACvE,CAAC;QACL,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,gCAAgC,CAAC;IAC7D,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,sFAAsF;cACtF,0DAA0D;cAC1D,sFAAsF;cACtF,4DAA4D,CAAC;IACvE,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,yEAAyE,CAAC;IACrF,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC;IAChD,CAAC;CACJ,CAAA;AA3BG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;qDAM1D;AA5BQ,sBAAsB;IAK1B,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAA;qDAA8B,yCAAmB;GAN9G,sBAAsB,CAiDlC;AAjDY,wDAAsB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ItemCategoryService } from '../../services/ItemCategoryService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ItemCategory } from '../../models/ItemCategory';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\n\nexport class ItemCategoryGetCommand extends BaseCommand implements RpcCommandInterface<ItemCategory> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ItemCategoryService) private itemCategoryService: ItemCategoryService\n    ) {\n        super(Commands.CATEGORY_GET);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: id or key\n     *\n     * when data.params[0] is number then findById, else findOneByKey\n     *\n     * @param data\n     * @returns {Promise<ItemCategory>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<ItemCategory> {\n        if (typeof data.params[0] === 'number') {\n            return await this.itemCategoryService.findOne(data.params[0]);\n        } else {\n            return await this.itemCategoryService.findOneByKey(data.params[0]);\n        }\n    }\n\n    public usage(): string {\n        return this.getName() + ' (<categoryId>|<categoryKey>) ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <categoryId>                  - Numeric - The ID belonging to the category we \\n'\n            + '                                     want to retrive. \\n'\n            + '    <categoryKey>                 - String - The key that identifies the category \\n'\n            + '                                     we want to retrieve. ';\n    }\n\n    public description(): string {\n        return 'Command for getting an item category associated with category Id or key';\n    }\n\n    public example(): string {\n        return 'category ' + this.getName() + ' 6 ';\n    }\n}\n"]}