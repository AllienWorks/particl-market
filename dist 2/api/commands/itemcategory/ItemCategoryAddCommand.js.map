{"version":3,"file":"ItemCategoryAddCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/itemcategory/ItemCategoryAddCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAC1C,yDAA+D;AAC/D,kDAA0D;AAC1D,4EAAyE;AACzE,0DAAuD;AAIvD,wDAA8C;AAC9C,gDAA6C;AAC7C,wEAAqE;AAErE,IAAa,sBAAsB,GAAnC,4BAAoC,SAAQ,yBAAW;IAInD,YACmD,MAAyB,EACG,mBAAwC;QAEnH,KAAK,CAAC,0BAAQ,CAAC,YAAY,CAAC,CAAC;QAHkB,WAAM,GAAN,MAAM,CAAmB;QACG,wBAAmB,GAAnB,mBAAmB,CAAqB;QAGnH,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;;;;OAUG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjB,MAAM,kBAAkB,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC1C,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;gBACnG,MAAM,CAAC,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC;oBACzC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACpB,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC3B,uBAAuB,EAAE,oBAAoB;iBACnB,CAAC,CAAC;YACpC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,IAAI,mCAAgB,CAAC,6CAA6C,CAAC,CAAC;YAC9E,CAAC;QACL,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,iFAAiF,CAAC;IAC9G,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,qFAAqF;cACrF,kFAAkF;cAClF,iDAAiD;cACjD,uFAAuF;cACvF,mEAAmE;cACnE,mFAAmF;cACnF,iFAAiF,CAAC;IAC5F,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,sCAAsC,CAAC;IAClD,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,uEAAuE,CAAC;IAClH,CAAC;CACJ,CAAA;AApCG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;qDAY1D;AApCQ,sBAAsB;IAK1B,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAA;qDAA8B,yCAAmB;GAN9G,sBAAsB,CA4DlC;AA5DY,wDAAsB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ItemCategoryService } from '../../services/ItemCategoryService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ItemCategoryCreateRequest } from '../../requests/ItemCategoryCreateRequest';\nimport { ItemCategory } from '../../models/ItemCategory';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { MessageException } from '../../exceptions/MessageException';\n\nexport class ItemCategoryAddCommand extends BaseCommand implements RpcCommandInterface<ItemCategory> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ItemCategoryService) private itemCategoryService: ItemCategoryService\n    ) {\n        super(Commands.CATEGORY_ADD);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * creates a new user defined category, these don't have a key and they always need to have a parent_item_category_id\n     *\n     * data.params[]:\n     *  [0]: category name\n     *  [1]: description\n     *  [2]: parent_item_category_id id/key\n     *\n     * @param data\n     * @returns {Promise<ItemCategory>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<ItemCategory> {\n        if (data.params[2]) {\n            const parentItemCategory = data.params[2];\n            const parentItemCategoryId = await this.itemCategoryService.getCategoryIdByKey(parentItemCategory);\n            return await this.itemCategoryService.create({\n                name: data.params[0],\n                description: data.params[1],\n                parent_item_category_id: parentItemCategoryId\n            } as ItemCategoryCreateRequest);\n        } else {\n            throw new MessageException(`Parent category can't be null or undefined!`);\n        }\n    }\n\n    public usage(): string {\n        return this.getName() + ' <categoryName> <description> (<parentItemCategoryId>|<parentItemCategoryKey>) ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <categoryName>                - String - The name of the category to create. \\n'\n            + '    <description>                 - String - A description of the category to \\n'\n            + '                                     create. \\n'\n            + '    <parentItemCategoryId>        - Numeric - The ID of the parent category of the \\n'\n            + '                                     category we\\'re creating. \\n'\n            + '    <parentItemCategoryKey>       - String - The identifying key of the parent \\n'\n            + '                                     category of the category we\\'re creating. ';\n    }\n\n    public description(): string {\n        return 'Command for adding an item category.';\n    }\n\n    public example(): string {\n        return 'category ' + this.getName() + ' newCategory \\'description of the new category\\' cat_wholesale_other ';\n    }\n}\n"]}