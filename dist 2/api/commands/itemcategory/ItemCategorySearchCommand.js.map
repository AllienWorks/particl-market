{"version":3,"file":"ItemCategorySearchCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/itemcategory/ItemCategorySearchCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,4EAAyE;AACzE,0DAAuD;AAGvD,wDAA6C;AAC7C,gDAA6C;AAC7C,wEAAqE;AAErE,IAAa,yBAAyB,GAAtC,+BAAuC,SAAQ,yBAAW;IAItD,YACmD,MAAyB,EACG,mBAAwC;QAEnH,KAAK,CAAC,0BAAQ,CAAC,eAAe,CAAC,CAAC;QAHe,WAAM,GAAN,MAAM,CAAmB;QACG,wBAAmB,GAAnB,mBAAmB,CAAqB;QAGnH,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IAEU,OAAO,CAAuB,IAAgB;;YAEvD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClB,MAAM,IAAI,mCAAgB,CAAC,8BAA8B,CAAC,CAAC;YAC/D,CAAC;YAED,MAAM,CAAC,MAAM,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACrE,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,6EAA6E;cAC7E,2DAA2D,CAAC;IACtE,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,2EAA2E,CAAC;IACvF,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC;IACrD,CAAC;CACJ,CAAA;AA1BG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;wDAO1D;AA3BQ,yBAAyB;IAK7B,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAA;qDAA8B,yCAAmB;GAN9G,yBAAyB,CA8CrC;AA9CY,8DAAyB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ItemCategoryService } from '../../services/ItemCategoryService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ItemCategory } from '../../models/ItemCategory';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { MessageException } from '../../exceptions/MessageException';\n\nexport class ItemCategorySearchCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<ItemCategory>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ItemCategoryService) private itemCategoryService: ItemCategoryService\n    ) {\n        super(Commands.CATEGORY_SEARCH);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: searchString, string, can't be null\n     *\n     * @param data\n     * @returns {Promise<ItemCategory>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Bookshelf.Collection<ItemCategory>> {\n\n        if (!data.params[0]) {\n            throw new MessageException('SearchString can not be null');\n        }\n\n        return await this.itemCategoryService.findByName(data.params[0]);\n    }\n\n    public usage(): string {\n        return this.getName() + ' <searchString> ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <searchString>                - String - A search string for finding \\n'\n            + '                                     categories by name. ';\n    }\n\n    public description(): string {\n        return 'Command for getting an item categories search by particular search string';\n    }\n\n    public example(): string {\n        return 'category ' + this.getName() + ' luxury ';\n    }\n}\n"]}