{"version":3,"file":"ProfileAddCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/profile/ProfileAddCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,kEAA+D;AAC/D,0DAAuD;AAIvD,wDAA6C;AAC7C,gDAA6C;AAC7C,wEAAqE;AAErE,IAAa,iBAAiB,GAA9B,uBAA+B,SAAQ,yBAAW;IAI9C,YACmD,MAAyB,EACF,cAA8B;QAEpG,KAAK,CAAC,0BAAQ,CAAC,WAAW,CAAC,CAAC;QAHmB,WAAM,GAAN,MAAM,CAAmB;QACF,mBAAc,GAAd,cAAc,CAAgB;QAGpG,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;OAOG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,MAAM,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;gBACpC,IAAI,EAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACrB,OAAO,EAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;aACb,CAAC,CAAC;QAC/B,CAAC;KAAA;IAEY,QAAQ,CAAC,IAAgB;;YAElC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACzB,MAAM,IAAI,mCAAgB,CAAC,eAAe,CAAC,CAAC;YAChD,CAAC;YAED,oDAAoD;YACpD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBACjE,IAAI,CAAC,CAAM,KAAK;gBACb,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC,CAAA,CAAC;iBACD,KAAK,CAAC,CAAM,MAAM;gBACf,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC,CAAA,CAAC,CAAC;YAEP,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACT,oBAAoB;gBACpB,MAAM,IAAI,mCAAgB,CAAC,8CAA8C,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC/F,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,oCAAoC,CAAC;IACjE,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,8EAA8E;cAC9E,mFAAmF;cACnF,oFAAoF;cACpF,sFAAsF;cACtF,8CAA8C,CAAC;IACzD,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,uBAAuB,CAAC;IACnC,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,gDAAgD,CAAC;IAC1F,CAAC;CACJ,CAAA;AAlDG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;gDAK1D;AA1BQ,iBAAiB;IAKrB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;qDAAyB,+BAAc;GAN/F,iBAAiB,CAuE7B;AAvEY,8CAAiB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ProfileService } from '../../services/ProfileService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ProfileCreateRequest } from '../../requests/ProfileCreateRequest';\nimport { Profile } from '../../models/Profile';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { MessageException } from '../../exceptions/MessageException';\n\nexport class ProfileAddCommand extends BaseCommand implements RpcCommandInterface<Profile> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) private profileService: ProfileService\n    ) {\n        super(Commands.PROFILE_ADD);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: profile name\n     *  [1]: profile address, optional\n     *\n     * @param data\n     * @returns {Promise<Profile>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Profile> {\n        return await this.profileService.create({\n            name : data.params[0],\n            address : (data.params[1] || null)\n        } as ProfileCreateRequest);\n    }\n\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n\n        if (data.params.length < 1) {\n            throw new MessageException('Missing name.');\n        }\n\n        // check if profile already exist for the given name\n        const exists = await this.profileService.findOneByName(data.params[0])\n            .then(async value => {\n                return true;\n            })\n            .catch(async reason => {\n                return false;\n            });\n\n        if (exists) {\n            // if it does, throw\n            throw new MessageException(`Profile already exist for the given name = ${data.params[0]}`);\n        }\n\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' <profileName> [<profileAddress>] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <profileName>            - The name of the profile we want to create. \\n'\n            + '    <profileAddress>         - [optional] the particl address of this profile. \\n'\n            + '                                This is the address that\\'s used in the particl \\n'\n            + '                                messaging system. Will be automatically generated \\n'\n            + '                                if omitted. ';\n    }\n\n    public description(): string {\n        return 'Create a new profile.';\n    }\n\n    public example(): string {\n        return 'profile ' + this.getName() + ' myProfile PkE5U1Erz9bANXAxvHeiw6t14vDTP9EdNM ';\n    }\n}\n"]}