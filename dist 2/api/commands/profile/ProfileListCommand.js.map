{"version":3,"file":"ProfileListCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/profile/ProfileListCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,0DAAuD;AAIvD,kEAA+D;AAC/D,wDAA6C;AAC7C,gDAA6C;AAE7C;;GAEG;AACH,IAAa,kBAAkB,GAA/B,wBAAgC,SAAQ,yBAAW;IAI/C,YACmD,MAAyB,EACF,cAA8B;QAEpG,KAAK,CAAC,0BAAQ,CAAC,YAAY,CAAC,CAAC;QAHkB,WAAM,GAAN,MAAM,CAAmB;QACF,mBAAc,GAAd,cAAc,CAAgB;QAGpG,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;OAIG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,MAAM,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;QAC/C,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC;IAChC,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC;IAC9D,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,wBAAwB,CAAC;IACpC,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC;IAC7C,CAAC;CACJ,CAAA;AAnBG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;iDAE1D;AApBQ,kBAAkB;IAKtB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;qDAAyB,+BAAc;GAN/F,kBAAkB,CAqC9B;AArCY,gDAAkB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { Profile } from '../../models/Profile';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { ProfileService } from '../../services/ProfileService';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\n\n/*\n * Get a list of all profile\n */\nexport class ProfileListCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<Profile>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) private profileService: ProfileService\n    ) {\n        super(Commands.PROFILE_LIST);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     *\n     * @param data\n     * @returns {Promise<Bookshelf.Collection<Profile>>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Bookshelf.Collection<Profile>> {\n        return await this.profileService.findAll();\n    }\n\n    public usage(): string {\n        return this.getName() + ' ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n';\n    }\n\n    public description(): string {\n        return 'List all the profiles.';\n    }\n\n    public example(): string {\n        return 'profile ' + this.getName() + ' ';\n    }\n}\n"]}