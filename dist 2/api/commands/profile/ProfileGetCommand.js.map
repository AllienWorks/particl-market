{"version":3,"file":"ProfileGetCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/profile/ProfileGetCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,kEAA+D;AAC/D,0DAAuD;AAGvD,wDAA6C;AAC7C,gDAA6C;AAE7C,IAAa,iBAAiB,GAA9B,uBAA+B,SAAQ,yBAAW;IAI9C,YACmD,MAAyB,EACF,cAA8B;QAEpG,KAAK,CAAC,0BAAQ,CAAC,WAAW,CAAC,CAAC;QAHmB,WAAM,GAAN,MAAM,CAAmB;QACF,mBAAc,GAAd,cAAc,CAAgB;QAGpG,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;;OAQG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACrC,MAAM,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACnE,CAAC;QACL,CAAC;KAAA;IAEY,QAAQ,CAAC,IAAgB;;YAClC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;YAC/B,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,+BAA+B,CAAC;IAC5D,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,yFAAyF;cACzF,8CAA8C;cAC9C,0FAA0F;cAC1F,4CAA4C,CAAC;IACvD,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,2CAA2C,CAAC;IACvD,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,MAAM;cACrC,UAAU,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,kBAAkB,CAAC;IAC3D,CAAC;CACJ,CAAA;AAnCG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;gDAM1D;AA5BQ,iBAAiB;IAKrB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;qDAAyB,+BAAc;GAN/F,iBAAiB,CAyD7B;AAzDY,8CAAiB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ProfileService } from '../../services/ProfileService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { Profile } from '../../models/Profile';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\n\nexport class ProfileGetCommand extends BaseCommand implements RpcCommandInterface<Profile> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) private profileService: ProfileService\n    ) {\n        super(Commands.PROFILE_GET);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: id or name\n     *\n     * when data.params[0] is number then findById, else findByName\n     *\n     * @param data\n     * @returns {Promise<Profile>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Profile> {\n        if (typeof data.params[0] === 'number') {\n            return await this.profileService.findOne(data.params[0]);\n        } else {\n            return await this.profileService.findOneByName(data.params[0]);\n        }\n    }\n\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        if (data.params.length === 0) {\n            data.params[0] = 'DEFAULT';\n        }\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' [<profileId>|<profileName>] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <profileId>              - [optional] Numeric - The ID of the profile we want to \\n'\n            + '                                retrieve. \\n'\n            + '    <profileName>            - [optional] String - The name of the profile we want to \\n'\n            + '                                retrieve. ';\n    }\n\n    public description(): string {\n        return 'Get profile by profile id or profile name';\n    }\n\n    public example(): string {\n        return 'profile ' + this.getName() + ' 2\\n'\n            + 'profile ' + this.getName() + ' myProfileName\\n';\n    }\n}\n"]}