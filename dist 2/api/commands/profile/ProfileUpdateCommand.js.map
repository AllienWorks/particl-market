{"version":3,"file":"ProfileUpdateCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/profile/ProfileUpdateCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,kEAA+D;AAC/D,0DAAuD;AAGvD,wDAA6C;AAC7C,gDAA6C;AAE7C,IAAa,oBAAoB,GAAjC,0BAAkC,SAAQ,yBAAW;IAIjD,YACmD,MAAyB,EACF,cAA8B;QAEpG,KAAK,CAAC,0BAAQ,CAAC,cAAc,CAAC,CAAC;QAHgB,WAAM,GAAN,MAAM,CAAmB;QACF,mBAAc,GAAd,cAAc,CAAgB;QAGpG,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;OAOG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;gBAC9C,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;aACvB,CAAC,CAAC;QACP,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,gCAAgC,CAAC;IAC7D,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,sFAAsF;cACtF,wFAAwF,CAAC;IACnG,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,qDAAqD,CAAC;IACjE,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,kBAAkB,CAAC;IAC5D,CAAC;CACJ,CAAA;AAvBG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;mDAI1D;AAzBQ,oBAAoB;IAKxB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;qDAAyB,+BAAc;GAN/F,oBAAoB,CA4ChC;AA5CY,oDAAoB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ProfileService } from '../../services/ProfileService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { Profile } from '../../models/Profile';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\n\nexport class ProfileUpdateCommand extends BaseCommand implements RpcCommandInterface<Profile> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) private profileService: ProfileService\n    ) {\n        super(Commands.PROFILE_UPDATE);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: profile id to be updated\n     *  [1]: new profile name\n     *\n     * @param data\n     * @returns {Promise<Profile>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Profile> {\n        return this.profileService.update(data.params[0], {\n            name: data.params[1]\n        });\n    }\n\n    public usage(): string {\n        return this.getName() + ' <profileId> <newProfileName> ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <profileId>              - Numeric - The ID of the profile we want to modify. \\n'\n            + '    <newProfileName>         - String - The new name we want to apply to the profile. ';\n    }\n\n    public description(): string {\n        return 'Update the details of a profile given by profileId.';\n    }\n\n    public example(): string {\n        return 'profile ' + this.getName() + ' 2 myNewProfile ';\n    }\n}\n"]}