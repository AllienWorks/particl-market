{"version":3,"file":"HelpCommand.js","sourceRoot":"","sources":["../../../src/api/commands/HelpCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../core/api/Validate';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { RpcRequest } from '../requests/RpcRequest';\nimport { RpcCommandInterface } from './RpcCommandInterface';\nimport { Commands} from './CommandEnumType';\nimport { RpcCommandFactory } from '../factories/RpcCommandFactory';\nimport { BaseCommand } from './BaseCommand';\nimport { Command } from './Command';\nimport { NotFoundException } from '../exceptions/NotFoundException';\n\nexport class HelpCommand extends BaseCommand implements RpcCommandInterface<string> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        super(Commands.HELP_ROOT);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     *\n     * @param data\n     * @param rpcCommandFactory\n     * @returns {Promise<string>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: any, rpcCommandFactory: RpcCommandFactory): Promise<string> {\n        let helpStr = this.generateHelp(data.params, rpcCommandFactory);\n        helpStr = helpStr.trim(); // Remove trailing \\n\n        return helpStr;\n    }\n\n    public generateHelp( commands: string[], rpcCommandFactory: RpcCommandFactory ): string {\n        if ( commands.length <= 0 ) {\n            let helpStr = '';\n            for ( const rootCommand of Commands.rootCommands ) {\n                if ( rootCommand ) {\n                    let command;\n                    try {\n                        command = rpcCommandFactory.get(rootCommand);\n                        helpStr += command.usage() + '\\n';\n                    } catch ( ex ) {\n                        this.log.warn(`help(): Couldn't find ${rootCommand}.`);\n                        continue;\n                    }\n                }\n            }\n            return helpStr;\n        } else {\n            const commandName = commands.shift();\n            try {\n                for ( const rootCommand of Commands.rootCommands ) {\n                    if ( rootCommand.commandName === commandName) {\n                        return this._generateHelp(commands, rpcCommandFactory, rootCommand);\n                    }\n                }\n            } catch ( ex ) {\n                throw new NotFoundException(`Command <${commandName}> not found.`);\n            }\n        }\n        throw new NotFoundException(`Command not found.`);\n    }\n\n    public help(): string {\n        return this.usage() + '\\n'\n            + '    <command>                - [optional] String - Command that we want to view help for. \\n'\n            + '    <subCommand>             - [optional] String - Subcommand that we want to view help for. ';\n    }\n\n    public _generateHelp( commands: string[], rpcCommandFactory: RpcCommandFactory, command: any ): string {\n        if ( commands.length === 0 ) {\n            let retStr = '';\n            if ( command.childCommands.length > 0 ) {\n                // Get the help for every sub command and return it.\n                for ( const childCommand of command.childCommands ) {\n                    let commandCommand;\n                    try {\n                        commandCommand = rpcCommandFactory.get(childCommand);\n                        retStr += commandCommand.help() + '\\n\\n';\n                    } catch ( ex ) {\n                        this.log.warn(`Command <${command} ${childCommand}> not found.`);\n                        continue;\n                    }\n                }\n                return retStr;\n            } else {\n                // Just get the help for this command and return it.\n                let commandCommand;\n                try {\n                    commandCommand = rpcCommandFactory.get(command);\n                } catch ( ex ) {\n                    this.log.warn(`Command <${command}> not found.`);\n                    throw new NotFoundException(`Command <${command}> not found.`);\n                }\n                const example = commandCommand.example();\n                return commandCommand.help() + '\\n' + (example ? 'example:\\n' + example : '') + '\\n';\n            }\n        }\n\n        // Keep recursing down.\n        const commandName = commands.shift();\n        for ( const childCommand of command.childCommands ) {\n            if ( childCommand.commandName === commandName ) {\n                return this._generateHelp(commands, rpcCommandFactory, childCommand);\n            }\n        }\n        this.log.warn(`Command <${command}> not found.`);\n        throw new NotFoundException(`Command <${command}> not found.`);\n    }\n\n    public usage(): string {\n        return this.getName() + ' [<command> [<subCommand> [...]]]  -  ' + this.description();\n    }\n\n    public description(): string {\n        return 'Shows help for a command.';\n    }\n\n    public example(): string {\n        return this.getName() + ' help listingitem';\n    }\n}\n"]}