{"version":3,"file":"BidCancelCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/bid/BidCancelCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport * as resources from 'resources';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { ListingItemService } from '../../services/ListingItemService';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { BidActionService } from '../../services/BidActionService';\nimport { SmsgSendResponse } from '../../responses/SmsgSendResponse';\nimport { BidService } from '../../services/BidService';\n\nexport class BidCancelCommand extends BaseCommand implements RpcCommandInterface<SmsgSendResponse> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) private listingItemService: ListingItemService,\n        @inject(Types.Service) @named(Targets.Service.BidService) private bidService: BidService,\n        @inject(Types.Service) @named(Targets.Service.BidActionService) private bidActionService: BidActionService\n    ) {\n        super(Commands.BID_CANCEL);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     * [0]: bidId\n     *\n     * @param data\n     * @returns {Promise<Bookshelf<Bid>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<SmsgSendResponse> {\n        const bidId = data.params[0];\n        const bid: resources.Bid = await this.bidService.findOne(bidId)\n            .then(value => {\n                return value.toJSON();\n            });\n\n        return this.bidActionService.cancel(bid);\n    }\n\n    /**\n     * data.params[]:\n     * [0]: bidId\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<RpcRequest>}\n     */\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n\n        if (data.params.length < 1) {\n            throw new MessageException('Missing bidId.');\n        }\n\n        if (typeof data.params[0] !== 'number') {\n            throw new MessageException('bidId should be a number.');\n        }\n\n        const bidId = data.params[0];\n        const bid: resources.Bid = await this.bidService.findOne(bidId)\n            .then(value => {\n                return value.toJSON();\n            });\n\n        // make sure ListingItem exists\n        if (_.isEmpty(bid.ListingItem)) {\n            this.log.error('ListingItem not found.');\n            throw new MessageException('ListingItem not found.');\n        }\n\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' <itemhash> <bidId>';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + '\\n'\n            + '    <itemhash>               - String - The hash of the item whose bid we want to cancel. '\n            + '    <bidId>                  - Numeric - The ID of the bid we want to cancel. ';\n    }\n\n    public description(): string {\n        return 'Cancel bid.';\n    }\n\n    public example(): string {\n        return 'bid ' + this.getName() + ' b90cee25-036b-4dca-8b17-0187ff325dbb ';\n    }\n}\n"]}