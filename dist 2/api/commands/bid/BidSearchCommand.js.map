{"version":3,"file":"BidSearchCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/bid/BidSearchCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport * as _ from 'lodash';\nimport { BidService } from '../../services/BidService';\nimport { ListingItemService } from '../../services/ListingItemService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { Bid } from '../../models/Bid';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { BidSearchParams } from '../../requests/BidSearchParams';\nimport { SearchOrder } from '../../enums/SearchOrder';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { BidMessageType } from '../../enums/BidMessageType';\nimport { OrderStatus} from '../../enums/OrderStatus';\n\nexport class BidSearchCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<Bid>> {\n\n    public log: LoggerType;\n    private DEFAULT_PAGE_LIMIT = 10;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.BidService) private bidService: BidService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) private listingItemService: ListingItemService\n    ) {\n        super(Commands.BID_SEARCH);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     *\n     * data.params[]:\n     *  [0]: page, number, optional\n     *  [1]: pageLimit, number, default=10, optional\n     *  [2]: ordering ASC/DESC, orders by createdAt, optional\n     *  [3]: ListingItem hash, string, * for all, optional\n     *  [4]: status/action, ENUM{MPA_BID, MPA_ACCEPT, MPA_REJECT, MPA_CANCEL}\n     *       or ENUM{AWAITING_ESCROW, ESCROW_LOCKED, SHIPPING, COMPLETE}, * for all, optional\n     *  [5]: searchString, string, * for anything, optional\n     *  [6...]: bidder: particl address, optional\n     *\n     * @param data\n     * @returns {Promise<Bookshelf.Collection<Bid>>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Bookshelf.Collection<Bid>> {\n\n        const page = data.params[0];\n        const pageLimit = data.params[1];\n        const ordering = data.params[2];\n        const listingItemHash = data.params[3];\n        const status = data.params[4];\n        const searchString = data.params[5];\n\n        // TODO: ordering is by createdAt, but perhaps updatedAt would be better\n        // TODO: also maybe we should add support for bid expiry at some point\n\n        if (data.params[6]) {\n            // shift so that data.params contains only the bidders\n            data.params.shift();\n            data.params.shift();\n            data.params.shift();\n            data.params.shift();\n            data.params.shift();\n            data.params.shift();\n        } else {\n            // no bidders\n            data.params = [];\n        }\n\n        const bidSearchParams = {\n            page,\n            pageLimit,\n            ordering,\n            listingItemHash,\n            status,\n            searchString,\n            bidders: data.params\n        } as BidSearchParams;\n\n        this.log.debug('bidSearchParams', bidSearchParams);\n\n        return await this.bidService.search(bidSearchParams);\n    }\n\n    /**\n     *\n     * data.params[]:\n     *  [0]: page, number, optional\n     *  [1]: pageLimit, number, default=10, optional\n     *  [2]: ordering ASC/DESC, orders by createdAt, optional\n     *  [3]: ListingItem hash, string, * for all, optional\n     *  [4]: status/action, ENUM{MPA_BID, MPA_ACCEPT, MPA_REJECT, MPA_CANCEL}\n     *       or ENUM{AWAITING_ESCROW, ESCROW_LOCKED, SHIPPING, COMPLETE}, * for all, optional\n     *  [5]: searchString, string, * for anything, optional\n     *  [6...]: bidder: particl address, optional\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<RpcRequest>}\n     */\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n\n        data.params[0] = data.params[0] ? data.params[0] : 0;\n        if (typeof data.params[0] !== 'number') {\n            throw new MessageException('parameter page should be a number.');\n        }\n\n        data.params[1] = data.params[1] ? data.params[1] : this.DEFAULT_PAGE_LIMIT;\n        if (typeof data.params[0] !== 'number') {\n            throw new MessageException('parameter pageLimit should be a number.');\n        }\n\n        if (data.params[2] === 'ASC') {\n            data.params[2] = SearchOrder.ASC;\n        } else {\n            data.params[2] = SearchOrder.DESC;\n        }\n\n        data.params[3] = data.params[3] !== '*' ? data.params[3] : undefined;\n        data.params[4] = data.params[4] ? this.getStatus(data.params[4]) : undefined;\n        data.params[5] = data.params[5] ? (data.params[5] !== '*' ? data.params[5] : undefined) : undefined;\n\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName()\n            + ' [<page> [<pageLimit> [<ordering> [<itemhash> [<status> [<searchString> [<bidderAddress> ...]]] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + '\\n'\n            + '    <page>                   - [optional] Numeric - The number page we want to \\n'\n            + '                                view of search listing item results. \\n'\n            + '    <pageLimit>              - [optional] Numeric - The number of results per page. \\n'\n            + '    <ordering>               - [optional] ENUM{ASC,DESC} - The ordering of the search results. \\n'\n            + '    <itemhash>               - String - The hash of the item we want to search bids for. \\n'\n            + '                                The value * specifies that status can be anything. \\n'\n            + '    <status>                 - [optional] ENUM{MPA_BID, MPA_ACCEPT, MPA_REJECT, MPA_CANCEL} - \\n'\n            + '                             - or ENUM{AWAITING_ESCROW, ESCROW_LOCKED, SHIPPING, COMPLETE} - \\n'\n            + '                                The status of the bids or status of the orderItem we want to search for. \\n'\n            + '                                The value * specifies that status can be anything. \\n'\n            + '    <searchString>           - [optional] String - A string that is used to \\n'\n            + '                                find bids related to listing items by their titles and descriptions. \\n'\n            + '                                The value * specifies that status can be anything. \\n'\n            + '    <bidderAddress>          - [optional] String(s) - The addresses of the bidders we want to search bids for. ';\n\n    }\n\n    public description(): string {\n            return 'Search Bids by item hash, bid status, or bidder address';\n    }\n\n    public example(): string {\n        return 'bid ' + this.getName() + ' a22c63bc16652bc417068754688e50f60dbf2ce6d599b4ccf800d63b504e0a88'\n            + ' MPA_ACCEPT pmZpGbH2j2dDYU6LvTryHbEsM3iQzxpnj1 pmZpGbH2j2dDYU6LvTryHbEsM3iQzxpnj2';\n    }\n\n    private getStatus(status: string): BidMessageType | OrderStatus | undefined {\n        switch (status) {\n            case 'MPA_BID':\n                return BidMessageType.MPA_BID;\n            case 'MPA_ACCEPT':\n                return BidMessageType.MPA_ACCEPT;\n            case 'MPA_REJECT':\n                return BidMessageType.MPA_REJECT;\n            case 'MPA_CANCEL':\n                return BidMessageType.MPA_CANCEL;\n            case 'AWAITING_ESCROW':\n                return OrderStatus.AWAITING_ESCROW;\n            case 'ESCROW_LOCKED':\n                return OrderStatus.ESCROW_LOCKED;\n            case 'SHIPPING':\n                return OrderStatus.SHIPPING;\n            case 'COMPLETE':\n                return OrderStatus.COMPLETE;\n            case '*':\n                return undefined;\n            default:\n                throw new MessageException('Invalid status.');\n        }\n    }\n}\n"]}