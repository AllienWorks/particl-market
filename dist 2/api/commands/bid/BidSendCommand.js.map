{"version":3,"file":"BidSendCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/bid/BidSendCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ListingItemService } from '../../services/ListingItemService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { AddressCreateRequest } from '../../requests/AddressCreateRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { SmsgSendResponse } from '../../responses/SmsgSendResponse';\nimport { AddressType } from '../../enums/AddressType';\nimport { BidActionService, IdValuePair } from '../../services/BidActionService';\nimport { AddressService } from '../../services/AddressService';\nimport { ProfileService } from '../../services/ProfileService';\nimport { NotFoundException } from '../../exceptions/NotFoundException';\nimport * as resources from 'resources';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { BidDataValue } from '../../enums/BidDataValue';\n\nexport class BidSendCommand extends BaseCommand implements RpcCommandInterface<SmsgSendResponse> {\n\n    public log: LoggerType;\n\n    private REQUIRED_ADDRESS_KEYS: string[] = [\n        BidDataValue.SHIPPING_ADDRESS_FIRST_NAME.toString(),\n        BidDataValue.SHIPPING_ADDRESS_LAST_NAME.toString(),\n        BidDataValue.SHIPPING_ADDRESS_ADDRESS_LINE1.toString(),\n        BidDataValue.SHIPPING_ADDRESS_CITY.toString(),\n        BidDataValue.SHIPPING_ADDRESS_STATE.toString(),\n        BidDataValue.SHIPPING_ADDRESS_ZIP_CODE.toString(),\n        BidDataValue.SHIPPING_ADDRESS_COUNTRY.toString()\n    ];\n\n    private PARAMS_ADDRESS_KEYS: string[] = [\n        BidDataValue.SHIPPING_ADDRESS_FIRST_NAME.toString(),\n        BidDataValue.SHIPPING_ADDRESS_LAST_NAME.toString(),\n        BidDataValue.SHIPPING_ADDRESS_ADDRESS_LINE1.toString(),\n        BidDataValue.SHIPPING_ADDRESS_ADDRESS_LINE2.toString(),\n        BidDataValue.SHIPPING_ADDRESS_CITY.toString(),\n        BidDataValue.SHIPPING_ADDRESS_STATE.toString(),\n        BidDataValue.SHIPPING_ADDRESS_ZIP_CODE.toString(),\n        BidDataValue.SHIPPING_ADDRESS_COUNTRY.toString()\n    ];\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) private listingItemService: ListingItemService,\n        @inject(Types.Service) @named(Targets.Service.AddressService) private addressService: AddressService,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) private profileService: ProfileService,\n        @inject(Types.Service) @named(Targets.Service.BidActionService) private bidActionService: BidActionService\n    ) {\n        super(Commands.BID_SEND);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * Posts a Bid to the network\n     *\n     * data.params[]:\n     * [0]: itemhash, string\n     * [1]: profileId, number\n     * [2]: addressId (from profile shipping addresses), number|false\n     *                         if false, the address must be passed as bidData id/value pairs\n     *                         in following format:\n     *                         'ship.firstName',\n     *                         'ship.lastName',\n     *                         'ship.addressLine1',\n     *                         'ship.addressLine2', (not required)\n     *                         'ship.city',\n     *                         'ship.state',\n     *                         'ship.country'\n     *                         'ship.zipCode',\n     * [3]: bidDataId, string\n     * [4]: bidDataValue, string\n     * [5]: bidDataId, string\n     * [6]: bidDataValue, string\n     * ......\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<SmsgSendResponse>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<SmsgSendResponse> {\n\n        // todo: make sure listingitem exists in validate()\n        // todo: make sure profile exists in validate()\n\n        // listingitem we are bidding for\n        const listingItemHash = data.params.shift();\n        const listingItem: resources.ListingItem = await this.listingItemService.findOneByHash(listingItemHash)\n            .then(value => {\n                return value.toJSON();\n            })\n            .catch(reason => {\n                throw new MessageException('ListingItem not found.');\n            });\n\n        // profile that is doing the bidding\n        const profileId = data.params.shift();\n        const profile: resources.Profile = await this.profileService.findOne(profileId)\n            .then(value => {\n                return value.toJSON();\n            })\n            .catch(reason => {\n                throw new MessageException('Profile not found.');\n            });\n\n        const addressId = data.params.shift();\n        const additionalParams: IdValuePair[] = [];\n\n        if (typeof addressId === 'number') {\n            const address = _.find(profile.ShippingAddresses, (addr: any) => {\n                return addr.id === addressId;\n            });\n            // if address was found\n            if (address) {\n                // store the shipping address in additionalParams\n                additionalParams.push({id: BidDataValue.SHIPPING_ADDRESS_FIRST_NAME, value: address.firstName ? address.firstName : ''});\n                additionalParams.push({id: BidDataValue.SHIPPING_ADDRESS_LAST_NAME, value: address.lastName ? address.lastName : ''});\n                additionalParams.push({id: BidDataValue.SHIPPING_ADDRESS_ADDRESS_LINE1, value: address.addressLine1});\n                additionalParams.push({id: BidDataValue.SHIPPING_ADDRESS_ADDRESS_LINE2, value: address.addressLine2 ? address.addressLine2 : ''});\n                additionalParams.push({id: BidDataValue.SHIPPING_ADDRESS_CITY, value: address.city});\n                additionalParams.push({id: BidDataValue.SHIPPING_ADDRESS_STATE, value: address.state});\n                additionalParams.push({id: BidDataValue.SHIPPING_ADDRESS_ZIP_CODE, value: address.zipCode});\n                additionalParams.push({id: BidDataValue.SHIPPING_ADDRESS_COUNTRY, value: address.country});\n            } else {\n                this.log.warn(`address with the id=${addressId} was not found!`);\n                throw new NotFoundException(addressId);\n            }\n        } else {\n            // add all first entries of PARAMS_ADDRESS_KEYS and their values if values not PARAMS_ADDRESS_KEYS themselves\n            for (const paramsAddressKey of this.PARAMS_ADDRESS_KEYS) {\n                for (let j = 0; j < data.params.length - 1; ++j) {\n                    if (paramsAddressKey === data.params[j]) {\n                        additionalParams.push({id:  paramsAddressKey, value:\n                        !_.includes(this.PARAMS_ADDRESS_KEYS, data.params[j + 1]) ? data.params[j + 1] : ''});\n                        break;\n                    }\n                }\n            }\n        }\n\n        return this.bidActionService.send(listingItem, profile, additionalParams);\n    }\n\n    /**\n     * data.params[]:\n     * [0]: itemhash, string\n     * [1]: profileId, number\n     * [2]: addressId (from profile shipping addresses), number|false\n     *                         if false, the address must be passed as bidData id/value pairs\n     *                         in following format:\n     *                         'ship.firstName',\n     *                         'ship.lastName',\n     *                         'ship.addressLine1',\n     *                         'ship.addressLine2', (not required)\n     *                         'ship.city',\n     *                         'ship.state',\n     *                         'ship.country'\n     *                         'ship.zipCode',\n     * [3]: bidDataId, string\n     * [4]: bidDataValue, string\n     * [5]: bidDataId, string\n     * [6]: bidDataValue, string\n     * ......\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<RpcRequest>}\n     */\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n\n        // TODO: move the validation here, add separate error messages for missing parameters\n\n        if (data.params.length < 3) {\n            throw new MessageException('Missing parameters.');\n        }\n\n        if (typeof data.params[0] !== 'string') {\n            throw new MessageException('Invalid hash.');\n        }\n\n        if (typeof data.params[1] !== 'number') {\n            throw new MessageException('Invalid profileId.');\n        }\n\n        if (typeof data.params[2] === 'boolean' && data.params[2] === false) {\n            // make sure that required keys are there\n            for (const addressKey of this.REQUIRED_ADDRESS_KEYS) {\n                if (!_.includes(data.params, addressKey.toString()) ) {\n                    throw new MessageException('Missing required param: ' + addressKey);\n                }\n            }\n        } else if (typeof data.params[2] !== 'number') {\n            throw new MessageException('Invalid addressId.');\n        }\n\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' <itemhash> <profileId> <addressId | false> [(<bidDataKey>, <bidDataValue>), ...] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + '\\n'\n            + '    <itemhash>               - String - The hash of the item we want to send bids for. \\n'\n            + '    <profileId>              - Numeric - The id of the profile we want to associate with the bid. \\n'\n            + '    <addressId>              - Numeric - The id of the address we want to associated with the bid. \\n'\n            + '    <bidDataKey>             - [optional] String - The key for additional data for the bid we want to send. \\n'\n            + '    <bidDataValue>           - [optional] String - The value for additional data for the bid we want to send. ';\n    }\n\n    public description(): string {\n        return 'Send bid.';\n    }\n\n    public example(): string {\n        return 'bid ' + this.getName() + ' 6e8c05ef939b1e30267a9912ecfe7560d758739c126f61926b956c087a1fedfe 1 1 ';\n        // return 'bid ' + this.getName() + ' b90cee25-036b-4dca-8b17-0187ff325dbb 1 ';\n    }\n\n}\n"]}