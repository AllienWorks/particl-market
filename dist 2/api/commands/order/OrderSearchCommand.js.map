{"version":3,"file":"OrderSearchCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/order/OrderSearchCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,8DAA2D;AAC3D,0DAAuD;AAEvD,wDAA8C;AAC9C,gDAA6C;AAE7C,yDAAsD;AAGtD,IAAa,kBAAkB,GAA/B,wBAAgC,SAAQ,yBAAW;IAI/C,YACmD,MAAyB,EACJ,YAA0B;QAE9F,KAAK,CAAC,0BAAQ,CAAC,YAAY,CAAC,CAAC;QAHkB,WAAM,GAAN,MAAM,CAAmB;QACJ,iBAAY,GAAZ,YAAY,CAAc;QAG9F,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;;;;OAUG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;YAC5E,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;YACnE,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;YACzE,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;YAC1E,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAE9B,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACZ,QAAQ,GAAG,yBAAW,CAAC,GAAG,CAAC;YAC/B,CAAC;YAED,MAAM,UAAU,GAAG;gBACf,eAAe;gBACf,MAAM;gBACN,YAAY;gBACZ,aAAa;gBACb,QAAQ;aACU,CAAC;YAEvB,MAAM,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACtD,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,0FAA0F,CAAC;IACvH,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,IAAI;cAClD,+FAA+F;cAC/F,6FAA6F;cAC7F,sGAAsG;cACtG,mFAAmF;cACnF,gGAAgG;cAChG,qHAAqH;cACrH,iGAAiG;cACjG,sHAAsH;cACtH,kGAAkG;cAClG,iGAAiG,CAAC;IAC5G,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,8DAA8D,CAAC;IAC1E,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;CACJ,CAAA;AA/CG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;iDAoB1D;AA5CQ,kBAAkB;IAKtB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAA;qDAAuB,2BAAY;GANzF,kBAAkB,CAuE9B;AAvEY,gDAAkB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { OrderService } from '../../services/OrderService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { Order } from '../../models/Order';\nimport { SearchOrder } from '../../enums/SearchOrder';\nimport { OrderSearchParams } from '../../requests/OrderSearchParams';\n\nexport class OrderSearchCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<Order>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.OrderService) private orderService: OrderService\n    ) {\n        super(Commands.ORDER_SEARCH);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     * [0]: itemhash, optional\n     * [1]: status, optional\n     * [2]: buyerAddress, optional\n     * [3]: sellerAddress, optional\n     * [4]: ordering, optional\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<Bookshelf.Collection<Order>>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Bookshelf.Collection<Order>> {\n        const listingItemHash = data.params[0] !== '*' ? data.params[0] : undefined;\n        const status = data.params[1] !== '*' ? data.params[1] : undefined;\n        const buyerAddress = data.params[2] !== '*' ? data.params[2] : undefined;\n        const sellerAddress = data.params[3] !== '*' ? data.params[3] : undefined;\n        let ordering = data.params[4];\n\n        if (!ordering) {\n            ordering = SearchOrder.ASC;\n        }\n\n        const searchArgs = {\n            listingItemHash,\n            status,\n            buyerAddress,\n            sellerAddress,\n            ordering\n        } as OrderSearchParams;\n\n        return await this.orderService.search(searchArgs);\n    }\n\n    public usage(): string {\n        return this.getName() + ' [(<itemhash>|*) [(<status>|*) [(<buyerAddress>|*) [(<sellerAddress>|*) [<ordering>]]]]]';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + '\\n'\n            + '    <itemhash>               - String - The hash of the item we want to search orders for. \\n'\n            + '                                A value of * specifies that any item hash is acceptable. \\n'\n            + '    <status>                 - [optional] ENUM{AWAITING_ESCROW,ESCROW_LOCKED,SHIPPING,COMPLETE} - \\n'\n            + '                                The status of the orders we want to search for \\n'\n            + '                                A value of * specifies that any order status is acceptable. \\n'\n            + '    <buyerAddress>           - [optional] String - The address of the buyer in the orders we want to search for. \\n'\n            + '                                A value of * specifies that any buyer address is acceptable. \\n'\n            + '    <sellerAddress>          - [optional] String - The address of the seller in the orders we want to search for. \\n'\n            + '                                A value of * specifies that any seller address is acceptable. \\n'\n            + '    <ordering>               - [optional] ENUM{ASC,DESC} - The ordering of the search results. ';\n    }\n\n    public description(): string {\n        return 'Search for orders by item hash, order status, or addresses. ';\n    }\n\n    public example(): string {\n        return 'TODO';\n    }\n}\n"]}