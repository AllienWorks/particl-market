{"version":3,"file":"CurrencyPriceRootCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/currencyprice/CurrencyPriceRootCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAC1C,0DAAuD;AAEvD,yDAA+D;AAE/D,kDAA0D;AAC1D,gDAA6C;AAC7C,yEAAsE;AACtE,wDAA8C;AAC9C,8EAA2E;AAC3E,wEAAqE;AAIrE,IAAa,wBAAwB,GAArC,8BAAsC,SAAQ,yBAAW;IAIrD,YACgF,oBAA0C,EACvE,MAAyB;QAExE,KAAK,CAAC,0BAAQ,CAAC,kBAAkB,CAAC,CAAC;QAHyC,yBAAoB,GAApB,oBAAoB,CAAsB;QACvE,WAAM,GAAN,MAAM,CAAmB;QAGxE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;;;;;;;OAaG;IAEU,OAAO,CAAuB,IAAgB,EAAE,iBAAoC;;YAE7F,sBAAsB;YACtB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACzB,MAAM,IAAI,mCAAgB,CAAC,8CAA8C,IAAI,CAAC,MAAM,CAAC,MAAM,cAAc,CAAC,CAAC;YAC/G,CAAC;YAED,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,WAAW,EAAE,CAAC;YAEvD,6EAA6E;YAC7E,EAAE,CAAC,CAAC,YAAY,KAAK,MAAM,CAAC,CAAC,CAAC;gBAC1B,MAAM,IAAI,mCAAgB,CAAC,sCAAsC,YAAY,GAAG,CAAC,CAAC;YACtF,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,8BAA8B;gBAC9B,MAAM,YAAY,GAAa,EAAE,CAAC;gBAClC,GAAG,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC9B,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;gBAC3C,CAAC;gBACD,MAAM,CAAC,MAAM,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YACzF,CAAC;QACL,CAAC;KAAA;IAGM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,4BAA4B,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAC9E,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI;cACpB,iFAAiF;cACjF,6EAA6E,CAAC;IACxF,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,gCAAgC,CAAC;IAC5C,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,4BAA4B,CAAC;IACxC,CAAC;CACJ,CAAA;AAxCG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU,EAAqB,qCAAiB;;uDAoBhG;AA/CQ,wBAAwB;IAK5B,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;IAClE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CAD2D,2CAAoB;GALjH,wBAAwB,CAmEpC;AAnEY,4DAAwB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { BaseCommand } from '../BaseCommand';\nimport { RpcCommandFactory } from '../../factories/RpcCommandFactory';\nimport { Commands } from '../CommandEnumType';\nimport { CurrencyPriceService } from '../../services/CurrencyPriceService';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { CurrencyPrice } from '../../models/CurrencyPrice';\nimport * as resources from 'resources';\n\nexport class CurrencyPriceRootCommand extends BaseCommand implements RpcCommandInterface<resources.CurrencyPrice[]> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.CurrencyPriceService) private currencyPriceService: CurrencyPriceService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        super(Commands.CURRENCYPRICE_ROOT);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     * [0]: fromCurrency\n     * [1]: toCurrency\n     * [...]: toCurrency\n     *\n     * description: fromCurrency must be PART for now and toCurrency may be multiple currencies like INR, USD etc..\n     * example: [PART, INR, USD, EUR, GBP, ....]\n     *\n     * @param data\n     * @param rpcCommandFactory\n     * @returns {Promise<\"resources\".CurrencyPrice[]>}\n     *\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest, rpcCommandFactory: RpcCommandFactory): Promise<resources.CurrencyPrice[]> {\n\n        // todo: better errors\n        if (data.params.length < 2) {\n            throw new MessageException(`Requires at least two parameters, but only ${data.params.length} were found.`);\n        }\n\n        const fromCurrency = data.params.shift().toUpperCase();\n\n        // throw exception if fromCurrency is not a PART or toCurrencies has length 0\n        if (fromCurrency !== 'PART') {\n            throw new MessageException(`fromCurrency must be PART, but was ${fromCurrency}.`);\n        } else {\n            // convert params to uppercase\n            const toCurrencies: string[] = [];\n            for (const param of data.params) {\n                toCurrencies.push(param.toUpperCase());\n            }\n            return await this.currencyPriceService.getCurrencyPrices(fromCurrency, toCurrencies);\n        }\n    }\n\n\n    public usage(): string {\n        return this.getName() + ' <from> <to> [to...])  -  ' + this.description();\n    }\n\n    public help(): string {\n        return this.usage() + '\\n'\n            + '    <from>                   - Currency name from which you want to convert. \\n'\n            + '    <to>                     - Currency name in which you want to convert. ';\n    }\n\n    public description(): string {\n        return 'Command to convert currencies.';\n    }\n\n    public example(): any {\n        return 'currencyprice PART EUR USD';\n    }\n}\n"]}