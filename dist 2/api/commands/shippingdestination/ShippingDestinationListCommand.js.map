{"version":3,"file":"ShippingDestinationListCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/shippingdestination/ShippingDestinationListCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAE1D,0EAAuE;AACvE,0FAAuF;AACvF,0DAAuD;AAIvD,wEAAqE;AAKrE,wDAA6C;AAC7C,gDAA6C;AAE7C,IAAa,8BAA8B,GAA3C,oCAA4C,SAAQ,yBAAW;IAI3D,YACqF,0BAAsD,EAC9D,kBAAsC,EAChE,MAAyB;QAExE,KAAK,CAAC,0BAAQ,CAAC,wBAAwB,CAAC,CAAC;QAJwC,+BAA0B,GAA1B,0BAA0B,CAA4B;QAC9D,uBAAkB,GAAlB,kBAAkB,CAAoB;QAChE,WAAM,GAAN,MAAM,CAAmB;QAGxE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;OAOG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,EAAE,CAAC,CAAE,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC5B,MAAM,IAAI,mCAAgB,CAAC,wBAAwB,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;YACrF,CAAC;YACD,MAAM,MAAM,GAAW,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;YAC/D,EAAE,CAAC,CAAE,MAAM,KAAK,UAAW,CAAC,CAAC,CAAC;gBAC1B,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAClC,IAAI,WAAW,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;gBAClF,WAAW,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC;gBACnC,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,sBAAsB,CAAC,CAAC;YAClE,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAE,MAAM,KAAK,MAAO,CAAC,CAAC,CAAC;gBAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC9B,IAAI,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBACtE,WAAW,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC;gBACnC,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,sBAAsB,CAAC,CAAC;YAClE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,IAAI,mCAAgB,CAAC,6DAA6D,MAAM,IAAI,CAAC,CAAC;YACxG,CAAC;QACL,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,2DAA2D,CAAC;IACxF,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,sGAAsG;cACtG,yFAAyF;cACzF,0GAA0G;cAC1G,6DAA6D,CAAC;IACxE,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,oEAAoE,CAAC;IAChF,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,cAAc,CAAC;IACzD,CAAC;CACJ,CAAA;AAvCG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;6DAkB1D;AAxCQ,8BAA8B;IAKlC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAA;IACxE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;IAChE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CAFsE,uDAA0B;QAC1C,uCAAkB;GAN1G,8BAA8B,CA6D1C;AA7DY,wEAA8B","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ShippingDestinationService } from '../../services/ShippingDestinationService';\nimport { ListingItemService } from '../../services/ListingItemService';\nimport { ListingItemTemplateService } from '../../services/ListingItemTemplateService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ShippingDestination } from '../../models/ShippingDestination';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport * as _ from 'lodash';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { ShippingCountries } from '../../../core/helpers/ShippingCountries';\nimport { ShippingAvailability } from '../../enums/ShippingAvailability';\nimport { ShippingDestinationSearchParams } from '../../requests/ShippingDestinationSearchParams';\nimport { ShippingDestinationCreateRequest } from '../../requests/ShippingDestinationCreateRequest';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\n\nexport class ShippingDestinationListCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<ShippingDestination>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) public listingItemTemplateService: ListingItemTemplateService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) public listingItemService: ListingItemService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        super(Commands.SHIPPINGDESTINATION_LIST);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: 'template' or 'item'\n     *  [1]: listingItemTemplateId or listingItemId\n     *\n     * @param data\n     * @returns {Promise<ShippingDestination>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Bookshelf.Collection<ShippingDestination>> {\n        if ( data.params.length !== 2) {\n            throw new MessageException('Expected 2 args, got <' + data.params.length + '>.');\n        }\n        const idType: string = data.params[0].toString().toLowerCase();\n        if ( idType === 'template' ) {\n            const templateId = data.params[1];\n            let listingItem = await this.listingItemTemplateService.findOne(templateId, true);\n            listingItem = listingItem.toJSON();\n            return listingItem['ItemInformation']['ShippingDestinations'];\n        } else if ( idType === 'item' ) {\n            const itemId = data.params[1];\n            let listingItem = await this.listingItemService.findOne(itemId, true);\n            listingItem = listingItem.toJSON();\n            return listingItem['ItemInformation']['ShippingDestinations'];\n        } else {\n            throw new MessageException(`Was expecting either \"template\" or \"item\" in arg[0], got <${idType}>.`);\n        }\n    }\n\n    public usage(): string {\n        return this.getName() + ' (template <listingItemTemplateId>|item <listingItemId>) ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    template <listingItemTemplateId>   - Numeric - ID of the item template object associated with \\n'\n            + '                                          the shipping destinations we want to list. \\n'\n            + '    item <listingItemId>               - Numeric - ID of the listing item whose shipping destinations \\n'\n            + '                                          we want to list. ';\n    }\n\n    public description(): string {\n        return 'List the shipping destinations associated with a template or item.';\n    }\n\n    public example(): string {\n        return 'shipping ' + this.getName() + ' template 1 ';\n    }\n}\n"]}