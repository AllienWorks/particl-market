{"version":3,"file":"ShippingDestinationAddCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/shippingdestination/ShippingDestinationAddCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ShippingDestinationService } from '../../services/ShippingDestinationService';\nimport { ListingItemTemplateService } from '../../services/ListingItemTemplateService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ShippingDestination } from '../../models/ShippingDestination';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport * as _ from 'lodash';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { ShippingCountries } from '../../../core/helpers/ShippingCountries';\nimport { ShippingAvailability } from '../../enums/ShippingAvailability';\nimport { ShippingDestinationCreateRequest } from '../../requests/ShippingDestinationCreateRequest';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\n\nexport class ShippingDestinationAddCommand extends BaseCommand implements RpcCommandInterface<ShippingDestination> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ShippingDestinationService) private shippingDestinationService: ShippingDestinationService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) private listingItemTemplateService: ListingItemTemplateService\n    ) {\n        super(Commands.SHIPPINGDESTINATION_ADD);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: listing_item_template_id\n     *  [1]: country/countryCode\n     *  [2]: shipping availability (ShippingAvailability enum)\n     *\n     * If countryCode is country, convert to countryCode.\n     * If countryCode is country code, validate, and possibly throw error.\n     *\n     * @param data\n     * @returns {Promise<ShippingDestination>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<ShippingDestination> {\n\n        this.log.debug('data.params:', data.params);\n        const listingItemTemplateId: number = data.params[0];\n        const countryCode: string = ShippingCountries.validate(this.log, data.params[1]);\n        const shippingAvail: ShippingAvailability = this.validateShippingAvailability(data.params[2]);\n\n        // make sure ItemInformation exists, fetch the ListingItemTemplate\n        const listingItemTemplateModel = await this.listingItemTemplateService.findOne(listingItemTemplateId);\n        const listingItemTemplate = listingItemTemplateModel.toJSON();\n\n        if (_.isEmpty(listingItemTemplate.ItemInformation)) {\n            this.log.warn(`ItemInformation for the listing template id=${listingItemTemplateId} was not found!`);\n            throw new MessageException(`ItemInformation for the listing template id=${listingItemTemplateId} was not found!`);\n        }\n\n        // check if the shipping destination allready exists\n        // todo: this validation could be moved to service level and is propably unnecessary\n        const shippingDestinations = listingItemTemplate.ItemInformation.ShippingDestinations;\n        const existingShippingDestination = _.find(shippingDestinations, { country: countryCode, shippingAvailability: shippingAvail.toString() });\n\n        // create ShippingDestination if not already exist.\n        if (!existingShippingDestination) {\n            return await this.shippingDestinationService.create({\n                item_information_id: listingItemTemplate.ItemInformation.id,\n                country: countryCode,\n                shippingAvailability: shippingAvail\n            } as ShippingDestinationCreateRequest);\n        } else {\n            throw new MessageException('Shipping destination allready exists.');\n        }\n    }\n\n    public usage(): string {\n        return this.getName() + ' <listingItemTemplateId> (<country>|<countryCode>) <shippingAvailability> ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <listingItemTemplateId>            - Numeric - ID of the item template object we want \\n'\n            + '                                          to link this shipping destination to. \\n'\n            + '    <country>                          - String - The country name. \\n'\n            + '    <countryCode>                      - String - Two letter country code. \\n'\n            + '                                          associated with this shipping destination. \\n'\n            + '    <shippingAvailability>             - Enum{SHIPS,DOES_NOT_SHIP,ASK,UNKNOWN} - The \\n'\n            + '                                          availability of shipping to the specified area. ';\n    }\n\n    public description(): string {\n        return 'Create a new shipping destination and associate it with an item information object.';\n    }\n\n    public example(): string {\n        return 'shipping ' + this.getName() + ' 1 Australia UNKNOWN';\n    }\n\n    private validateShippingAvailability(shippingAvailStr: string): ShippingAvailability {\n        const shippingAvail: ShippingAvailability = ShippingAvailability[shippingAvailStr];\n        if ( ShippingAvailability[shippingAvail] === undefined ) {\n            this.log.warn(`Shipping Availability <${shippingAvailStr}> was not valid!`);\n            throw new MessageException(`Shipping Availability <${shippingAvailStr}> was not valid!`);\n        }\n        return shippingAvail;\n    }\n\n}\n"]}