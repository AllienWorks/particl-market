{"version":3,"file":"ShippingDestinationRemoveCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/shippingdestination/ShippingDestinationRemoveCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ShippingDestinationService } from '../../services/ShippingDestinationService';\nimport { ListingItemTemplateService } from '../../services/ListingItemTemplateService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { NotFoundException } from '../../exceptions/NotFoundException';\nimport { MessageException } from '../../exceptions/MessageException';\nimport * as _ from 'lodash';\nimport { ShippingCountries } from '../../../core/helpers/ShippingCountries';\nimport { ShippingDestinationSearchParams } from '../../requests/ShippingDestinationSearchParams';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport * as resources from 'resources';\n\nexport class ShippingDestinationRemoveCommand extends BaseCommand implements RpcCommandInterface<void> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ShippingDestinationService) private shippingDestinationService: ShippingDestinationService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) private listingItemTemplateService: ListingItemTemplateService\n    ) {\n        super(Commands.SHIPPINGDESTINATION_REMOVE);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: listing_item_template_id\n     *  [1]: country/countryCode\n     *  [2]: shippingDestinationId\n     *\n     * @param data\n     * @returns {Promise<ShippingDestination>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<void> {\n        return this.shippingDestinationService.destroy(data.params[2]);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: listing_item_template_id\n     *  [1]: country/countryCode\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<RpcRequest>}\n     */\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        if (data.params.length < 2) {\n            throw new MessageException('Missing params.');\n        }\n\n        const listingItemTemplateId: number = data.params[0];\n        let countryCode: string = data.params[1];\n\n        // If countryCode is country, convert to countryCode.\n        // If countryCode is country code, validate, and possibly throw error.\n        countryCode = ShippingCountries.validate(this.log, countryCode);\n\n        const listingItemTemplateModel = await this.listingItemTemplateService.findOne(listingItemTemplateId);\n        const listingItemTemplate: resources.ListingItemTemplate = listingItemTemplateModel.toJSON();\n\n        if (listingItemTemplate.ListingItems && listingItemTemplate.ListingItems.length > 0) {\n            this.log.warn(`Can't delete ShippingDestination, because the ListingItemTemplate has allready been posted!`);\n            throw new MessageException(`Can't delete ShippingDestination, because the ListingItemTemplate has allready been posted!`);\n        }\n\n        if (!_.isEmpty(listingItemTemplate.ItemInformation.ShippingDestinations)) {\n            const shippingDestination = _.find(listingItemTemplate.ItemInformation.ShippingDestinations, destination => {\n                return destination.country === countryCode;\n            });\n\n            if (shippingDestination === undefined) {\n                throw new MessageException('ShippingDestination not found.');\n            } else {\n                data.params[2] = shippingDestination.id;\n            }\n        } else {\n            throw new MessageException('ShippingDestination not found.');\n        }\n\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' (<shippingDestinationId>|<listing_item_template_id> (<country>|<countryCode>) <shipping availability>) ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <shippingDestinationId>            - Numeric - ID of the shipping destination object we want \\n'\n            + '                                          to remove. \\n'\n            + '    <listingItemTemplateId>            - Numeric - ID of the item template object whose destination we want \\n'\n            + '                                          to remove. \\n'\n            + '    <country>                          - String - The country name of the shipping destination we want to remove. \\n'\n            + '    <countryCode>                      - String - Two letter country code of the destination we want to remove. \\n'\n            + '    <shippingAvailability>             - Enum{SHIPS,DOES_NOT_SHIP,ASK,UNKNOWN} - The \\n'\n            + '                                          availability of shipping destination we want to remove. ';\n    }\n\n    public description(): string {\n        return 'Destroy a shipping destination object specified by the ID of the item information object its linked to,'\n             + ' the country associated with it, and the shipping availability associated with it.';\n    }\n\n    public example(): string {\n        return 'shipping ' + this.getName() + ' 1 Australia SHIPS ';\n    }\n\n}\n"]}