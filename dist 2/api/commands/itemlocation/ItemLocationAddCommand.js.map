{"version":3,"file":"ItemLocationAddCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/itemlocation/ItemLocationAddCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ItemLocationService } from '../../services/ItemLocationService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ItemLocationCreateRequest } from '../../requests/ItemLocationCreateRequest';\nimport { ItemLocation } from '../../models/ItemLocation';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { ListingItemTemplateService } from '../../services/ListingItemTemplateService';\nimport { ShippingCountries } from '../../../core/helpers/ShippingCountries';\nimport * as _ from 'lodash';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport * as resources from 'resources';\nimport {LocationMarkerCreateRequest} from '../../requests/LocationMarkerCreateRequest';\n\nexport class ItemLocationAddCommand extends BaseCommand implements RpcCommandInterface<ItemLocation> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ItemLocationService) private itemLocationService: ItemLocationService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) public listingItemTemplateService: ListingItemTemplateService\n    ) {\n        super(Commands.ITEMLOCATION_ADD);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     * [0]: listingItemTemplateId\n     * [1]: countryCode\n     * [2]: address, optional\n     * [3]: gps marker title, optional\n     * [4]: gps marker description, optional\n     * [5]: gps marker latitude, optional\n     * [6]: gps marker longitude, optional\n     *\n     * @param data\n     * @returns {Promise<ItemLocation>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<ItemLocation> {\n\n        const listingItemTemplateId = data.params[0];\n        const countryCode = data.params[1];\n        const address = data.params[2];\n\n        const listingItemTemplateModel = await this.listingItemTemplateService.findOne(listingItemTemplateId);\n        const listingItemTemplate: resources.ListingItemTemplate = listingItemTemplateModel.toJSON();\n\n        let locationMarker: LocationMarkerCreateRequest | undefined;\n\n        const allGpsMarketDataParamsExist = data.params[3] && data.params[4] && data.params[5] && data.params[6];\n        if (allGpsMarketDataParamsExist) {\n            locationMarker = {\n                markerTitle: data.params[3],\n                markerText: data.params[4],\n                lat: data.params[5],\n                lng: data.params[6]\n            } as LocationMarkerCreateRequest;\n        }\n\n        const itemLocation = {\n            item_information_id: listingItemTemplate.ItemInformation.id,\n            region: countryCode,\n            address,\n            locationMarker\n        } as ItemLocationCreateRequest;\n\n        return this.itemLocationService.create(itemLocation);\n    }\n\n    /**\n     * data.params[]:\n     * [0]: listingItemTemplateId\n     * [1]: region (country/countryCode)\n     * [2]: address, optional\n     * [3]: gps marker title, optional\n     * [4]: gps marker description, optional\n     * [5]: gps marker latitude, optional\n     * [6]: gps marker longitude, optional\n     *\n     * @param data\n     * @returns {Promise<ItemLocation>}\n     */\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        if (data.params.length < 2) {\n            throw new MessageException('Missing params.');\n        }\n        if (data.params.length > 3 && data.params.length !== 7) {\n            throw new MessageException('Missing gps marker data.');\n        }\n\n        if (typeof data.params[0] !== 'number') {\n            throw new MessageException('Invalid listingItemTemplateId.');\n        }\n\n        if (typeof data.params[1] !== 'string') {\n            throw new MessageException('Invalid region.');\n        } else {\n            // If countryCode is country, convert to countryCode.\n            // If countryCode is country code, validate, and possibly throw error.\n            data.params[1] = ShippingCountries.validate(this.log, data.params[1]);\n        }\n\n        if (typeof data.params[2] !== 'string') { // address should be string\n            throw new MessageException('Invalid address.');\n        }\n\n        const allGpsMarketDataParamsExist = data.params[3] && data.params[4] && data.params[5] && data.params[6];\n        if (allGpsMarketDataParamsExist) {\n\n            if (typeof data.params[3] !== 'string') {\n                throw new MessageException('Invalid title.');\n            }\n            if (typeof data.params[4] !== 'string') {\n                throw new MessageException('Invalid description.');\n            }\n\n            if (typeof data.params[5] !== 'number') {\n                throw new MessageException('Invalid latitude.');\n            }\n            if (typeof data.params[6] !== 'number') {\n                throw new MessageException('Invalid longitude.');\n            }\n        }\n\n        // ItemLocation cannot be created if there's a ListingItem related to ItemInformations ItemLocation.\n        // (the item has allready been posted)\n        const listingItemTemplateId = data.params[0];\n        const listingItemTemplateModel = await this.listingItemTemplateService.findOne(listingItemTemplateId);\n        const listingItemTemplate: resources.ListingItemTemplate = listingItemTemplateModel.toJSON();\n\n        if (_.size(listingItemTemplate.ListingItems) > 0) { // listingitems exist\n            throw new MessageException(`ListingItem(s) for the listingItemTemplateId=${listingItemTemplateId} allready exist!`);\n        }\n\n        if (!_.isEmpty(listingItemTemplate.ItemInformation.ItemLocation)) { // templates itemlocation exist\n            throw new MessageException(`ItemLocation for the listingItemTemplateId=${listingItemTemplateId} already exists!`);\n        }\n\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' <listingItemTemplateId> <region> [<address> [<gpsMarkerTitle> <gpsMarkerDescription> <gpsMarkerLatitude>'\n            + ' <gpsMarkerLongitude>]] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <listingItemTemplateId>  - Numeric - The ID of the listing item template we want \\n'\n            + '                                to associate with this item location. \\n'\n            + '    <region>                 - String - Region, i.e. country or country code. \\n'\n            + '    <address>                - String - Address [TODO, what kind of address?]. \\n'\n            + '    <gpsMarkerTitle>         - String - Gps marker title. \\n'\n            + '    <gpsMarkerDescription>   - String - Gps marker text. \\n'\n            + '    <gpsMarkerLatitude>      - Numeric - Marker latitude position. \\n'\n            + '    <gpsMarkerLongitude>     - Numeric - Marker longitude position. ';\n    }\n\n    public description(): string {\n        return 'Command for adding an ItemLocation to your ListingItemTemplate, identified by listingItemTemplateId.';\n    }\n\n    public example(): string {\n        return '';\n        // 'location ' + this.getName() + ' 1 \\'United States\\' CryptoAddr? [TODO]';\n    }\n\n}\n"]}