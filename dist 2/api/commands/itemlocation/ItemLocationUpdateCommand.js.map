{"version":3,"file":"ItemLocationUpdateCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/itemlocation/ItemLocationUpdateCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ItemLocationService } from '../../services/ItemLocationService';\nimport { ListingItemTemplateService } from '../../services/ListingItemTemplateService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ItemLocationUpdateRequest } from '../../requests/ItemLocationUpdateRequest';\nimport { ItemLocation } from '../../models/ItemLocation';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport * as _ from 'lodash';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { ShippingCountries } from '../../../core/helpers/ShippingCountries';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\n\nexport class ItemLocationUpdateCommand extends BaseCommand implements RpcCommandInterface<ItemLocation> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ItemLocationService) public itemLocationService: ItemLocationService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) public listingItemTemplateService: ListingItemTemplateService\n    ) {\n        super(Commands.ITEMLOCATION_UPDATE);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     * [0]: listing_item_template_id\n     * [1]: region (country/countryCode)\n     * [2]: address, optional\n     * [3]: gps marker title, optional\n     * [4]: gps marker description, optional\n     * [5]: gps marker latitude, optional\n     * [6]: gps marker longitude, optional\n     *\n     * @param data\n     * @returns {Promise<ItemLocation>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<ItemLocation> {\n        const listingItemTemplateId = data.params[0];\n        // If countryCode is country, convert to countryCode.\n        // If countryCode is country code, validate, and possibly throw error.\n        if (data.params[1]) {\n            let countryCode: string = data.params[1];\n            countryCode = ShippingCountries.validate(this.log, countryCode);\n\n            const itemInformation = await this.getItemInformation(listingItemTemplateId);\n\n            // ItemLocation cannot be updated if there's a ListingItem related to ItemInformations ItemLocation. (the item has allready been posted)\n            if (itemInformation.listingItemId) {\n                throw new MessageException('ItemLocation cannot be updated because the item has allready been posted!');\n            } else {\n                const updateRequest = {\n                    item_information_id: itemInformation.id,\n                    region: countryCode,\n                    address: data.params[2]\n                } as ItemLocationUpdateRequest;\n\n                if (data.params[5] && data.params[6]) {\n                    updateRequest.locationMarker = {\n                        markerTitle: data.params[3],\n                            markerText: data.params[4],\n                            lat: data.params[5],\n                            lng: data.params[6]\n                    };\n                }\n\n                // update item location\n                return this.itemLocationService.update(itemInformation.ItemLocation.id, updateRequest);\n            }\n        } else {\n            throw new MessageException('Country code can\\'t be blank.');\n        }\n    }\n\n    public usage(): string {\n        return this.getName() + ' <listingItemTemplateId> <region> <address> <gpsMarkerTitle>'\n            + ' <gpsMarkerDescription> <gpsMarkerLatitude> <gpsMarkerLongitude> ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <listingItemTemplateId>  - Numeric - The ID of the listing item template we want. \\n'\n            + '    <region>                 - String - Region, i.e. country or country code. \\n'\n            + '    <address>                - String - Address. \\n'\n            + '    <gpsMarkerTitle>         - String - Gps marker title. \\n'\n            + '    <gpsMarkerDescription>   - String - Gps marker text. \\n'\n            + '    <gpsMarkerLatitude>      - Numeric - Marker latitude position. \\n'\n            + '    <gpsMarkerLongitude>     - Numeric - Marker longitude position. ';\n    }\n\n    public description(): string {\n        return 'Update the details of an item location given by listingItemTemplateId.';\n    }\n\n    /*\n     * TODO: NOTE: This function may be duplicated between commands.\n     */\n    private async getItemInformation(listingItemTemplateId: number): Promise<any> {\n        // find the existing listing item template\n        const listingItemTemplate = await this.listingItemTemplateService.findOne(listingItemTemplateId);\n\n        // find the related ItemInformation\n        const ItemInformation = listingItemTemplate.related('ItemInformation').toJSON();\n\n        // Through exception if ItemInformation or ItemLocation does not exist\n        if (_.size(ItemInformation) === 0 || _.size(ItemInformation.ItemLocation) === 0) {\n            this.log.warn(`Item Information or Item Location with the listing template id=${listingItemTemplateId} was not found!`);\n            throw new MessageException(`Item Information or Item Location with the listing template id=${listingItemTemplateId} was not found!`);\n        }\n\n        return ItemInformation;\n    }\n}\n"]}