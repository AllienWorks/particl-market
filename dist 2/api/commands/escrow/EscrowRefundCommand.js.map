{"version":3,"file":"EscrowRefundCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/escrow/EscrowRefundCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Types, Core, Targets } from '../../../constants';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { Escrow } from '../../models/Escrow';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { EscrowActionService } from '../../services/EscrowActionService';\nimport { EscrowRequest } from '../../requests/EscrowRequest';\nimport { EscrowMessageType } from '../../enums/EscrowMessageType';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { MessageException } from '../../exceptions/MessageException';\nimport * as _ from 'lodash';\nimport { OrderStatus } from '../../enums/OrderStatus';\nimport { BidMessageType} from '../../enums/BidMessageType';\nimport { OrderItemService } from '../../services/OrderItemService';\n\nexport class EscrowRefundCommand extends BaseCommand implements RpcCommandInterface<Escrow> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.EscrowActionService) private escrowActionService: EscrowActionService,\n        @inject(Types.Service) @named(Targets.Service.OrderItemService) private orderItemService: OrderItemService\n    ) {\n        super(Commands.ESCROW_REFUND);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     * [0]: itemhash\n     * [1]: accepted\n     * [2]: memo\n     * [3]: escrowId\n     * @param data\n     * @returns {Promise<any>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<any> {\n\n        const orderItemModel = await this.orderItemService.findOne(data.params[0]);\n        const orderItem = orderItemModel.toJSON();\n\n        if (orderItem.status !== OrderStatus.AWAITING_ESCROW) {\n            this.log.error('Order is in invalid state');\n            throw new MessageException('Order is in invalid state');\n        }\n\n        const bid = orderItem.Bid;\n        if (!bid || bid.action !== BidMessageType.MPA_ACCEPT) {\n            this.log.error('No valid information to finalize escrow');\n            throw new MessageException('No valid information to finalize escrow');\n        }\n\n        const listingItem = orderItem.Bid.ListingItem;\n        if (_.isEmpty(listingItem)) {\n            this.log.error('ListingItem not found!');\n            throw new MessageException('ListingItem not found!');\n        }\n\n        const paymentInformation = orderItem.Bid.ListingItem.PaymentInformation;\n        if (_.isEmpty(paymentInformation)) {\n            this.log.error('PaymentInformation not found!');\n            throw new MessageException('PaymentInformation not found!');\n        }\n\n        const escrow = orderItem.Bid.ListingItem.PaymentInformation.Escrow;\n        if (_.isEmpty(escrow)) {\n            this.log.error('Escrow not found!');\n            throw new MessageException('Escrow not found!');\n        }\n\n        const escrowRatio = orderItem.Bid.ListingItem.PaymentInformation.Escrow.Ratio;\n        if (_.isEmpty(escrowRatio)) {\n            this.log.error('EscrowRatio not found!');\n            throw new MessageException('EscrowRatio not found!');\n        }\n\n        return this.escrowActionService.refund({\n            orderItem,\n            accepted: data.params[1],\n            memo: data.params[2],\n            action: EscrowMessageType.MPA_REFUND\n        } as EscrowRequest);\n    }\n\n    public usage(): string {\n        return this.getName() + ' [<itemhash> [<accepted> [<memo>]]] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + '\\n'\n            + '    <orderItemId>            - String - The id of the OrderItem for which we want to refund the Escrow.\\n'\n            + '    <accepted>               - String - The accepted status of the escrow \\n'\n            + '    <memo>                   - String - The memo of the Escrow ';\n    }\n\n    public description(): string {\n        return 'Refund an escrow.';\n    }\n\n}\n"]}