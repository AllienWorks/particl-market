{"version":3,"file":"EscrowAddCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/escrow/EscrowAddCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Types, Core, Targets } from '../../../constants';\nimport { EscrowService } from '../../services/EscrowService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { Escrow } from '../../models/Escrow';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { EscrowCreateRequest } from '../../requests/EscrowCreateRequest';\nimport { ListingItemTemplateService } from '../../services/ListingItemTemplateService';\nimport { MessageException } from '../../exceptions/MessageException';\nimport * as _ from 'lodash';\n\nexport class EscrowAddCommand extends BaseCommand implements RpcCommandInterface<Escrow> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.EscrowService) private escrowService: EscrowService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) private listingItemTemplateService: ListingItemTemplateService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        super(Commands.ESCROW_ADD);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: ListingItemTemplate.id\n     *  [1]: escrowtype\n     *  [2]: buyer ratio\n     *  [3]: seller ratio\n     * @param data\n     * @returns {Promise<Escrow>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Escrow> {\n\n        // get the template\n        const listingItemTemplateId = data.params[0];\n        const listingItemTemplateModel = await this.listingItemTemplateService.findOne(listingItemTemplateId);\n        const listingItemTemplate = listingItemTemplateModel.toJSON();\n\n        // creates an Escrow related to PaymentInformation related to ListingItemTemplate\n        return this.escrowService.create({\n            payment_information_id: listingItemTemplate.PaymentInformation.id,\n            type: data.params[1],\n            ratio: {\n                buyer: data.params[2],\n                seller: data.params[3]\n            }\n        } as EscrowCreateRequest);\n    }\n\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        if (data.params.length < 4) {\n            throw new MessageException('Missing params.');\n        }\n\n        // get the template\n        const listingItemTemplateId = data.params[0];\n        const listingItemTemplateModel = await this.listingItemTemplateService.findOne(listingItemTemplateId);\n        const listingItemTemplate = listingItemTemplateModel.toJSON();\n\n        // template allready has listingitems so for now, it cannot be modified\n        if (listingItemTemplate.ListingItems.length > 0) {\n            throw new MessageException(`Escrow cannot be added because ListingItems allready exist for the ListingItemTemplate.`);\n        }\n\n        this.log.debug('escrow: ', JSON.stringify(listingItemTemplate.PaymentInformation, null, 2));\n        if (!_.isEmpty(listingItemTemplate.PaymentInformation.Escrow)) {\n            throw new MessageException(`Escrow allready exists.`);\n        }\n\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' <listingItemTemplateId> <escrowType> <buyerRatio> <sellerRatio> ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + '\\n'\n            + '    <listingItemTemplateId>  - Numeric - The ID of the listing item template we want \\n'\n            + '                                to associate with this escrow. \\n'\n            + '    <escrowType>             - Enum{NOP,MAD} - The type of the escrow we want to \\n'\n            + '                                create. \\n'\n            + '    <buyerRatio>             - Numeric - [TODO] \\n'\n            + '    <sellerRatio>            - Numeric - [TODO] ';\n    }\n\n    public description(): string {\n        return 'Create an escrow and associate it with a listingItemTemplate.';\n    }\n\n    public example(): string {\n        return 'escrow ' + this.getName() + ' 1 MAD 1 1 ';\n    }\n}\n"]}