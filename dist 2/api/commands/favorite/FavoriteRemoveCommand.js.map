{"version":3,"file":"FavoriteRemoveCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/favorite/FavoriteRemoveCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { FavoriteItemService } from '../../services/FavoriteItemService';\nimport { ListingItemService } from '../../services/ListingItemService';\nimport { ProfileService } from '../../services/ProfileService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { MessageException } from '../../exceptions/MessageException';\n\n/**\n * Command for removing an item from your favorites, identified by ID or hash.\n */\nexport class FavoriteRemoveCommand extends BaseCommand implements RpcCommandInterface<void> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.FavoriteItemService) private favoriteItemService: FavoriteItemService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) private listingItemService: ListingItemService,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) private profileService: ProfileService\n    ) {\n        super(Commands.FAVORITE_REMOVE);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     *\n     *  data.params[]:\n     *  [0]: profile_id\n     *  [1]: item_id or hash\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<void> {\n        const favoriteItemModel = await this.favoriteItemService.findOneByProfileIdAndListingItemId(data.params[0], data.params[1]);\n        const favoriteItem = favoriteItemModel.toJSON();\n        return this.favoriteItemService.destroy(favoriteItem.id);\n    }\n\n    /**\n     * validate that profile and item exists, replace possible hash with id\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<RpcRequest>}\n     */\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n\n        if (data.params.length < 2) {\n            throw new MessageException('Missing parameters.');\n        }\n\n        const profileId = data.params[0];\n        let itemId = data.params[1];\n\n        if (profileId && typeof profileId === 'string') {\n            throw new MessageException('profileId cant be a string.');\n        } else {\n            // make sure profile with the id exists\n            await this.profileService.findOne(profileId);   // throws if not found\n        }\n\n        // if item hash is in the params, fetch the id\n        if (itemId && typeof itemId === 'string') {\n            const listingItemModel = await this.listingItemService.findOneByHash(itemId);\n            const listingItem = listingItemModel.toJSON();\n            itemId = listingItem.id;\n        } else {\n            // else make sure the the item with the id exists, throws if not\n            const item = await this.listingItemService.findOne(itemId);\n        }\n        return await this.favoriteItemService.findOneByProfileIdAndListingItemId(profileId, itemId) // throws if not found\n            .catch(reason => {\n                // great, not found, so we can continue and create it\n                // return RpcRequest with the correct data to be passed to execute\n            })\n            .then(value => {\n                if (value) {\n                    data.params[0] = profileId;\n                    data.params[1] = itemId;\n                    return data;\n                } else {\n                    throw new MessageException('FavoriteItem doesnt exist.');\n                }\n            });\n    }\n\n    public usage(): string {\n        return this.getName() + ' <profileId> (<itemId>|<hash>) ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + '\\n'\n            + '    <profileId>                   - Numeric - The ID of the profile \\n'\n            + '                                     associated with the favorite we want to remove. \\n'\n            + '    <listingItemId>               - Numeric - The ID of the listing item you want \\n'\n            + '                                     to remove from your favorites. \\n'\n            + '    <hash>                        - String - The hash of the listing item you want \\n'\n            + '                                     to remove from your favourites. ';\n    }\n\n    public description(): string {\n        return 'Command for removing an item from your favorites, identified by ID or hash.';\n    }\n\n    public example(): string {\n        return 'favorite ' + this.getName() + ' 1 1 b90cee25-036b-4dca-8b17-0187ff325dbb ';\n    }\n}\n"]}