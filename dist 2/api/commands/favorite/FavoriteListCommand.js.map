{"version":3,"file":"FavoriteListCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/favorite/FavoriteListCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { FavoriteItem } from '../../models/FavoriteItem';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { ProfileService } from '../../services/ProfileService';\nimport { FavoriteItemService } from '../../services/FavoriteItemService';\n\n/*\n * Get a list of all favorites for profile\n */\nexport class FavoriteListCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<FavoriteItem>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) private profileService: ProfileService,\n        @inject(Types.Service) @named(Targets.Service.FavoriteItemService) private favoriteItemService: FavoriteItemService\n    ) {\n        super(Commands.FAVORITE_LIST);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: profileId\n     *  [1]: withRelated, boolean\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<Bookshelf.Collection<FavoriteItem>>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Bookshelf.Collection<FavoriteItem>> {\n        return await this.profileService.findOne(data.params[0])\n            .then(async value => {\n                const profile = value.toJSON();\n                return await this.favoriteItemService.findAllByProfileId(profile.id, data.params[1]);\n            });\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: profileId or profileName\n     *  [1]: withRelated, boolean\n     *\n     * if data.params[0] is number then find favorites by profileId else find by profile Name\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<RpcRequest>}\n     */\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        if (data.params.length < 1) {\n            throw new MessageException('Missing profileId or profileName.');\n        }\n\n        if (typeof data.params[0] === 'string') {\n            const profileModel = await this.profileService.findOneByName(data.params[0]);\n            const profile = profileModel.toJSON();\n            data.params[0] = profile.id;\n        }\n\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' [<profileId>|<profileName>] [<withRelated>]';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + '\\n'\n            + '    <profileId>                   - [optional]- Numeric - The ID of the profile we \\n'\n            + '                                     want to retrive favorites associated with that profile id. \\n'\n\n            + '    <profileName>                 - [optional] - String - The name of the profile we \\n'\n            + '                                     want to retrive favorites associated with that profile name. \\n'\n\n            + '    <withRelated>                 - [optional] Boolean - Whether we want to include all sub objects. ';\n    }\n\n    public description(): string {\n        return 'List the favorites associated with a profileId or profileName.';\n    }\n\n    public example(): string {\n        return 'favorite ' + this.getName() + ' 1 true';\n    }\n}\n"]}