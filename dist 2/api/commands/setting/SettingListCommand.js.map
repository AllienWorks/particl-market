{"version":3,"file":"SettingListCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/setting/SettingListCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { Setting } from '../../models/Setting';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { RpcCommandFactory } from '../../factories/RpcCommandFactory';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { SettingService } from '../../services/SettingService';\nimport { ProfileService } from '../../services/ProfileService';\n\nexport class SettingListCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<Setting>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.SettingService) public settingService: SettingService,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) private profileService: ProfileService\n    ) {\n        super(Commands.SETTING_LIST);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: profileId\n     *\n     * @param data\n     * @param rpcCommandFactory\n     * @returns {Promise<Bookshelf.Collection<Setting>>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest, rpcCommandFactory: RpcCommandFactory): Promise<Bookshelf.Collection<Setting>> {\n        const profileId = data.params[0];\n        return await this.settingService.findAllByProfileId(profileId, true);\n    }\n\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        if (data.params.length < 1) {\n            throw new MessageException('Missing profileId.');\n        }\n\n        const profileId = data.params[0];\n        if (profileId && typeof profileId === 'string') {\n            throw new MessageException('profileId cant be a string.');\n        } else {\n            // make sure Profile with the id exists\n            await this.profileService.findOne(profileId) // throws if not found\n                .catch(reason => {\n                    throw new MessageException('Profile not found.');\n                });\n        }\n\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' [<profileId>] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + '\\n'\n            + '    <profileId>              - Numeric - The ID of the profile we want to associate \\n'\n            + '                                this settings with. ';\n    }\n\n    public description(): string {\n        return 'List all settings belonging to a profile.';\n    }\n\n    public example(): string {\n        return 'setting ' + this.getName() + ' 1';\n    }\n}\n"]}