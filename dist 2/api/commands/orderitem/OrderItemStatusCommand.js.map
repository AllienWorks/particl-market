{"version":3,"file":"OrderItemStatusCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/orderitem/OrderItemStatusCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ListingItemService } from '../../services/ListingItemService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ListingItem } from '../../models/ListingItem';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { ListingItemSearchParams } from '../../requests/ListingItemSearchParams';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { SearchOrder } from '../../enums/SearchOrder';\nimport { OrderItemStatus } from '../../../core/helpers/OrderItemStatus';\nimport * as resources from 'resources';\n\nexport class OrderItemStatusCommand extends BaseCommand implements RpcCommandInterface<OrderItemStatus[]> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) public listingItemService: ListingItemService\n    ) {\n        super(Commands.ORDERITEM_STATUS);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: itemhash, string\n     *  [1]: buyer, string\n     *  [2]: seller, string\n     *\n     * @param data\n     * @returns {Promise<ListingItem>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<OrderItemStatus[]> {\n        const itemHash = data.params[0];\n        const buyer = data.params[1];\n        const seller = data.params[2];\n\n        const type = 'ALL';         // todo: use * instead of ALL\n        const profileId = 'ALL';    // todo: use * instead of ALL\n\n        // search for listingitem(s) with certain seller and having bids from certain buyer\n        const listingItemsModel: Bookshelf.Collection<ListingItem> = await this.listingItemService.search({\n            itemHash,\n            buyer,\n            seller,\n            order: SearchOrder.ASC.toString(),\n            type,\n            profileId,\n            searchString: '',\n            page: 0,\n            pageLimit: 100,\n            withBids: true\n        } as ListingItemSearchParams, true);\n        const listingItems = listingItemsModel.toJSON();\n\n        // this.log.debug('listingItems:', JSON.stringify(listingItems, null, 2));\n\n        // Extract status details from the orderItems, since that's what we want to return to the userd\n        const orderItemStatuses: OrderItemStatus[] = [];\n        for (const listingItem of listingItems) {\n            for (const bid of listingItem.Bids) {\n                if (!buyer || buyer === '*' || bid.bidder === buyer) {\n                    const orderItemStatus = new OrderItemStatus(listingItem.hash, bid.action, bid.OrderItem.status, bid.bidder, listingItem.seller);\n                    orderItemStatuses.push(orderItemStatus);\n                }\n            }\n        }\n        this.log.debug('orderItemStatuses:', JSON.stringify(orderItemStatuses, null, 2));\n\n        return orderItemStatuses;\n    }\n\n    /**\n     *  [0]: itemhash | *, string\n     *  [1]: buyer | *, string\n     *  [2]: seller | *, string\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<RpcRequest>}\n     */\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n\n        if (data.params.length < 1) {\n            data.params[0] = '*';\n        }\n\n        if (data.params.length < 2) {\n            data.params[1] = '*';\n        }\n\n        if (data.params.length < 3) {\n            data.params[2] = '*';\n        }\n\n        const itemHash = data.params[0];\n        const buyer = data.params[1];\n        const seller = data.params[2];\n\n        if (typeof itemHash !== 'string') {\n            throw new MessageException('itemHash should be a string.');\n        }\n\n        if (typeof buyer !== 'string') {\n            throw new MessageException('buyer should be a string.');\n        }\n\n        if (typeof seller !== 'string') {\n            throw new MessageException('seller should be a string.');\n        }\n\n        return data;\n    }\n\n    // tslint:disable:max-line-length\n    public usage(): string {\n        return this.getName() + ' [<itemhash|*> [<buyer|*> [<seller|*>]]]';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '<itemHash|*> - The hash of the OrderItem we want to get the status of. \\n'\n            + '               Can use * for wildcard. \\n'\n            + '<buyer|*>    - The buyer of the OrderItems we want to get the status of. \\n'\n            + '               Can use * for wildcard. \\n'\n            + '<seller|*>   - The seller of the OrderItems we want to get the status of. \\n'\n            + '               Can use * for wildcard. \\n';\n    }\n\n    // tslint:enable:max-line-length\n\n    public description(): string {\n        return 'Fetch statuses of OrderItems specified by given search params. Shows the first 100 orders.';\n    }\n\n    public example(): string {\n        return 'orderitem ' + this.getName() + ' ';\n    }\n\n}\n"]}