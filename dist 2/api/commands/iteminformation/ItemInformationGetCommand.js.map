{"version":3,"file":"ItemInformationGetCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/iteminformation/ItemInformationGetCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,kFAA+E;AAC/E,0DAAuD;AAGvD,wDAA6C;AAC7C,gDAA6C;AAC7C,wEAAqE;AAErE,IAAa,yBAAyB,GAAtC,+BAAuC,SAAQ,yBAAW;IAItD,YACmD,MAAyB,EACM,sBAA8C;QAE5H,KAAK,CAAC,0BAAQ,CAAC,mBAAmB,CAAC,CAAC;QAHW,WAAM,GAAN,MAAM,CAAmB;QACM,2BAAsB,GAAtB,sBAAsB,CAAwB;QAG5H,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,CAAC;KAAA;IAED;;;;;;;OAOG;IACU,QAAQ,CAAC,IAAgB;;YAClC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;gBAClD,MAAM,IAAI,mCAAgB,CAAC,iCAAiC,CAAC,CAAC;YAClE,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC5C,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;gBAC1D,MAAM,IAAI,mCAAgB,CAAC,yCAAyC,CAAC,CAAC;YAC1E,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,2BAA2B,CAAC;IACxD,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,4GAA4G;cAC5G,mDAAmD,CAAC;IAC9D,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,8EAA8E,CAAC;IAC1F,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;IAClD,CAAC;CACJ,CAAA;AAxCG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;wDAE1D;AAtBQ,yBAAyB;IAK7B,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAA;qDAAiC,+CAAsB;GANvH,yBAAyB,CA4DrC;AA5DY,8DAAyB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ItemInformationService } from '../../services/ItemInformationService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ItemInformation } from '../../models/ItemInformation';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { MessageException } from '../../exceptions/MessageException';\n\nexport class ItemInformationGetCommand extends BaseCommand implements RpcCommandInterface<ItemInformation> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ItemInformationService) private itemInformationService: ItemInformationService\n    ) {\n        super(Commands.ITEMINFORMATION_GET);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: listingItemTemplateId\n     *\n     * @param data\n     * @returns {Promise<ItemInformation>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<ItemInformation> {\n        return this.itemInformationService.findByItemTemplateId(data.params[0]);\n    }\n\n    /**\n     * - should have 4 params\n     * - if category has key, it cant be edited\n     * - ...\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<void>}\n     */\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        if (data.params.length < 1) {\n            this.log.error('ListingItemTemplate ID missing.');\n            throw new MessageException('ListingItemTemplate ID missing.');\n        } else if (typeof data.params[0] !== 'number') {\n            this.log.error('ListingItemTemplate ID must be numeric.');\n            throw new MessageException('ListingItemTemplate ID must be numeric.');\n        }\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' <listingItemTemplateId> ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <listingItemTemplateId>       - Numeric - The listingItemTemplateId of the item information we want \\n'\n            + '                                     to retrieve.';\n    }\n\n    public description(): string {\n        return 'Get an iteminformations and associated with it with a listingItemTemplateId.';\n    }\n\n    public example(): string {\n        return 'information ' + this.getName() + ' 1';\n    }\n}\n"]}