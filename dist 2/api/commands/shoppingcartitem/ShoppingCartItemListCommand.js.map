{"version":3,"file":"ShoppingCartItemListCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/shoppingcartitem/ShoppingCartItemListCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAC1C,0DAAuD;AAEvD,yDAA+D;AAE/D,kDAA0D;AAC1D,gDAA6C;AAC7C,wDAA8C;AAE9C,oFAAiF;AAGjF,IAAa,2BAA2B,GAAxC,iCAAyC,SAAQ,yBAAW;IAIxD,YACmF,uBAAgD,EAChF,MAAyB;QAExE,KAAK,CAAC,0BAAQ,CAAC,qBAAqB,CAAC,CAAC;QAHyC,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChF,WAAM,GAAN,MAAM,CAAmB;QAGxE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,yBAAyB,CAAC;IACtD,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,2FAA2F;cAE3F,kGAAkG,CAAC;IAC7G,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,qDAAqD,CAAC;IACjE,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,KAAK,GAAG,IAAI,CAAC;IACvD,CAAC;CACJ,CAAA;AAtBG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;0DAE1D;AAtBQ,2BAA2B;IAK/B,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAA;IACrE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CADiE,iDAAuB;GAL1H,2BAA2B,CA0CvC;AA1CY,kEAA2B","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { BaseCommand } from '../BaseCommand';\nimport { Commands } from '../CommandEnumType';\nimport { ShoppingCartItem } from '../../models/ShoppingCartItem';\nimport { ShoppingCartItemService } from '../../services/ShoppingCartItemService';\nimport { MessageException } from '../../exceptions/MessageException';\n\nexport class ShoppingCartItemListCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<ShoppingCartItem>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ShoppingCartItemService) private shoppingCartItemService: ShoppingCartItemService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        super(Commands.SHOPPINGCARTITEM_LIST);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: cartId, number\n     *\n     * @param data\n     * @returns {Promise<Bookshelf.Collection<ShoppingCartItem>>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Bookshelf.Collection<ShoppingCartItem>> {\n        return this.shoppingCartItemService.findAllByCartId(data.params[0]);\n    }\n\n    public usage(): string {\n        return this.getName() + ' <cartId> [withRelated]';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <cartId>                 - The Id of the shopping cart whose listingItem we want. \\n '\n\n            + '    <withRelated>            - [optional] Boolean - Whether we want to include all sub objects. ';\n    }\n\n    public description(): string {\n        return 'List all item of shopping cart as per given cartId.';\n    }\n\n    public example(): string {\n        return 'cartitem ' + this.getName() + ' 1 ' + true;\n    }\n}\n"]}