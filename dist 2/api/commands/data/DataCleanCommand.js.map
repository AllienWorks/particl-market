{"version":3,"file":"DataCleanCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/data/DataCleanCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,oEAAiE;AACjE,0DAAuD;AAEvD,wDAA8C;AAC9C,gDAA6C;AAC7C,4BAA4B;AAE5B,IAAa,gBAAgB,GAA7B,sBAA8B,SAAQ,yBAAW;IAI7C,YACmD,MAAyB,EACD,eAAgC;QAEvG,KAAK,CAAC,0BAAQ,CAAC,UAAU,CAAC,CAAC;QAHoB,WAAM,GAAN,MAAM,CAAmB;QACD,oBAAe,GAAf,eAAe,CAAiB;QAGvG,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IAEU,OAAO,CAAsB,IAAgB;;YACtD,IAAI,IAAI,GAAG,IAAI,CAAC;YAChB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC;YACnC,CAAC;YACD,MAAM,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAClD,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC;IAChC,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC;IAC7D,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,wCAAwC,CAAC;IACpD,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;IACpC,CAAC;CACJ,CAAA;AAvBG;IADC,mBAAQ,EAAE;IACW,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;+CAMzD;AA1BQ,gBAAgB;IAKpB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAA;qDAA0B,iCAAe;GANlG,gBAAgB,CA2C5B;AA3CY,4CAAgB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { TestDataService } from '../../services/TestDataService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport * as _ from 'lodash';\n\nexport class DataCleanCommand extends BaseCommand implements RpcCommandInterface<void> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.TestDataService) private testDataService: TestDataService\n    ) {\n        super(Commands.DATA_CLEAN);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  none\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<void>}\n     */\n    @validate()\n    public async execute(@request(RpcRequest) data: RpcRequest): Promise<void> {\n        let seed = true;\n        if (!_.isEmpty(data.params[0])) {\n            seed = data.params[0] === true;\n        }\n        return await this.testDataService.clean(seed);\n    }\n\n    public usage(): string {\n        return this.getName() + ' ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + '\\n';\n    }\n\n    public description(): string {\n        return 'Cleans database, inserts default data.';\n    }\n\n    public example(): string {\n        return 'data ' + this.getName();\n    }\n}\n"]}