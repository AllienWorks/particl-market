{"version":3,"file":"DataAddCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/data/DataAddCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,0DAAuD;AAEvD,wDAA8C;AAC9C,gDAA6C;AAC7C,yEAAsE;AACtE,oEAA+D;AAE/D,wEAAmE;AAEnE,IAAa,cAAc,GAA3B,oBAA4B,SAAQ,yBAAW;IAI3C,YACmD,MAAyB,EACD,eAAgC;QAEvG,KAAK,CAAC,0BAAQ,CAAC,QAAQ,CAAC,CAAC;QAHsB,WAAM,GAAN,MAAM,CAAmB;QACD,oBAAe,GAAf,eAAe,CAAiB;QAGvG,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;;OAQG;IAEU,OAAO,CAAuB,IAAgB,EAAE,iBAAoC;;YAC7F,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;YAC3D,MAAM,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;gBACrC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACrB,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAChC,WAAW;aACW,CAAC,CAAC;QAChC,CAAC;KAAA;IAEY,QAAQ,CAAC,IAAgB;;YAClC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACzB,MAAM,IAAI,mCAAgB,CAAC,gBAAgB,CAAC,CAAC;YACjD,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACzB,MAAM,IAAI,mCAAgB,CAAC,eAAe,CAAC,CAAC;YAChD,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,kCAAkC,CAAC;IAC/D,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,IAAI;cAClD,6FAA6F;cAC7F,oGAAoG;cACpG,4EAA4E;cAC5E,wEAAwE;cACxE,iGAAiG,CAAC;IAC5G,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,4BAA4B,CAAC;IACxC,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,oHAAoH,CAAC;IAChI,CAAC;CACJ,CAAA;AAvCG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU,EAAqB,qCAAiB;;6CAOhG;AA7BQ,cAAc;IAKlB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAA;qDAA0B,iCAAe;GANlG,cAAc,CA6D1B;AA7DY,wCAAc","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { RpcCommandFactory } from '../../factories/RpcCommandFactory';\nimport {TestDataService} from '../../services/TestDataService';\nimport {TestDataCreateRequest} from '../../requests/TestDataCreateRequest';\nimport {MessageException} from '../../exceptions/MessageException';\n\nexport class DataAddCommand extends BaseCommand implements RpcCommandInterface<any> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.TestDataService) private testDataService: TestDataService\n    ) {\n        super(Commands.DATA_ADD);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: CreatableModel, model to generate\n     *  [1]: json\n     *  [2]: withRelated, return full objects or just id's\n     *\n     * @param data\n     * @param rpcCommandFactory\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest, rpcCommandFactory: RpcCommandFactory): Promise<any> {\n        const withRelated = data.params[2] ? data.params[2] : true;\n        return await this.testDataService.create({\n            model: data.params[0],\n            data: JSON.parse(data.params[1]),\n            withRelated\n        } as TestDataCreateRequest);\n    }\n\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        if (data.params.length < 1) {\n            throw new MessageException('Missing model.');\n        }\n        if (data.params.length < 2) {\n            throw new MessageException('Missing json.');\n        }\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' <model> <json> [<withRelated>] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + '\\n'\n            + '    <model>                  - ENUM{listingitemtemplate|listingitem|profile|itemcategory \\n'\n            + '                                |favoriteitem|iteminformation|bid|paymentinformation|itemimage} \\n'\n            + '                                - The type of data we want to generate. \\n'\n            + '    <json>                   - String - json for the object to add. \\n'\n            + '    <withRelated>            - [optional] Boolean - Whether to return full objects or just id. ';\n    }\n\n    public description(): string {\n        return 'Adds data to the database.';\n    }\n\n    public example(): string {\n        return 'data add profile \\'{\"name\":\"someChangeFoundBetweenTwoCouchSeats\",\"address\":\"1EBHA1ckUWzNKN7BMfDwGTx6GKEbADUozX\"}\\'';\n    }\n}\n"]}