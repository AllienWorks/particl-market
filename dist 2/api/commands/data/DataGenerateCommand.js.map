{"version":3,"file":"DataGenerateCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/data/DataGenerateCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport * as _ from 'lodash';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { TestDataService } from '../../services/TestDataService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { TestDataGenerateRequest } from '../../requests/TestDataGenerateRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport {MessageException} from '../../exceptions/MessageException';\n\nexport class DataGenerateCommand extends BaseCommand implements RpcCommandInterface<any> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.TestDataService) private testDataService: TestDataService\n    ) {\n        super(Commands.DATA_GENERATE);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: CreatableModel, model to generate\n     *  [1]: amount\n     *  [2]: withRelated, return full objects or just id's\n     *  [3...]: generateParams\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<any>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<any> {\n        this.log.info('data.params[0]: ', data.params[0]);\n        this.log.info('data.params[1]: ', data.params[1]);\n        const generateParams = data.params.length > 3 ? _.slice(data.params, 3) : [];\n\n        return await this.testDataService.generate({\n            model: data.params[0],\n            amount: data.params[1],\n            withRelated: data.params[2],\n            generateParams\n        } as TestDataGenerateRequest);\n    }\n\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        if (data.params.length < 1) {\n            throw new MessageException('Missing model.');\n        }\n        if (data.params.length < 2) {\n            throw new MessageException('Missing json.');\n        }\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' <model> [<amount> [<withRelated>]] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + '\\n'\n            + '    <model>                  - ENUM{listingitemtemplate|listingitem|profile|itemcategory \\n'\n            + '                                |favoriteitem|iteminformation|bid|paymentinformation|itemimage} \\n'\n            + '                                - The type of data we want to generate. \\n'\n            + '    <amount>                 - [optional] Numeric - The number of objects we want to generate. \\n'\n            + '    <withRelated>            - [optional] Boolean - Whether to return full objects or just id. ';\n    }\n\n    public description(): string {\n        return 'Generates data to the database.';\n    }\n\n    public example(): string {\n        return 'data ' + this.getName() + ' profile 1 true';\n    }\n}\n"]}