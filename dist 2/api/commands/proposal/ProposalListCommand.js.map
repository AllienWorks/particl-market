{"version":3,"file":"ProposalListCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/proposal/ProposalListCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport * as _ from 'lodash';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ProposalService } from '../../services/ProposalService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { Proposal } from '../../models/Proposal';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { RpcCommandFactory } from '../../factories/RpcCommandFactory';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { ProposalSearchParams } from '../../requests/ProposalSearchParams';\nimport { SearchOrder } from '../../enums/SearchOrder';\nimport { ProposalType } from '../../enums/ProposalType';\n\nexport class ProposalListCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<Proposal>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ProposalService) public proposalService: ProposalService\n    ) {\n        super(Commands.PROPOSAL_LIST);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     * [0] startBlock | *, optional\n     * [1] endBlock | *, optional\n     * [2] type, optional\n     * [3] order, optional\n     *\n     * @param data, RpcRequest\n     * @param rpcCommandFactory, RpcCommandFactory\n     * @returns {Promise<any>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest, rpcCommandFactory: RpcCommandFactory): Promise<Bookshelf.Collection<Proposal>> {\n        const searchParams = {\n            startBlock: data.params[0],\n            endBlock: data.params[1],\n            type: data.params[2],\n            order: data.params[3]\n        } as ProposalSearchParams;\n\n        return await this.proposalService.searchBy(searchParams, true);\n    }\n\n    /**\n     *\n     * list * 100 -> return all proposals which ended before block 100\n     * list 100 * -> return all proposals ending after block 100\n     * list 100 200 -> return all which are active and closed between 100 200\n     *\n     * data.params[]:\n     * [0] startBlock | *, optional\n     * [1] endBlock | *, optional\n     * [2] order, optional\n     * [3] type, optional\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<RpcRequest>}\n     */\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n\n        let order: SearchOrder = SearchOrder.ASC;\n        let type: ProposalType;\n        let startBlock: number | string = '*';\n        let endBlock: number | string = '*';\n\n        if (!_.isEmpty(data.params)) {\n            startBlock = data.params.shift();\n            if (typeof startBlock === 'string' && startBlock !== '*') {\n                throw new MessageException('startBlock must be a number or *.');\n            }\n        }\n\n        if (!_.isEmpty(data.params)) {\n            endBlock = data.params.shift();\n            if (typeof endBlock === 'string' && endBlock !== '*') {\n                throw new MessageException('endBlock must be a number or *.');\n            }\n        }\n\n        if (!_.isEmpty(data.params)) {\n            type = data.params.shift();\n            if (type.toUpperCase() === ProposalType.ITEM_VOTE.toString()) {\n                type = ProposalType.ITEM_VOTE;\n            } else if (type.toUpperCase() === ProposalType.PUBLIC_VOTE.toString()) {\n                type = ProposalType.PUBLIC_VOTE;\n            } else {\n                // anything goes\n            }\n        } else {\n            type = ProposalType.PUBLIC_VOTE; // default\n        }\n\n        if (!_.isEmpty(data.params)) {\n            order = data.params.shift();\n            if (order.toUpperCase() === SearchOrder.DESC.toString()) {\n                order = SearchOrder.DESC;\n            } else {\n                order = SearchOrder.ASC;\n            }\n        } else {\n            order = SearchOrder.ASC; // default\n        }\n\n        data.params = [];\n        data.params[0] = startBlock;\n        data.params[1] = endBlock;\n        data.params[2] = type;\n        data.params[3] = order;\n        return data;\n    }\n\n    public help(): string {\n        return this.getName() + ' <startBlock> <endBlock> <type> <order> ';\n    }\n\n    public description(): string {\n        return 'Command for retrieving proposals. ';\n    }\n\n    public example(): string {\n        return this.getName() + ' 1 100000000 ITEM_VOTE ASC ';\n    }\n\n}\n"]}