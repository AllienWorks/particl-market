{"version":3,"file":"ProposalPostCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/proposal/ProposalPostCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from './../RpcCommandInterface';\nimport { Commands } from './../CommandEnumType';\nimport { BaseCommand } from './../BaseCommand';\nimport { RpcCommandFactory } from '../../factories/RpcCommandFactory';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { ProposalActionService } from '../../services/ProposalActionService';\nimport { ProfileService } from '../../services/ProfileService';\nimport { MarketService } from '../../services/MarketService';\nimport { ProposalType } from '../../enums/ProposalType';\nimport * as resources from 'resources';\nimport { SmsgSendResponse } from '../../responses/SmsgSendResponse';\n\nexport class ProposalPostCommand extends BaseCommand implements RpcCommandInterface<SmsgSendResponse> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ProposalActionService) public proposalActionService: ProposalActionService,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) public profileService: ProfileService,\n        @inject(Types.Service) @named(Targets.Service.MarketService) public marketService: MarketService\n    ) {\n        super(Commands.PROPOSAL_POST);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * command description\n     * [0] profileId\n     * [1] proposalTitle\n     * [2] proposalDescription\n     * [3] blockStart TODO: blockStart and blockEnd should be replaced with daysRetention\n     * [4] blockEnd\n     * [5] estimateFee\n     * [6] option1Description\n     * [n...] optionNDescription\n     *\n     * @param data, RpcRequest\n     * @param rpcCommandFactory, RpcCommandFactory\n     * @returns {Promise<any>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest, rpcCommandFactory: RpcCommandFactory): Promise<SmsgSendResponse> {\n\n        // todo add validation in separate function..\n        if (data.params.length < 8) {\n            throw new MessageException('Expected more params.');\n        }\n\n        const type = ProposalType.PUBLIC_VOTE;\n        const profileId = data.params.shift();\n        const proposalTitle = data.params.shift();\n        const proposalDescription = data.params.shift();\n        const blockStart = data.params.shift();\n        const blockEnd = data.params.shift();\n        const estimateFee = data.params.shift();\n\n        if (typeof profileId !== 'number') {\n            throw new MessageException('profileId needs to be a number.');\n        } else if (typeof blockStart !== 'number') {\n            throw new MessageException('blockStart needs to be a number.');\n        } else if (typeof blockEnd !== 'number') {\n            throw new MessageException('blockEnd needs to be a number.');\n        } else if (typeof estimateFee !== 'boolean') {\n            throw new MessageException('estimateFee needs to be a boolean.');\n        }\n\n        let profile: resources.Profile;\n        try {\n            const profileModel = await this.profileService.findOne(profileId);\n            profile = profileModel.toJSON();\n        } catch ( ex ) {\n            this.log.error(ex);\n            throw new MessageException('Profile not found.');\n        }\n\n        // Get the default market.\n        // TODO: Might want to let users specify this later.\n        let market: resources.Market;\n        const marketModel = await this.marketService.getDefault();\n        if (!marketModel) {\n            throw new MessageException(`Default market doesn't exist!`);\n        }\n        market = marketModel.toJSON();\n\n        // rest of the data.params are option descriptions\n        const optionsList: string[] = data.params;\n\n        // todo: get rid of the blocks\n        const daysRetention = Math.ceil((blockEnd - blockStart) / (24 * 30));\n        return await this.proposalActionService.send(proposalTitle, proposalDescription, blockStart, blockEnd,\n            daysRetention, optionsList, profile, market, null, estimateFee);\n    }\n\n    public usage(): string {\n        return this.getName() + ' <profileId> <proposalTitle> <proposalDescription> <blockStart> <blockEnd> <estimateFee> '\n            + '<option1Description> ... <optionNDescription> ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <profileId>              - number, ID of the Profile. \\n'\n            + '    <proposalTitle>          - string, Title for the Proposal. \\n'\n            + '    <proposalDescription>    - string, Description for the Proposal. \\n'\n            + '    <blockStart>             - number, Start Block for the Voting. \\n'\n            + '    <blockEnd>               - number, End Block for the Voting. \\n'\n            + '    <estimateFee>            - boolean, Just estimate the Fee, dont post the Proposal. \\n'\n            + '    <optionNDescription>     - string, ProposalOption description. ';\n    }\n\n    public description(): string {\n        return ' Post a proposal.';\n    }\n\n    public example(): string {\n        return this.getName() + ' proposal post 1 \"A question of sets\" \"The set of all sets contains itself?\" 0 1000000 YES NO';\n    }\n}\n"]}