{"version":3,"file":"ProposalGetCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/proposal/ProposalGetCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,oEAAiE;AACjE,0DAAuD;AAGvD,0DAAgD;AAChD,kDAA+C;AAC/C,yEAAsE;AACtE,wEAAqE;AAIrE,IAAa,kBAAkB,GAA/B,wBAAgC,SAAQ,yBAAW;IAI/C,YACmD,MAAyB,EACF,eAAgC;QAEtG,KAAK,CAAC,0BAAQ,CAAC,YAAY,CAAC,CAAC;QAHkB,WAAM,GAAN,MAAM,CAAmB;QACF,oBAAe,GAAf,eAAe,CAAiB;QAGtG,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;OAOG;IAEU,OAAO,CAAuB,IAAgB,EAAE,iBAAoC;;YAC7F,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QACxE,CAAC;KAAA;IAEY,QAAQ,CAAC,IAAgB;;YAClC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACzB,MAAM,IAAI,mCAAgB,CAAC,+CAA+C,CAAC,CAAC;YAChF,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;KAAA;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,8BAA8B,CAAC;IAC1C,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,oEAAoE,CAAC;IACjG,CAAC;CACJ,CAAA;AAvBG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU,EAAqB,qCAAiB;;iDAGhG;AAxBQ,kBAAkB;IAKtB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAA;qDAAyB,iCAAe;GANjG,kBAAkB,CA4C9B;AA5CY,gDAAkB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ProposalService } from '../../services/ProposalService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { Proposal } from '../../models/Proposal';\nimport { RpcCommandInterface } from './../RpcCommandInterface';\nimport { Commands } from './../CommandEnumType';\nimport { BaseCommand } from './../BaseCommand';\nimport { RpcCommandFactory } from '../../factories/RpcCommandFactory';\nimport { MessageException } from '../../exceptions/MessageException';\nimport {SearchOrder} from '../../enums/SearchOrder';\nimport {ProposalType} from '../../enums/ProposalType';\n\nexport class ProposalGetCommand extends BaseCommand implements RpcCommandInterface<Proposal> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ProposalService) public proposalService: ProposalService\n    ) {\n        super(Commands.PROPOSAL_GET);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * command description\n     * [0] proposalHash\n     *\n     * @param data, RpcRequest\n     * @param rpcCommandFactory, RpcCommandFactory\n     * @returns {Promise<any>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest, rpcCommandFactory: RpcCommandFactory): Promise<Proposal> {\n        const proposalHash = data.params[0];\n        return await this.proposalService.findOneByHash(proposalHash, true);\n    }\n\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        if (data.params.length < 1) {\n            throw new MessageException('Expected proposalHash but received no params.');\n        }\n        return data;\n    }\n\n    public help(): string {\n        return this.getName() + ' <proposalHash> ';\n    }\n\n    public description(): string {\n        return 'Get a proposal by its hash. ';\n    }\n\n    public example(): string {\n        return this.getName() + ' 392fc0687405099ad71319686aa421b65e262f10f9c2caed181ae81d23d52236 ';\n    }\n}\n"]}