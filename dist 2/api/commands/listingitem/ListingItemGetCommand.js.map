{"version":3,"file":"ListingItemGetCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/listingitem/ListingItemGetCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,0EAAuE;AACvE,0DAAuD;AAGvD,wDAA6C;AAC7C,gDAA6C;AAE7C,IAAa,qBAAqB,GAAlC,2BAAmC,SAAQ,yBAAW;IAIlD,YACmD,MAAyB,EACC,kBAAsC;QAE/G,KAAK,CAAC,0BAAQ,CAAC,QAAQ,CAAC,CAAC;QAHsB,WAAM,GAAN,MAAM,CAAmB;QACC,uBAAkB,GAAlB,kBAAkB,CAAoB;QAG/G,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;;OAQG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,IAAI,WAAW,CAAC;YAEhB,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACrC,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACxE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9E,CAAC;YACD,MAAM,CAAC,WAAW,CAAC;QACvB,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,4BAA4B,CAAC;IACzD,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,wGAAwG;cACxG,uGAAuG,CAAC;IAClH,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,+CAA+C,CAAC;IAC3D,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,uCAAuC,CAAC;IAC9E,CAAC;CACJ,CAAA;AA5BG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;oDAS1D;AA/BQ,qBAAqB;IAKzB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;qDAA4B,uCAAkB;GAN1G,qBAAqB,CAkDjC;AAlDY,sDAAqB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ListingItemService } from '../../services/ListingItemService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ListingItem } from '../../models/ListingItem';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\n\nexport class ListingItemGetCommand extends BaseCommand implements RpcCommandInterface<ListingItem> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) public listingItemService: ListingItemService\n    ) {\n        super(Commands.ITEM_GET);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: id or hash\n     *\n     * when data.params[0] is number then findById, else findOneByHash\n     *\n     * @param data\n     * @returns {Promise<ListingItem>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<ListingItem> {\n        let listingItem;\n\n        if (typeof data.params[0] === 'number') {\n            listingItem = await this.listingItemService.findOne(data.params[0]);\n        } else {\n            listingItem = await this.listingItemService.findOneByHash(data.params[0]);\n        }\n        return listingItem;\n    }\n\n    public usage(): string {\n        return this.getName() + ' [<listingItemId>|<hash>] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <listingItemId>          - [optional] Numeric - The ID of the listing item we want to retrieve. \\n'\n            + '    <hash>                   - [optional] String - The hash of the listing item we want to retrieve. ';\n    }\n\n    public description(): string {\n        return 'Get a listing item via listingItemId or hash.';\n    }\n\n    public example(): string {\n        return 'item ' + this.getName() + ' b90cee25-036b-4dca-8b17-0187ff325dbb';\n    }\n}\n"]}