{"version":3,"file":"ListingItemFlagCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/listingitem/ListingItemFlagCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ListingItemService } from '../../services/ListingItemService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { SmsgSendResponse } from '../../responses/SmsgSendResponse';\nimport * as resources from 'resources';\nimport { ProposalType } from '../../enums/ProposalType';\nimport { ListingItem } from '../../models/ListingItem';\nimport { ProfileService } from '../../services/ProfileService';\nimport { MarketService } from '../../services/MarketService';\nimport { ProposalActionService } from '../../services/ProposalActionService';\nimport { CoreRpcService } from '../../services/CoreRpcService';\nimport { ListingItemActionService } from '../../services/ListingItemActionService';\nimport { ItemVote } from '../../enums/ItemVote';\nimport { ProposalFactory } from '../../factories/ProposalFactory';\nimport * as _ from 'lodash';\n\nexport class ListingItemFlagCommand extends BaseCommand implements RpcCommandInterface<SmsgSendResponse> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) public listingItemService: ListingItemService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemActionService) public listingItemActionService: ListingItemActionService,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) public profileService: ProfileService,\n        @inject(Types.Service) @named(Targets.Service.MarketService) public marketService: MarketService,\n        @inject(Types.Service) @named(Targets.Service.CoreRpcService) public coreRpcService: CoreRpcService,\n        @inject(Types.Service) @named(Targets.Service.ProposalActionService) public proposalActionService: ProposalActionService,\n        @inject(Types.Factory) @named(Targets.Factory.ProposalFactory) private proposalFactory: ProposalFactory\n    ) {\n        super(Commands.ITEM_FLAG);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: listingItemHash\n     *  [1]: profileId\n     *  [2]: reason, optional\n     *  [3]: expiryTime (from listingitem, set in validate)\n     *\n     * when data.params[0] is number then findById, else findOneByHash\n     *\n     * @param data\n     * @returns {Promise<SmsgSendResponse>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<SmsgSendResponse> {\n\n        const listingItemHash = data.params.shift();\n        const profileId = data.params.shift();\n        const proposalDescription = data.params.shift();\n        const daysRetention = data.params.shift();  // not perfect, but more than needed\n\n        const optionsList: string[] = [ItemVote.KEEP, ItemVote.REMOVE];\n        const proposalTitle = listingItemHash;\n\n        // TODO: refactor these to startTime and endTime\n        // TODO: When we're expiring by time not block make this listingItem.ExpiryTime();\n        const blockStart: number = await this.coreRpcService.getBlockCount();\n        const blockEnd: number = blockStart + (daysRetention * 24 * 30);\n\n        if (typeof blockStart !== 'number') {\n            throw new MessageException('blockStart needs to be a number.');\n        } else if (typeof blockEnd !== 'number') {\n            throw new MessageException('blockEnd needs to be a number.');\n        }\n\n        const profileModel = await this.profileService.findOne(profileId) // throws if not found\n            .catch(reason => {\n                this.log.error('ERROR:', reason);\n                throw new MessageException('Profile not found.');\n            });\n        const profile: resources.Profile = profileModel.toJSON();\n\n        // Get the default market.\n        // TODO: We might want to let users specify this later.\n        const marketModel = await this.marketService.getDefault(); // throws if not found\n        const market: resources.Market = marketModel.toJSON();\n\n        return await this.proposalActionService.send(\n            proposalTitle,\n            proposalDescription,\n            blockStart,\n            blockEnd,\n            daysRetention,\n            optionsList,\n            profile,\n            market,\n            listingItemHash,\n            false\n        );\n\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: listingItemHash\n     *  [1]: profileId\n     *  [2]: reason, optional\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<RpcRequest>}\n     */\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n\n        if (data.params.length < 1) {\n            throw new MessageException('Missing listingItemHash.');\n        }\n        if (data.params.length < 2) {\n            throw new MessageException('Missing profileId.');\n        }\n\n        let listingItemModel: ListingItem;\n        if (typeof data.params[0] === 'number') {\n            throw new MessageException('Invalid listingItemHash.');\n        } else {\n            listingItemModel = await this.listingItemService.findOneByHash(data.params[0])\n                .catch(reason => {\n                    throw new MessageException('ListingItem not found.');\n                });\n        }\n        const listingItem: resources.ListingItem = listingItemModel.toJSON();\n\n        // check if item is already flagged\n        if (!_.isEmpty(listingItem.FlaggedItem)) {\n            throw new MessageException('Item is already flagged.');\n        }\n\n        // hash is what we need in execute()\n        data.params[0] = listingItem.hash;  // set to hash\n\n        if (typeof data.params[1] !== 'number') {\n            throw new MessageException('profileId needs to be a number.');\n        } else {\n            // make sure profile with the id exists\n            await this.profileService.findOne(data.params[1])    // throws if not found\n                .catch(reason => {\n                    this.log.error(reason);\n                    throw new MessageException('Profile not found.');\n                });\n        }\n\n        data.params[2] = data.params.length === 3 ? data.params[2] : 'This ListingItem should be removed.';\n        data.params[3] = listingItem.expiryTime;\n\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' [<listingItemHash>] <profileId> ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <listingItemHash>  - String - The hash of the ListingItem we want to report. \\n'\n            + '    <profileId>        - Numeric - The ID of the Profile reporting the item.';\n    }\n\n    public description(): string {\n        return 'Report a ListingItem.';\n    }\n}\n"]}