{"version":3,"file":"ListingItemSearchCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/listingitem/ListingItemSearchCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ListingItemService } from '../../services/ListingItemService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ListingItem } from '../../models/ListingItem';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { ListingItemSearchParams } from '../../requests/ListingItemSearchParams';\nimport { ListingItemSearchType } from '../../enums/ListingItemSearchType';\nimport { ShippingCountries } from '../../../core/helpers/ShippingCountries';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { MessageException } from '../../exceptions/MessageException';\n\nexport class ListingItemSearchCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<ListingItem>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) public listingItemService: ListingItemService\n    ) {\n        super(Commands.ITEM_SEARCH);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: page, number, 0-based\n     *  [1]: pageLimit, number\n     *  [2]: order, SearchOrder\n     *  [3]: category, number|string, if string, try to find using key, can be null\n     *  [4]: type (FLAGGED | PENDING | LISTED | IN_ESCROW | SHIPPED | SOLD | EXPIRED | ALL)\n     *  [5]: profileId, (NUMBER | OWN | ALL | *)\n     *  [6]: minPrice, number to search item basePrice between 2 range\n     *  [7]: maxPrice, number to search item basePrice between 2 range\n     *  [8]: country, string, can be null\n     *  [9]: shippingDestination, string, can be null\n     *  [10]: searchString, string, can be null\n     *  [11]: withRelated, boolean\n     *\n     * @param data\n     * @returns {Promise<ListingItem>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Bookshelf.Collection<ListingItem>> {\n        const type = data.params[4] || 'ALL';\n        const profileId = data.params[5] || 'ALL';\n\n        // check valid search type\n        if (!ListingItemSearchType[type]) {\n            throw new MessageException('Type should be FLAGGED | PENDING | LISTED | IN_ESCROW | SHIPPED | SOLD | EXPIRED | ALL');\n        }\n\n        // check valid profile profileId search params\n        if (typeof profileId !== 'number' && profileId !== 'OWN' && profileId !== 'ALL' && profileId !== '*') {\n            throw new MessageException('Value needs to be number | OWN | ALL. you could pass * as all too');\n        }\n\n        let countryCode: string | null = null;\n        if (data.params[8]) {\n            countryCode = ShippingCountries.validate(this.log, data.params[8]);\n        }\n\n        let shippingCountryCode: string | null = null;\n        if (data.params[9]) {\n            shippingCountryCode = ShippingCountries.validate(this.log, data.params[9]);\n        }\n\n        // TODO: this type search does not really make sense\n        // TODO: searching for items that youre buying or selling should be done with bid or orderitem search\n        // TODO: ...so remove type\n        return await this.listingItemService.search({\n            page: data.params[0] || 0,\n            pageLimit: data.params[1] || 10, // default page limit 10\n            order: data.params[2] || 'ASC',\n            category: data.params[3],\n            type,\n            profileId,\n            minPrice: data.params[6],\n            maxPrice: data.params[7],\n            country: countryCode,\n            shippingDestination: shippingCountryCode,\n            searchString: data.params[10] || ''\n        } as ListingItemSearchParams, data.params[11]);\n    }\n\n    // tslint:disable:max-line-length\n    public usage(): string {\n        return this.getName() + ' [<page> [<pageLimit> [<ordering> ' +\n        '[(<categoryId> | <categoryName>)[ <type> [(<profileId>| OWN | ALL) [<minPrice> [ <maxPrice> [ <country> [ <shippingDestination> [<searchString>]]]]]]]]]]';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <page>                   - [optional] Numeric - The number page we want to \\n'\n            + '                                view of search listing item results. \\n'\n            + '    <pageLimit>              - [optional] Numeric - The number of results per page. \\n'\n            + '    <ordering>               - [optional] ENUM{ASC,DESC} - The ordering of the search results. \\n'\n            + '    <categoryId>             - [optional] Numeric - The ID identifying the category associated \\n'\n            + '                                with the listing items we want to search for. \\n'\n            + '    <categoryName>           - [optional] String - The key identifying the category associated \\n'\n            + '                                with the listing items we want to search for. \\n'\n            + '    <type>                  -  ENUM{FLAGGED | PENDING | LISTED | IN_ESCROW | SHIPPED | SOLD | EXPIRED | ALL} \\n'\n            + '                                 FLAGGED = ListingItems you have flagged \\n'\n            + '                                 PENDING = ListingItemTemplates posted to marketplace\\n'\n            + '                                           but not yet received as ListingItem \\n'\n            + '                                 IN_ESCROW = ListingItems that are escrow \\n'\n            + '                                 SHIPPED = ListingItems that have been shipped \\n'\n            + '                                 SOLD = ListingItems that have been sold \\n'\n            + '                                 EXPIRED = ListingItems that have been expired \\n'\n            + '                                 ALL = all items\\n'\n            + '    <profileId>             -  (NUMBER | OWN | ALL | *) \\n'\n            + '                                 NUMBER - ListingItems belonging to profileId \\n'\n            + '                                 OWN - ListingItems belonging to any profile \\n'\n            + '                                 ALL / * - ALL ListingItems\\n'\n            + '    <minPrice>               - [optional] Numeric - The minimum price of the listing item price \\n'\n            + '                                we want to search for between basePrice range. \\n'\n            + '    <maxPrice>               - [optional] Numeric - The maximum price of the listing item price \\n'\n            + '                                we want to search for between basePrice range. \\n'\n            + '    <country>                - [optional] String - The country of the listing item \\n'\n            + '                                we want to search for. \\n'\n            + '    <shippingDestination>    - [optional] String - The shipping destination of the listing item \\n'\n            + '                                we want to search for. \\n'\n            + '    <searchString>           - [optional] String - A string that is used to \\n'\n            + '                                find listing items by their titles. \\n'\n            + '    <withRelated>            - [optional] Boolean - Whether to include related data or not (default: true). ';\n    }\n\n    // tslint:enable:max-line-length\n\n    public description(): string {\n        return 'Search listing items with pagination by category id or'\n            + ' category name or by profileId, or by listing item price'\n            + ' min and max price range, or by country or shipping destination.';\n    }\n\n    public example(): string {\n        return 'item ' + this.getName() + ' 1 10 ASC 76 1 100 200 Australia China wine';\n    }\n\n}\n"]}