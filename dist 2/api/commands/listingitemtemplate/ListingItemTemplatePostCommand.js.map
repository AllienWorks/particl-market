{"version":3,"file":"ListingItemTemplatePostCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/listingitemtemplate/ListingItemTemplatePostCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { ListingItemTemplatePostRequest } from '../../requests/ListingItemTemplatePostRequest';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { SmsgSendResponse } from '../../responses/SmsgSendResponse';\nimport { ListingItemActionService } from '../../services/ListingItemActionService';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { MarketService } from '../../services/MarketService';\nimport { ListingItemTemplateService } from '../../services/ListingItemTemplateService';\n\nexport class ListingItemTemplatePostCommand extends BaseCommand implements RpcCommandInterface<SmsgSendResponse> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ListingItemActionService) public listingItemActionService: ListingItemActionService,\n        @inject(Types.Service) @named(Targets.Service.MarketService) public marketService: MarketService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) public listingItemTemplateService: ListingItemTemplateService\n    ) {\n        super(Commands.TEMPLATE_POST);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * posts a ListingItem to the network based on ListingItemTemplate\n     *\n     * data.params[]:\n     *  [0]: listingItemTemplateId\n     *  [1]: daysRetention\n     *  [2]: marketId\n     *\n     * @param data\n     * @returns {Promise<ListingItemTemplate>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<SmsgSendResponse> {\n\n        const listingItemTemplateId: number = data.params[0];\n        const daysRetention: number = data.params[1] || parseInt(process.env.PAID_MESSAGE_RETENTION_DAYS, 10);\n        const marketId = data.params[2] || undefined;\n\n        const postRequest = {\n            listingItemTemplateId,\n            daysRetention,\n            marketId\n        } as ListingItemTemplatePostRequest;\n\n        const response = await this.listingItemActionService.post(postRequest);\n\n        this.log.debug('ListingItemTemplatePostCommand.post, response: ', response);\n        return response;\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: listingItemTemplateId\n     *  [1]: daysRetention\n     *  [2]: marketId\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<RpcRequest>}\n     */\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n\n        if (data.params.length < 1) {\n            throw new MessageException('Missing listingItemTemplateId.');\n        }\n\n        if (data.params.length < 2) {\n            throw new MessageException('Missing daysRetention.');\n        }\n\n        if (data.params.length < 3) {\n            throw new MessageException('Missing marketId.');\n        }\n\n        const listingItemTemplateId = data.params[0];\n        const daysRetention = data.params[1];\n        const marketId = data.params[2];\n\n        if (listingItemTemplateId && typeof listingItemTemplateId !== 'number') {\n            throw new MessageException('listingItemTemplateId should be a number.');\n        } else {\n            // make sure template with the id exists\n            await this.listingItemTemplateService.findOne(listingItemTemplateId);   // throws if not found\n        }\n\n        if (daysRetention && typeof daysRetention !== 'number') {\n            throw new MessageException('daysRetention should be a number.');\n        }\n\n        if (marketId && typeof marketId !== 'number') {\n            throw new MessageException('marketId should be a number.');\n        } else {\n            // make sure market with the id exists\n            await this.marketService.findOne(marketId);   // throws if not found\n        }\n\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' <listingTemplateId> [daysRetention] [marketId] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <listingTemplateId>           - Number - The ID of the listing item template that we want to post. \\n'\n            + '    <daysRetention>               - [optional] Number - Days the listing will be retained by network.\\n'\n            + '    <marketId>                    - [optional] Number - Market id. ';\n    }\n\n    public description(): string {\n        return 'Post the ListingItemTemplate to the Marketplace.';\n    }\n\n    public example(): string {\n        return 'template ' + this.getName() + ' 1 1';\n    }\n}\n"]}