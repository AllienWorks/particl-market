{"version":3,"file":"ListingItemTemplateAddCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/listingitemtemplate/ListingItemTemplateAddCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ListingItemTemplateService } from '../../services/ListingItemTemplateService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ListingItemTemplateCreateRequest } from '../../requests/ListingItemTemplateCreateRequest';\nimport { ListingItemTemplate } from '../../models/ListingItemTemplate';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { CryptocurrencyAddressType } from '../../enums/CryptocurrencyAddressType';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { MessageException } from '../../exceptions/MessageException';\n\nexport class ListingItemTemplateAddCommand extends BaseCommand implements RpcCommandInterface<ListingItemTemplate> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) private listingItemTemplateService: ListingItemTemplateService\n    ) {\n        super(Commands.TEMPLATE_ADD);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: profile_id\n     *\n     *  itemInformation\n     *  [1]: title\n     *  [2]: short description\n     *  [3]: long description\n     *  [4]: category id\n     *\n     *  paymentInformation\n     *  [5]: payment type\n     *  [6]: currency\n     *  [7]: base price\n     *  [8]: domestic shipping price\n     *  [9]: international shipping price\n     *  [10]: payment address (optional)\n     *\n     * @param data\n     * @returns {Promise<ListingItemTemplate>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<ListingItemTemplate> {\n\n        if (data.params.length >= 9) {\n\n            let cryptocurrencyAddress;\n\n            if (data.params[10]) {\n                cryptocurrencyAddress = {\n                    type: CryptocurrencyAddressType.NORMAL,\n                    address: data.params[10]\n                };\n            }\n\n            const body = {\n                profile_id: data.params[0],\n                itemInformation: {\n                    title: data.params[1],\n                    shortDescription: data.params[2],\n                    longDescription: data.params[3],\n                    itemCategory: {\n                        id: data.params[4]\n                    }\n                },\n                paymentInformation: {\n                    type: data.params[5],\n                    itemPrice: {\n                        currency: data.params[6],\n                        basePrice: data.params[7],\n                        shippingPrice: {\n                            domestic: data.params[8],\n                            international: data.params[9]\n                        },\n                        cryptocurrencyAddress\n                    }\n                }\n            } as ListingItemTemplateCreateRequest;\n\n            return await this.listingItemTemplateService.create(body);\n        } else {\n            throw new MessageException('Not enough params.');\n        }\n    }\n\n    public usage(): string {\n        return this.getName() + ' <profileId> <title> <shortDescription> <longDescription> <categoryId>'\n            + ' <paymentType> <currency> <basePrice> <domesticShippingPrice> <internationalShippingPrice> [<paymentAddress>] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <profileId>                   - Numeric - The ID of the profile to associate this \\n'\n            + '                                     item listing template with. \\n'\n            + '    <title>                       - String - The default title to associate with \\n'\n            + '                                     the listing item template we\\'re creating. \\n'\n            + '    <shortDescription>            - String - A short default description for the \\n'\n            + '                                     listing item template we are creating. \\n'\n            + '    <longDescription>             - String - A longer default description for the \\n'\n            + '                                     listing item template we are creating. \\n'\n            + '    <categoryId>                - Numeric - The identifier id of the default \\n'\n            + '                                     category we want to use with the item listing \\n'\n            + '                                     template we\\'re creating. \\n'\n            + '    <paymentType>                 - String - Whether the item listing template is by \\n'\n            + '                                     default for free items or items for sale. \\n'\n            + '    <currency>                    - String - The default currency for use with the \\n'\n            + '                                     item template we\\'re creating. \\n'\n            + '    <basePrice>                   - Numeric - The base price for the item template \\n'\n            + '                                     we\\'re creating. \\n'\n            + '    <domesticShippingPrice>       - Numeric - The default domestic shipping price to \\n'\n            + '                                     for the item listing template we\\'re creating. \\n'\n            + '    <internationalShippingPrice>  - Numeric - The default international shipping \\n'\n            + '                                     price for the item listing template we\\'re \\n'\n            + '                                     creating. \\n'\n            + '    <paymentAddress>              - [optional]String - The default cryptocurrency address for \\n'\n            + '                                     recieving funds to associate with the listing \\n'\n            + '                                     item template we\\'re creating. ';\n    }\n\n    public description(): string {\n        return 'Add a new listing item template associate it with a profile.';\n    }\n\n    public example(): string {\n        return 'template ' + this.getName() + ' 1'\n        + ' \\'The Communist Manifesto\\''\n        + ' \\'Fight capitalism by buying this book!\\''\n        + ' \\'Impress all your hippest comrades by attending your next communist revolutionary Starbucks meeting with the original'\n        + ' and best book on destroying your economy!\\''\n        + ' 16 SALE BITCOIN 0.1848 0.1922 0.1945 396tyYFbHxgJcf3kSrSdugp6g4tctUP3ay ';\n    }\n}\n"]}