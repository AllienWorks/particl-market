{"version":3,"file":"ListingItemTemplateSearchCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/listingitemtemplate/ListingItemTemplateSearchCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,0FAAuF;AACvF,0DAAuD;AAIvD,wDAA8C;AAC9C,gDAA6C;AAC7C,wEAAmE;AAEnE,IAAa,gCAAgC,GAA7C,sCAA8C,SAAQ,yBAAW;IAI7D,YACmD,MAAyB,EACU,0BAAsD;QAExI,KAAK,CAAC,0BAAQ,CAAC,eAAe,CAAC,CAAC;QAHe,WAAM,GAAN,MAAM,CAAmB;QACU,+BAA0B,GAA1B,0BAA0B,CAA4B;QAGxI,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;;;;;OAWG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,MAAM,CAAC,MAAM,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC;gBAChD,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;gBACzB,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE;gBAC/B,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,KAAK;gBAC9B,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzB,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACxB,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE;aACF,CAAC,CAAC;QAC1C,CAAC;KAAA;IAEY,QAAQ,CAAC,IAAgB;;YAClC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACzB,MAAM,IAAI,mCAAgB,CAAC,qBAAqB,CAAC,CAAC;YACtD,CAAC;YACD,QAAQ;YACR,oBAAoB;YACpB,oBAAoB;YACpB,qBAAqB;YACrB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,4EAA4E,CAAC;IACzG,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,uFAAuF;cACvF,mEAAmE;cACnE,6EAA6E;cAC7E,kFAAkF;cAClF,8FAA8F;cAC9F,qEAAqE;cACrE,wFAAwF;cACxF,0FAA0F;cAC1F,gDAAgD;cAChD,2FAA2F;cAC3F,mEAAmE,CAAC;IAC9E,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,wDAAwD;cAC7D,mGAAmG,CAAC;IAC1G,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,iCAAiC,CAAC;IAC5E,CAAC;CACJ,CAAA;AAjDG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;+DAS1D;AAlCQ,gCAAgC;IAKpC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAA;qDAAqC,uDAA0B;GANnI,gCAAgC,CA0E5C;AA1EY,4EAAgC","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ListingItemTemplateService } from '../../services/ListingItemTemplateService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ListingItemTemplate } from '../../models/ListingItemTemplate';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { ListingItemTemplateSearchParams } from '../../requests/ListingItemTemplateSearchParams';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport {MessageException} from '../../exceptions/MessageException';\n\nexport class ListingItemTemplateSearchCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<ListingItemTemplate>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) private listingItemTemplateService: ListingItemTemplateService\n    ) {\n        super(Commands.TEMPLATE_SEARCH);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: page, number, 0-based\n     *  [1]: pageLimit, number\n     *  [2]: order, SearchOrder\n     *  [3]: profile id\n     *  [4]: category, number|string, if string, try to search using key, optional\n     *  [5]: searchString, string, optional\n     *\n     * @param data\n     * @returns {Promise<ListingItemTemplate>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Bookshelf.Collection<ListingItemTemplate>> {\n        return await this.listingItemTemplateService.search({\n            page: data.params[0] || 0,\n            pageLimit: data.params[1] || 10,\n            order: data.params[2] || 'ASC',\n            profileId: data.params[3],\n            category: data.params[4],\n            searchString: data.params[5] || ''\n        } as ListingItemTemplateSearchParams);\n    }\n\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        if (data.params.length < 4) {\n            throw new MessageException('Missing parameters.');\n        }\n        // TODO:\n        // - is order valid?\n        // - profile exists?\n        // - category exists?\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' <page> <pageLimit> <order> <profileId> [<categoryName> [<searchString>]] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <page>                   - Numeric - The number page we want to view of search \\n'\n            + '                                listing item template results. \\n'\n            + '    <pageLimit>              - Numeric - The number of results per page. \\n'\n            + '    <order>                  - ENUM{ASC} - The order of the returned results. \\n'\n            + '    <profileId>              - Numeric - The ID of the profile linked to the listing item \\n'\n            + '                                templates we want to search for. \\n'\n            + '    <categoryName>           - [optional] String - The key identifying the category \\n'\n            + '                                associated with the listing item templates we want to \\n'\n            + '                                search for. \\n'\n            + '    <searchString>           - [optional] String - A string that is used to search for \\n'\n            + '                                listing item templats via title. ';\n    }\n\n    public description(): string {\n        return 'Search listing items with pagination by category id or'\n        + ' category name or by profileId, or by perticular searchString matched with itemInformation title.';\n    }\n\n    public example(): string {\n        return 'template ' + this.getName() + ' 1 10 ASC 1 74 \\'pet exorcism\\'';\n    }\n}\n"]}