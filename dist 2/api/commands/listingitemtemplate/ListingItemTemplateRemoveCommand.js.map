{"version":3,"file":"ListingItemTemplateRemoveCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/listingitemtemplate/ListingItemTemplateRemoveCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,0FAAuF;AACvF,0DAAuD;AAEvD,wDAA8C;AAC9C,gDAA6C;AAC7C,4BAA4B;AAC5B,wEAAqE;AAErE,IAAa,gCAAgC,GAA7C,sCAA8C,SAAQ,yBAAW;IAI7D,YACmD,MAAyB,EACS,0BAAsD;QAEvI,KAAK,CAAC,0BAAQ,CAAC,eAAe,CAAC,CAAC;QAHe,WAAM,GAAN,MAAM,CAAmB;QACS,+BAA0B,GAA1B,0BAA0B,CAA4B;QAGvI,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;OAKG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,8EAA8E;YAC9E,MAAM,wBAAwB,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/F,MAAM,mBAAmB,GAAG,wBAAwB,CAAC,MAAM,EAAE,CAAC;YAE9D,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,mBAAmB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACpD,iGAAiG;YACjG,gHAAgH;YAEhH,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBAC/C,MAAM,IAAI,mCAAgB,CAAC,oEAAoE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACrH,CAAC;YACD,MAAM,CAAC,MAAM,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACzE,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,uBAAuB,CAAC;IACpD,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,8FAA8F;cAC9F,wDAAwD,CAAC;IACnE,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,iIAAiI,CAAC;IAC7I,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;IAC/C,CAAC;CACJ,CAAA;AAhCG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;+DAa1D;AAhCQ,gCAAgC;IAKpC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAA;qDAAoC,uDAA0B;GANlI,gCAAgC,CAmD5C;AAnDY,4EAAgC","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ListingItemTemplateService } from '../../services/ListingItemTemplateService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport * as _ from 'lodash';\nimport { MessageException } from '../../exceptions/MessageException';\n\nexport class ListingItemTemplateRemoveCommand extends BaseCommand implements RpcCommandInterface<void> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) public listingItemTemplateService: ListingItemTemplateService\n    ) {\n        super(Commands.TEMPLATE_REMOVE);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: ListingItemTemplate.id\n     * @param data\n     * @returns {Promise<ListingItemTemplate>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<void> {\n        // check and find that listingItemTemplate is not related with any listingItem\n        const listingItemTemplateModel = await this.listingItemTemplateService.findOne(data.params[0]);\n        const listingItemTemplate = listingItemTemplateModel.toJSON();\n\n        this.log.debug('remove template: ', data.params[0]);\n        // this.log.debug('listingItemTemplate.ListingItems: ', listingItemTemplate.ListingItems.length);\n        // this.log.debug('_.isEmpty(listingItemTemplate.ListingItems): ', _.isEmpty(listingItemTemplate.ListingItems));\n\n        if (!_.isEmpty(listingItemTemplate.ListingItems)) {\n            throw new MessageException(`ListingItemTemplate has ListingItems, so it can't be deleted. id=${data.params[0]}`);\n        }\n        return await this.listingItemTemplateService.destroy(data.params[0]);\n    }\n\n    public usage(): string {\n        return this.getName() + ' <listingTemplateId> ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <listingTemplateId>           - Numeric - The ID of the listing item template that we \\n'\n            + '                                     want to destroy. ';\n    }\n\n    public description(): string {\n        return 'Destroy a listing item template specified by the ID of the listing item template and it will destroy all its relations as well.';\n    }\n\n    public example(): string {\n        return 'template ' + this.getName() + ' 1';\n    }\n}\n"]}