{"version":3,"file":"ListingItemTemplateGetCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/listingitemtemplate/ListingItemTemplateGetCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,0FAAuF;AACvF,0DAAuD;AAGvD,wDAA6C;AAC7C,gDAA6C;AAE7C,IAAa,6BAA6B,GAA1C,mCAA2C,SAAQ,yBAAW;IAI1D,YACmD,MAAyB,EACU,0BAAsD;QAExI,KAAK,CAAC,0BAAQ,CAAC,YAAY,CAAC,CAAC;QAHkB,WAAM,GAAN,MAAM,CAAmB;QACU,+BAA0B,GAA1B,0BAA0B,CAA4B;QAGxI,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;;OAQG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,IAAI,mBAAmB,CAAC;YAExB,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACrC,mBAAmB,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACxF,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,mBAAmB,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9F,CAAC;YACD,MAAM,CAAC,mBAAmB,CAAC;QAC/B,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,uBAAuB,CAAC;IACpD,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,8FAA8F;cAC9F,yDAAyD,CAAC;IACpE,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,sDAAsD,CAAC;IAClE,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;IAC/C,CAAC;CACJ,CAAA;AA5BG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;4DAS1D;AA/BQ,6BAA6B;IAKjC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAA;qDAAqC,uDAA0B;GANnI,6BAA6B,CAkDzC;AAlDY,sEAA6B","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ListingItemTemplateService } from '../../services/ListingItemTemplateService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ListingItemTemplate } from '../../models/ListingItemTemplate';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\n\nexport class ListingItemTemplateGetCommand extends BaseCommand implements RpcCommandInterface<ListingItemTemplate> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) private listingItemTemplateService: ListingItemTemplateService\n    ) {\n        super(Commands.TEMPLATE_GET);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: id or hash\n     *\n     * when data.params[0] is number then findById, else findOneByHash\n     *\n     * @param data\n     * @returns {Promise<ListingItemTemplate>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<ListingItemTemplate> {\n        let listingItemTemplate;\n\n        if (typeof data.params[0] === 'number') {\n            listingItemTemplate = await this.listingItemTemplateService.findOne(data.params[0]);\n        } else {\n            listingItemTemplate = await this.listingItemTemplateService.findOneByHash(data.params[0]);\n        }\n        return listingItemTemplate;\n    }\n\n    public usage(): string {\n        return this.getName() + ' <listingTemplateId> ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <listingTemplateId>           - Numeric - The ID of the listing item template that we \\n'\n            + '                                     want to retrieve. ';\n    }\n\n    public description(): string {\n        return 'Get listing item template via listingItemTemplateId.';\n    }\n\n    public example(): string {\n        return 'template ' + this.getName() + ' 1';\n    }\n}\n"]}