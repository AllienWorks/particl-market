{"version":3,"file":"ItemImageAddCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/itemimage/ItemImageAddCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ItemImageService } from '../../services/ItemImageService';\nimport { ListingItemTemplateService } from '../../services/ListingItemTemplateService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ItemImage } from '../../models/ItemImage';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { ItemImageCreateRequest } from '../../requests/ItemImageCreateRequest';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { ImageVersions } from '../../../core/helpers/ImageVersionEnumType';\n\nexport class ItemImageAddCommand extends BaseCommand implements RpcCommandInterface<ItemImage> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ItemImageService) private itemImageService: ItemImageService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) private listingItemTemplateService: ListingItemTemplateService\n    ) {\n        super(Commands.ITEMIMAGE_ADD);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: listing_item_template_id\n     *  [1]: dataId\n     *  [2]: protocol\n     *  [3]: encoding\n     *  [4]: data\n     *\n     * @param data\n     * @returns {Promise<ItemImage>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<ItemImage> {\n\n        // check listingItemTemplate id present in params\n        if (!data.params[0]) {\n            throw new MessageException('ListingItemTemplate id can not be null.');\n        }\n        // find listing item template\n        const listingItemTemplateModel = await this.listingItemTemplateService.findOne(data.params[0]);\n        const listingItemTemplate = listingItemTemplateModel.toJSON();\n\n        // create item images\n        return await this.itemImageService.create({\n            item_information_id: listingItemTemplate.ItemInformation.id,\n            data: [{\n                dataId: data.params[1],\n                protocol: data.params[2],\n                encoding: data.params[3],\n                data: data.params[4],\n                imageVersion: ImageVersions.ORIGINAL.propName\n            }]\n        } as ItemImageCreateRequest);\n    }\n\n    public usage(): string {\n        return this.getName() + ' <listingItemTemplateId> [<dataId> [<protocol> [<encoding> [<data>]]]] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <listingItemTemplateId>       - Numeric - The ID of the listing item template \\n'\n            + '                                     we want to associate this item image with. \\n'\n            + '    <dataId>                      - [optional] String - [TODO] \\n'\n            + '    <protocol>                    - [optional] Enum{LOCAL, IPFS, HTTPS, ONION, SMSG} - The protocol we want to use to load the image. \\n'\n            + '    <encoding>                    - [optional] Enum{BASE64} - The format the image is encoded in. \\n'\n            + '    <data>                        - [optional] String - The image\\'s data. ';\n    }\n\n    public description(): string {\n        return 'Add an item image to a listing item template, identified by its ID.';\n    }\n\n    public example(): string {\n        return 'image ' + this.getName() + ' 1 someDataId LOCAL BASE64 '\n            + 'iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUU'\n            + 'H4gIQCyAa2TIm7wAAABl0RVh0Q29tbWVudABDcmVhdGVkIHdpdGggR0lNUFeBDhcAAAAaSURBVAjXY/j//z8'\n            + 'DA8P///8Z/v//D+EgAAD4JQv1hrMfIwAAAABJRU5ErkJggg== ';\n    }\n}\n"]}