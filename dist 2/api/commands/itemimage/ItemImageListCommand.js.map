{"version":3,"file":"ItemImageListCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/itemimage/ItemImageListCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ListingItemTemplateService } from '../../services/ListingItemTemplateService';\nimport { ListingItemService } from '../../services/ListingItemService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ItemImage } from '../../models/ItemImage';\nimport { ListingItemTemplate } from '../../models/ListingItemTemplate';\nimport { ListingItem } from '../../models/ListingItem';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { MessageException } from '../../exceptions/MessageException';\n\nexport class ItemImageListCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<ItemImage>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) public listingItemTemplateService: ListingItemTemplateService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) public listingItemService: ListingItemService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        super(Commands.ITEMIMAGE_LIST);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: 'template' or 'item'\n     *  [1]: listingItemTemplateId or listingItemId\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Bookshelf.Collection<ItemImage>> {\n        if ( data.params.length !== 2 ) {\n            throw new MessageException('Invalid number of args. Expected 2, got <' + data.params.length + '>.');\n        }\n\n        if (typeof data.params[1] !== 'number') {\n            this.log.error('Second arg must be numeric.');\n            throw new MessageException('Second arg must be numeric.');\n        }\n\n        const idType = data.params[0];\n        if ( idType === 'template' ) {\n            const listingItemTemplateId = data.params[1];\n            const retval: ListingItemTemplate = await this.listingItemTemplateService.findOne(listingItemTemplateId, true);\n            return retval.toJSON().ItemInformation.ItemImages;\n\n        } else if ( idType === 'item' ) {\n            const listingItemId = data.params[1];\n            const retval: ListingItem = await this.listingItemService.findOne(listingItemId, true);\n            return retval.toJSON().ItemInformation.ItemImages;\n        } else {\n            throw new MessageException(`Invalid ID type detected <${idType}>. Expected 'template' or 'item'.`);\n        }\n    }\n\n    public usage(): string {\n        return this.getName() + ' (template <listingItemTemplateId>|item <listingItemId>) ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <listingItemTemplateId>       - Numeric - The ID of the listing item template whose images we want to list. \\n'\n            + '    <listingItemId>               - Numeric - The ID of the listing item whose images we want to list. ';\n    }\n\n    public description(): string {\n        return 'Return all images for listing item.';\n    }\n\n    public example(): string {\n        return 'image ' + this.getName() + ' 1 1 ';\n    }\n}\n"]}