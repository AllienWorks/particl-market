{"version":3,"file":"ItemImageRemoveCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/itemimage/ItemImageRemoveCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,sEAAmE;AACnE,0DAAuD;AAEvD,wEAAqE;AACrE,wDAA6C;AAC7C,gDAA6C;AAE7C,IAAa,sBAAsB,GAAnC,4BAAoC,SAAQ,yBAAW;IAInD,YACmD,MAAyB,EACA,gBAAkC;QAE1G,KAAK,CAAC,0BAAQ,CAAC,gBAAgB,CAAC,CAAC;QAHc,WAAM,GAAN,MAAM,CAAmB;QACA,qBAAgB,GAAhB,gBAAgB,CAAkB;QAG1G,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;OAGG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACzB,MAAM,IAAI,mCAAgB,CAAC,2BAA2B,CAAC,CAAC;YAC5D,CAAC;YACD,iBAAiB;YACjB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAEtE,+BAA+B;YAC/B,MAAM,eAAe,GAAG,SAAS,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,MAAM,EAAE,CAAC;YAEtE,oCAAoC;YACpC,EAAE,CAAC,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,CAAC;gBAChC,MAAM,IAAI,mCAAgB,CAAC,mEAAmE,CAAC,CAAC;YACpG,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACzD,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,iBAAiB,CAAC;IAC9C,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,sFAAsF,CAAC;IACjG,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,gDAAgD,CAAC;IAC5D,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC;IAC7C,CAAC;CACJ,CAAA;AAjCG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;qDAe1D;AAhCQ,sBAAsB;IAK1B,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAA;qDAA2B,mCAAgB;GANrG,sBAAsB,CAkDlC;AAlDY,wDAAsB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ItemImageService } from '../../services/ItemImageService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\n\nexport class ItemImageRemoveCommand extends BaseCommand implements RpcCommandInterface<void> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ItemImageService) private itemImageService: ItemImageService\n    ) {\n        super(Commands.ITEMIMAGE_REMOVE);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: ItemImageId\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<void> {\n        if (data.params.length < 1) {\n            throw new MessageException('Requires arg: ItemImageId');\n        }\n        // find itemImage\n        const itemImage = await this.itemImageService.findOne(data.params[0]);\n\n        // find related itemInformation\n        const itemInformation = itemImage.related('ItemInformation').toJSON();\n\n        // check if item already been posted\n        if (itemInformation.listingItemId) {\n            throw new MessageException(`Can't delete itemImage because the item has allready been posted!`);\n        }\n        return this.itemImageService.destroy(data.params[0]);\n    }\n\n    public usage(): string {\n        return this.getName() + ' <itemImageId> ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <itemImageId>                 - Numeric - The ID of the image we want to remove.';\n    }\n\n    public description(): string {\n        return 'Remove an item\\'s image, identified by its ID.';\n    }\n\n    public example(): string {\n        return 'image ' + this.getName() + ' 1 ';\n    }\n}\n"]}