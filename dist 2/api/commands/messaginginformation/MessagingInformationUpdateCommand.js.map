{"version":3,"file":"MessagingInformationUpdateCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/messaginginformation/MessagingInformationUpdateCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,0FAAuF;AACvF,4FAAyF;AACzF,0DAAuD;AAIvD,wEAAqE;AACrE,4BAA4B;AAC5B,wDAA6C;AAC7C,gDAA6C;AAG7C,IAAa,iCAAiC,GAA9C,uCAA+C,SAAQ,yBAAW;IAI9D,YACmD,MAAyB,EACU,0BAAsD,EACrD,2BAAwD;QAE3I,KAAK,CAAC,0BAAQ,CAAC,2BAA2B,CAAC,CAAC;QAJG,WAAM,GAAN,MAAM,CAAmB;QACU,+BAA0B,GAA1B,0BAA0B,CAA4B;QACrD,gCAA2B,GAA3B,2BAA2B,CAA6B;QAG3I,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;;OAQG;IAEU,OAAO,CAAuB,IAAgB;;YAEvD,mGAAmG;YACnG,sCAAsC;YACtC,MAAM,wBAAwB,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/F,MAAM,mBAAmB,GAAkC,wBAAwB,CAAC,MAAM,EAAE,CAAC;YAE7F,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBAC/C,MAAM,IAAI,mCAAgB,CAAC,kGAAkG,CAAC,CAAC;YACnI,CAAC;YAAC,IAAI,CAAC,CAAC;gBAEJ,mCAAmC;gBACnC,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;oBAC3F,wBAAwB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACxC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACxB,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;iBACS,CAAC,CAAC;YAC5C,CAAC;QACL,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,8CAA8C,CAAC;IAC3E,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,oDAAoD;cACpD,uDAAuD;cACvD,iDAAiD,CAAC;IAC5D,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,gFAAgF,CAAC;IAC5F,CAAC;CAEJ,CAAA;AAnCG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;gEAkB1D;AAzCQ,iCAAiC;IAKrC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAA;IACxE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAA;qDADoC,uDAA0B;QACxB,yDAA2B;GAPtI,iCAAiC,CA0D7C;AA1DY,8EAAiC","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ListingItemTemplateService } from '../../services/ListingItemTemplateService';\nimport { MessagingInformationService } from '../../services/MessagingInformationService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { MessagingInformationUpdateRequest } from '../../requests/MessagingInformationUpdateRequest';\nimport { MessagingInformation } from '../../models/MessagingInformation';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { MessageException } from '../../exceptions/MessageException';\nimport * as _ from 'lodash';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport * as resources from 'resources';\n\nexport class MessagingInformationUpdateCommand extends BaseCommand implements RpcCommandInterface<MessagingInformation> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) private listingItemTemplateService: ListingItemTemplateService,\n        @inject(Types.Service) @named(Targets.Service.MessagingInformationService) private messagingInformationService: MessagingInformationService\n    ) {\n        super(Commands.MESSAGINGINFORMATION_UPDATE);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: ListingItemTemplate.id\n     *  [1]: protocol (MessagingProtocolType)\n     *  [2]: public key\n     *\n     * @param data\n     * @returns {Promise<MessagingInformation>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<MessagingInformation> {\n\n        // messaging information cannot be updated if there's a ListingItem related to ListingItemTemplate.\n        // (the item has allready been posted)\n        const listingItemTemplateModel = await this.listingItemTemplateService.findOne(data.params[0]);\n        const listingItemTemplate: resources.ListingItemTemplate = listingItemTemplateModel.toJSON();\n\n        if (!_.isEmpty(listingItemTemplate.ListingItems)) {\n            throw new MessageException('MessagingInformation cannot be updated if there is a ListingItem related to ListingItemTemplate.');\n        } else {\n\n            // todo: updates only the first one\n            return this.messagingInformationService.update(listingItemTemplate.MessagingInformation[0].id, {\n                listing_item_template_id: data.params[0],\n                protocol: data.params[1],\n                publicKey: data.params[2]\n            } as MessagingInformationUpdateRequest);\n        }\n    }\n\n    public usage(): string {\n        return this.getName() + ' <listingTemplateId> <protocol> <publicKey> ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <listingTemplateId>      - Numeric - [TODO] \\n'\n            + '    <protocol>               - ENUM{SMSG} - [TODO] \\n'\n            + '    <publicKey>              - String - [TODO] ';\n    }\n\n    public description(): string {\n        return 'Update the details of messaging information associated with listingTemplateId.';\n    }\n\n}\n"]}