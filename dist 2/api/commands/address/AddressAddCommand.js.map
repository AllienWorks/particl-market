{"version":3,"file":"AddressAddCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/address/AddressAddCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { AddressService } from '../../services/AddressService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { Address } from '../../models/Address';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { AddressCreateRequest } from '../../requests/AddressCreateRequest';\nimport { ShippingCountries } from '../../../core/helpers/ShippingCountries';\nimport { ShippingZips } from '../../../core/helpers/ShippingZips';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { RpcCommandFactory } from '../../factories/RpcCommandFactory';\nimport { NotFoundException } from '../../exceptions/NotFoundException';\nimport { AddressType } from '../../enums/AddressType';\n\nexport class AddressAddCommand extends BaseCommand implements RpcCommandInterface<Address> {\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.AddressService) private addressService: AddressService\n    ) {\n        super(Commands.ADDRESS_ADD);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: profileId\n     *  [1]: title\n     *  [2]: firstName\n     *  [3]: lastName\n     *  [4]: addressLine1\n     *  [5]: addressLine2\n     *  [6]: city\n     *  [7]: state\n     *  [8]: country/countryCode\n     *  [9]: zipCode\n     *  [10]: type, optional, default: AddressType.SHIPPING_OWN\n     *\n     * @param data\n     * @param rpcCommandFactory\n     * @returns {Promise<Address>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest, rpcCommandFactory: RpcCommandFactory): Promise<Address> {\n\n        // TODO: validate that there are correct amount of params\n\n        // If countryCode is country, convert to countryCode.\n        // If countryCode is country code, validate, and possibly throw error.\n        let countryCode: string = data.params[8];\n        countryCode = ShippingCountries.validate(this.log, countryCode);\n        this.log.debug('countryCode:', countryCode);\n\n        // Validate ZIP code\n        const zipCodeStr = data.params[9];\n        if (!ShippingZips.validate(countryCode, zipCodeStr)) {\n            throw new NotFoundException('ZIP/postal-code, country code, combination not valid.');\n        }\n        this.log.debug('zipCodeStr:', zipCodeStr);\n\n        const newAddress = {\n            profile_id: data.params[0],\n            title: data.params[1],\n            firstName: data.params[2],\n            lastName: data.params[3],\n            addressLine1: data.params[4],\n            addressLine2: data.params[5],\n            city: data.params[6],\n            state: data.params[7],\n            country: countryCode,\n            zipCode: zipCodeStr,\n            type: data.params[10] ? data.params[10] : AddressType.SHIPPING_OWN\n        } as AddressCreateRequest;\n\n        this.log.debug('newAddress:', newAddress);\n\n        return await this.addressService.create(newAddress);\n    }\n\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        //\n        return data;\n    }\n\n    // tslint:disable:max-line-length\n    public usage(): string {\n        return this.getName() + ' <profileId> <firstName> <lastName> <title> <addressLine1> <addressLine2> <city> <state> (<countryName>|<countryCode>) <zip> ';\n    }\n    // tslint:enable:max-line-length\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + '\\n'\n            + '    <profileId>              - Numeric - The ID of the profile we want to associate \\n'\n            + '                                this address with. \\n'\n            + '    <title>                  - String - A short identifier for the address. \\n'\n            + '    <firstName>              - String - First Name of user. \\n'\n            + '    <lastName>               - String - Last Name of user. \\n'\n            + '    <addressLine1>           - String - The first line of the address. \\n'\n            + '    <addressLine2>           - String - The second line of the address. \\n'\n            + '    <city>                   - String - The city of the address. \\n'\n            + '    <state>                  - String - The state of the address. \\n'\n            + '    <country>                - String - The country name of the address. \\n'\n            + '    <countryCode>            - String - Two letter country code of the address. \\n'\n            + '    <zip>                    - String - The ZIP code of your address. ';\n    }\n\n    public description(): string {\n        return 'Create an address and associate it with a profile.';\n    }\n\n    public example(): string {\n        return 'address ' + this.getName() + ' 1 myLocation \\'Johnny\\' \\'Deep\\' \\'123 Fake St\\' \\'\\' Springfield NT \\'United States\\' 90701';\n    }\n}\n"]}