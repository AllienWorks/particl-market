{"version":3,"file":"AddressListCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/address/AddressListCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,kEAA+D;AAC/D,kEAA+D;AAC/D,0DAAuD;AAEvD,yDAAsD;AAItD,wDAA8C;AAC9C,gDAA6C;AAC7C,yEAAsE;AAEtE,IAAa,kBAAkB,GAA/B,wBAAgC,SAAQ,yBAAW;IAI/C,YACmD,MAAyB,EACH,cAA8B,EAC9B,cAA8B;QAEnG,KAAK,CAAC,0BAAQ,CAAC,YAAY,CAAC,CAAC;QAJkB,WAAM,GAAN,MAAM,CAAmB;QACH,mBAAc,GAAd,cAAc,CAAgB;QAC9B,mBAAc,GAAd,cAAc,CAAgB;QAGnG,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;;OAQG;IAEU,OAAO,CAAuB,IAAgB,EAAE,iBAAoC;;YAC7F,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACb,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;YAClD,CAAC;YAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACnE,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,yBAAW,CAAC,YAAY,CAAC;YAExE,2CAA2C;YAC3C,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,OAAO,KAAK,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;QACzF,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,iBAAiB,CAAC;IAC9C,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,IAAI;cAClD,wFAAwF;cACxF,qDAAqD,CAAC;IAChE,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,4CAA4C,CAAC;IACxD,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;IAC9C,CAAC;CACJ,CAAA;AA9BG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU,EAAqB,qCAAiB;;iDAWhG;AAlCQ,kBAAkB;IAKtB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;IAC5D,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;qDADwB,+BAAc;QACd,+BAAc;GAP9F,kBAAkB,CAqD9B;AArDY,gDAAkB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { AddressService } from '../../services/AddressService';\nimport { ProfileService } from '../../services/ProfileService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { Address } from '../../models/Address';\nimport { AddressType } from '../../enums/AddressType';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { AddressCreateRequest } from '../../requests/AddressCreateRequest';\nimport { ShippingCountries } from '../../../core/helpers/ShippingCountries';\nimport { Commands } from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { RpcCommandFactory } from '../../factories/RpcCommandFactory';\n\nexport class AddressListCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<Address>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.AddressService) public addressService: AddressService,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) public profileService: ProfileService\n    ) {\n        super(Commands.ADDRESS_LIST);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: profileId\n     *  [1]: type, optional, default: AddressType.SHIPPING_OWN\n     *\n     * @param data\n     * @param rpcCommandFactory\n     * @returns {Promise<Bookshelf.Collection<Address>>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest, rpcCommandFactory: RpcCommandFactory): Promise<Bookshelf.Collection<Address>> {\n        const profileId = data.params[0];\n        if (!profileId) {\n            throw new Error('No profileId for a command');\n        }\n\n        const profile = await this.profileService.findOne(profileId, true);\n        const type = data.params[1] ? data.params[1] : AddressType.SHIPPING_OWN;\n\n        // Return SHIPPING_OWN addresses by default\n        return profile.toJSON().ShippingAddresses.filter((address) => address.type === type);\n    }\n\n    public usage(): string {\n        return this.getName() + ' [<profileId>] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + '\\n'\n            + '    <profileId>              - Numeric - The ID of the profile we want to associate \\n'\n            + '                                this address with. ';\n    }\n\n    public description(): string {\n        return 'List all addresses belonging to a profile.';\n    }\n\n    public example(): string {\n        return 'address ' + this.getName() + ' 1';\n    }\n}\n"]}