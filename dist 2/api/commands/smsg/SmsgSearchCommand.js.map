{"version":3,"file":"SmsgSearchCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/smsg/SmsgSearchCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport * as _ from 'lodash';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { SearchOrder } from '../../enums/SearchOrder';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { SmsgMessage } from '../../models/SmsgMessage';\nimport { SmsgMessageService } from '../../services/SmsgMessageService';\nimport { SmsgMessageSearchParams } from '../../requests/SmsgMessageSearchParams';\nimport {SmsgMessageStatus} from '../../enums/SmsgMessageStatus';\n\nexport class SmsgSearchCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<SmsgMessage>> {\n\n    public log: LoggerType;\n    private DEFAULT_PAGE_LIMIT = 10;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.SmsgMessageService) private smsgMessageService: SmsgMessageService\n    ) {\n        super(Commands.SMSG_SEARCH);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     *\n     * data.params[]:\n     *  [0]: page, number, optional\n     *  [1]: pageLimit, number, default=10, optional\n     *  [2]: ordering ASC/DESC, orders by createdAt, optional\n     *  [3]: type, MessageTypeEnum, * for all, optional\n     *  [4]: status, ENUM{NEW, PARSING_FAILED, PROCESSING, PROCESSED, PROCESSING_FAILED, WAITING}, * for all\n     *  [5]: smsgid, string, * for all, optional\n     *\n     * @param data\n     * @returns {Promise<Bookshelf.Collection<Bid>>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Bookshelf.Collection<SmsgMessage>> {\n\n        const searchParams = this.getSearchParams(data.params);\n        return await this.smsgMessageService.searchBy(searchParams);\n    }\n\n    public usage(): string {\n        return this.getName()\n            + ' [<page> [<pageLimit> [<ordering> [<type> [<status> [<msgid>]]]]]] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + '\\n'\n            + '    <page>                   - [optional] Numeric - The number page we want to \\n'\n            + '                                view of search listing item results. \\n'\n            + '    <pageLimit>              - [optional] Numeric - The number of results per page. \\n'\n            + '    <ordering>               - [optional] ENUM{ASC,DESC} - The ordering of the search results. \\n'\n            + '    <type>                   - [optional] ENUM{ASC,DESC} - MessageType. \\n'\n            + '    <status>                 - [optional] ENUM{ASC,DESC} - SmsgMessageStatus. \\n'\n            + '    <msgid>                  - [optional] ENUM{ASC,DESC} - The message msgid. \\n';\n\n    }\n\n    public description(): string {\n            return 'Search bids by itemhash, bid status, or bidder address';\n    }\n\n    public example(): string {\n        return 'bid ' + this.getName() + ' TODO';\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: page, number, optional\n     *  [1]: pageLimit, number, default=10, optional\n     *  [2]: ordering ASC/DESC, orders by createdAt, optional\n     *  [3]: type, MessageTypeEnum, * for all, optional\n     *  [4]: status, ENUM{NEW, PARSING_FAILED, PROCESSING, PROCESSED, PROCESSING_FAILED, WAITING}, * for all\n     *  [5]: smsgid, string, * for all, optional\n     *\n     * @param {any[]} params\n     * @returns {SmsgMessageSearchParams}\n     */\n    private getSearchParams(params: any[]): SmsgMessageSearchParams {\n\n        let page = 0;\n        let pageLimit = this.DEFAULT_PAGE_LIMIT;\n        let ordering: SearchOrder = SearchOrder.ASC;\n        let types: any = [];\n        let status;\n        let msgid;\n\n        if (!_.isEmpty(params)) {\n            if (typeof params[0] !== 'number') {\n                throw new MessageException('page should be a number.');\n            } else {\n                page = params.shift();\n            }\n        }\n\n        if (!_.isEmpty(params)) {\n            if (typeof params[0] !== 'number') {\n                throw new MessageException('pageLimit should be a number.');\n            } else {\n                pageLimit = params.shift();\n            }\n        }\n\n        if (!_.isEmpty(params)) {\n            if (typeof params[0] !== 'string') {\n                throw new MessageException('ordering should be a string.');\n            } else {\n                if (params[0] === 'DESC') {\n                    ordering = SearchOrder.DESC;\n                } else {\n                    ordering = SearchOrder.ASC;\n                }\n                params.shift();\n            }\n        }\n\n        if (!_.isEmpty(params)) {\n            types = [params.shift()];\n        }\n\n        if (!_.isEmpty(params)) {\n            status = params.shift();\n        }\n\n        if (!_.isEmpty(params)) {\n            msgid = params.shift();\n        }\n\n        const searchParams = {\n            page,\n            pageLimit,\n            order: ordering,\n            orderByColumn: 'received',\n            types,\n            status,\n            msgid,\n            age: 1000 * 30\n        } as SmsgMessageSearchParams;\n\n        this.log.debug('SmsgMessageSearchParams: ', JSON.stringify(searchParams, null, 2));\n        return searchParams;\n    }\n}\n"]}