{"version":3,"file":"ShoppingCartListCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/shoppingcart/ShoppingCartListCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { BaseCommand } from '../BaseCommand';\nimport { Commands } from '../CommandEnumType';\nimport { ShoppingCart } from '../../models/ShoppingCart';\nimport { ShoppingCartService } from '../../services/ShoppingCartService';\nimport { ProfileService } from '../../services/ProfileService';\n\nimport { MessageException } from '../../exceptions/MessageException';\n\nexport class ShoppingCartListCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<ShoppingCart>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ShoppingCartService) private shoppingCartService: ShoppingCartService,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) private profileService: ProfileService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        super(Commands.SHOPPINGCART_LIST);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: profileId\n     *\n     * @param data\n     * @returns {Promise<Bookshelf.Collection<ShoppingCart>>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Bookshelf.Collection<ShoppingCart>> {\n        return await this.shoppingCartService.findAllByProfileId(data.params[0]);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: profileId || profileName\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<RpcRequest>}\n     */\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        if (data.params.length === 0) {\n            throw new MessageException('Missing profileId or profileName.');\n        }\n\n        if (typeof data.params[0] === 'number') {\n            return await this.profileService.findOne(data.params[0])\n                .then(async value => {\n                    const profile = value.toJSON();\n                    data.params[0] = profile.id;\n                    return data;\n                });\n        } else {\n            return await this.profileService.findOneByName(data.params[0])\n                .then(async value => {\n                    const profile = value.toJSON();\n                    data.params[0] = profile.id;\n                    return data;\n                });\n        }\n    }\n\n    public usage(): string {\n        return this.getName() + ' [<profileId>|<profileName>] ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <profileId>              - The Id of the profile associated with the shopping cart we want to search for. \\n'\n            + '    <profileName>            - The name of the profile associated with the shopping cart we want to search for. ';\n    }\n\n    public description(): string {\n        return 'List the all shopping cart associated with given profile id or profile name.';\n    }\n\n    public example(): string {\n        return 'cart ' + this.getName() + ' 1 ';\n    }\n}\n"]}