{"version":3,"file":"ShoppingCartGetCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/shoppingcart/ShoppingCartGetCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAC1C,0DAAuD;AAEvD,yDAA+D;AAE/D,kDAA0D;AAC1D,gDAA6C;AAC7C,wDAA8C;AAC9C,4EAAyE;AAGzE,IAAa,sBAAsB,GAAnC,4BAAoC,SAAQ,yBAAW;IAInD,YAC+E,mBAAwC,EACpE,MAAyB;QAExE,KAAK,CAAC,0BAAQ,CAAC,gBAAgB,CAAC,CAAC;QAH0C,wBAAmB,GAAnB,mBAAmB,CAAqB;QACpE,WAAM,GAAN,MAAM,CAAmB;QAGxE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,MAAM,CAAC,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAClE,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,YAAY,CAAC;IACzC,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,6EAA6E,CAAC;IACxF,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,oCAAoC,CAAC;IAChD,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC;IAC5C,CAAC;CACJ,CAAA;AApBG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;qDAE1D;AAtBQ,sBAAsB;IAK1B,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAA;IACjE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CADyD,yCAAmB;GAL9G,sBAAsB,CAwClC;AAxCY,wDAAsB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { BaseCommand } from '../BaseCommand';\nimport { Commands } from '../CommandEnumType';\nimport { ShoppingCartService } from '../../services/ShoppingCartService';\nimport { ShoppingCart } from '../../models/ShoppingCart';\n\nexport class ShoppingCartGetCommand extends BaseCommand implements RpcCommandInterface<ShoppingCart> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ShoppingCartService) private shoppingCartService: ShoppingCartService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        super(Commands.SHOPPINGCART_GET);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: cartId\n     *\n     * @param data\n     * @returns {Promise<ShoppingCart>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<ShoppingCart> {\n        return await this.shoppingCartService.findOne(data.params[0]);\n    }\n\n    public usage(): string {\n        return this.getName() + ' <cartId> ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <cartId>                 - The Id of the shopping cart we want to get. ';\n    }\n\n    public description(): string {\n        return 'Get shopping cart by given cart id';\n    }\n\n    public example(): string {\n        return 'cart ' + this.getName() + ' 1 ';\n    }\n}\n"]}