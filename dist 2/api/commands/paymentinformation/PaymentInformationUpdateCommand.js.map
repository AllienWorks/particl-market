{"version":3,"file":"PaymentInformationUpdateCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/paymentinformation/PaymentInformationUpdateCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport * as _ from 'lodash';\nimport { PaymentInformationService } from '../../services/PaymentInformationService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { PaymentInformationUpdateRequest } from '../../requests/PaymentInformationUpdateRequest';\nimport { PaymentInformation } from '../../models/PaymentInformation';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { CryptocurrencyAddressType } from '../../enums/CryptocurrencyAddressType';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { ListingItemTemplateService } from '../../services/ListingItemTemplateService';\nimport {MessageException} from '../../exceptions/MessageException';\n\nexport class PaymentInformationUpdateCommand extends BaseCommand implements RpcCommandInterface<PaymentInformation> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) private listingItemTemplateService: ListingItemTemplateService,\n        @inject(Types.Service) @named(Targets.Service.PaymentInformationService) private paymentInformationService: PaymentInformationService\n    ) {\n        super(Commands.PAYMENTINFORMATION_UPDATE);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: ListingItemTemplate.id\n     *  [1]: payment type\n     *  [2]: currency\n     *  [3]: base price\n     *  [4]: domestic shipping price\n     *  [5]: international shipping price\n     *  [6]: payment address, optional\n     *\n     * @param data\n     * @returns {Promise<PaymentInformation>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<PaymentInformation> {\n\n        // get the template\n        const listingItemTemplateId = data.params[0];\n        const listingItemTemplateModel = await this.listingItemTemplateService.findOne(listingItemTemplateId);\n        const listingItemTemplate = listingItemTemplateModel.toJSON();\n\n        // template allready has listingitems so for now, it cannot be modified\n        if (_.isEmpty(listingItemTemplate.PaymentInformation)) {\n            throw new MessageException(`PaymentInformation for the ListingItemTemplate was not found!`);\n        }\n\n        return this.paymentInformationService.update(listingItemTemplate.PaymentInformation.id, {\n            listing_item_template_id : data.params[0],\n            type: data.params[1],\n            itemPrice: {\n                currency: data.params[2],\n                basePrice: data.params[3],\n                shippingPrice: {\n                    domestic: data.params[4],\n                    international: data.params[5]\n                },\n                cryptocurrencyAddress: {\n                    type: CryptocurrencyAddressType.NORMAL,\n                    address: data.params[6]\n                }\n            }\n        } as PaymentInformationUpdateRequest);\n    }\n\n    public usage(): string {\n        return this.getName() + ' <listingItemTemplateId> <paymentType> <currency> <basePrice> <domesticShippingPrice>'\n            + ' <internationalShippingPrice> <paymentAddress> ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <listingItemTemplateId>       - Numeric - The ID of the listing item template \\n'\n            + '                                     we want to associate this payment information \\n'\n            + '                                     with. \\n'\n            + '    <paymentType>                 - String  - Whether associated items are for free or \\n'\n            + '                                     for sale. \\n'\n            + '    <currency>                    - String  - The currency that we want to receive \\n'\n            + '                                     payment in. \\n'\n            + '    <basePrice>                   - Numeric - The base price of the item associated \\n'\n            + '                                     with this object. \\n'\n            + '    <domesticShippingPrice>       - Numeric - The domestic shipping price of the \\n'\n            + '                                     item associated with this object. \\n'\n            + '    <internationalShippingPrice>  - Numeric - The international shipping price of \\n'\n            + '                                     the item associated with this object. \\n'\n            + '    <paymentAddress>              - String  - The cryptocurrency address we want to \\n'\n            + '                                     receive payment in. ';\n    }\n\n    public description(): string {\n        return 'Update the details of payment information associated with listingItemTemplateId.';\n    }\n\n    public example(): string {\n        return 'payment ' + this.getName() + '  1 FREE PART 123 12 34 PkE5U1Erz9bANXAxvHeiw6t14vDTP9EdNM ';\n    }\n}\n"]}