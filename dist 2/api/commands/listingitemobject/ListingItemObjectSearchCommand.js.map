{"version":3,"file":"ListingItemObjectSearchCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/listingitemobject/ListingItemObjectSearchCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,sFAAmF;AACnF,0DAAuD;AAIvD,wDAA6C;AAC7C,gDAA6C;AAC7C,wEAAqE;AAErE,IAAa,8BAA8B,GAA3C,oCAA4C,SAAQ,yBAAW;IAI3D,YACmD,MAAyB,EACO,wBAAkD;QAEjI,KAAK,CAAC,0BAAQ,CAAC,iBAAiB,CAAC,CAAC;QAHa,WAAM,GAAN,MAAM,CAAmB;QACO,6BAAwB,GAAxB,wBAAwB,CAA0B;QAGjI,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IAEU,OAAO,CAAuB,IAAgB;;YACvD,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC;gBACxC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;aACE,CAAC,CAAC;QACxC,CAAC;KAAA;IAEY,QAAQ,CAAC,IAAgB;;YAClC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC3B,MAAM,IAAI,mCAAgB,CAAC,uBAAuB,CAAC,CAAC;YACxD,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK;cACnD,kGAAkG;cAClG,sEAAsE,CAAC;IACjF,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,kGAAkG,CAAC;IAC9G,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,iDAAiD,CAAC;IAC9F,CAAC;CACJ,CAAA;AA9BG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU;;6DAI1D;AAxBQ,8BAA8B;IAKlC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAA;qDAAkC,mDAAwB;GAN5H,8BAA8B,CAkD1C;AAlDY,wEAA8B","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { ListingItemObjectService } from '../../services/ListingItemObjectService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { ListingItemObject } from '../../models/ListingItemObject';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { ListingItemObjectSearchParams } from '../../requests/ListingItemObjectSearchParams';\nimport { Commands} from '../CommandEnumType';\nimport { BaseCommand } from '../BaseCommand';\nimport { MessageException } from '../../exceptions/MessageException';\n\nexport class ListingItemObjectSearchCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<ListingItemObject>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.ListingItemObjectService) public listingItemObjectService: ListingItemObjectService\n    ) {\n        super(Commands.ITEMOBJECT_SEARCH);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: searchString, string\n     *\n     * @param data\n     * @returns {Promise<ListingItemObject>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest): Promise<Bookshelf.Collection<ListingItemObject>> {\n        return this.listingItemObjectService.search({\n            searchString: data.params[0]\n        } as ListingItemObjectSearchParams);\n    }\n\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        if (data.params.length === 0) {\n            throw new MessageException('Missing searchString.');\n        }\n        return data;\n    }\n\n    public usage(): string {\n        return this.getName() + ' <searchString> ';\n    }\n\n    public help(): string {\n        return this.usage() + ' -  ' + this.description() + ' \\n'\n            + '    <searchString>           - String - A string that is used to find listing items objects by\\n'\n            + '                                matching their type or description. ';\n    }\n\n    public description(): string {\n        return 'Search listing items objects by given string match with listing item object type or description.';\n    }\n\n    public example(): string {\n        return 'itemobject ' + this.getName() + ' \\'rubber chicken with a pully in the middle\\' ';\n    }\n}\n"]}