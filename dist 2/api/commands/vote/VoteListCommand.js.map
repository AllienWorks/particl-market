{"version":3,"file":"VoteListCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/vote/VoteListCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAC1C,yDAA+D;AAE/D,kDAA0D;AAC1D,4DAAyD;AACzD,0DAAuD;AAGvD,0DAAgD;AAChD,kDAA+C;AAC/C,yEAAsE;AAEtE,IAAa,eAAe,GAA5B,qBAA6B,SAAQ,yBAAW;IAI5C,YACsE,WAAwB,EAC3C,MAAyB;QAExE,KAAK,CAAC,0BAAQ,CAAC,SAAS,CAAC,CAAC;QAHwC,gBAAW,GAAX,WAAW,CAAa;QAC3C,WAAM,GAAN,MAAM,CAAmB;QAGxE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IAEU,OAAO,CAAuB,IAAgB,EAAE,iBAAoC;;YAC7F,MAAM,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;QAC5C,CAAC;KAAA;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC;IAChC,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,cAAc,CAAC;IAC1B,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC;IAChC,CAAC;CACJ,CAAA;AAfG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU,EAAqB,qCAAiB;;8CAEhG;AAtBQ,eAAe;IAKnB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;IACzD,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CADwC,yBAAW;GALrF,eAAe,CAmC3B;AAnCY,0CAAe","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { VoteService } from '../../services/VoteService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { Vote } from '../../models/Vote';\nimport { RpcCommandInterface } from './../RpcCommandInterface';\nimport { Commands } from './../CommandEnumType';\nimport { BaseCommand } from './../BaseCommand';\nimport { RpcCommandFactory } from '../../factories/RpcCommandFactory';\n\nexport class VoteListCommand extends BaseCommand implements RpcCommandInterface<Bookshelf.Collection<Vote>> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.VoteService) public voteService: VoteService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        super(Commands.VOTE_LIST);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * List votes\n     *\n     * @param data, RpcRequest\n     * @param rpcCommandFactory, RpcCommandFactory\n     * @returns {Promise<any>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest, rpcCommandFactory: RpcCommandFactory): Promise<Bookshelf.Collection<Vote>> {\n        return await this.voteService.findAll();\n    }\n\n    public help(): string {\n        return this.getName() + ' ';\n    }\n\n    public description(): string {\n        return 'List votes. ';\n    }\n\n    public example(): string {\n        return this.getName() + ' ';\n    }\n}\n"]}