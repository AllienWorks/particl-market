{"version":3,"file":"VotePostCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/vote/VotePostCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { VoteActionService } from '../../services/VoteActionService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from './../RpcCommandInterface';\nimport { Commands } from './../CommandEnumType';\nimport { BaseCommand } from './../BaseCommand';\nimport { RpcCommandFactory } from '../../factories/RpcCommandFactory';\nimport { ProfileService } from '../../services/ProfileService';\nimport { MarketService } from '../../services/MarketService';\nimport { MessageException } from '../../exceptions/MessageException';\nimport { ProposalService } from '../../services/ProposalService';\nimport * as resources from 'resources';\nimport { SmsgSendResponse } from '../../responses/SmsgSendResponse';\n\nexport class VotePostCommand extends BaseCommand implements RpcCommandInterface<SmsgSendResponse> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.VoteActionService) public voteActionService: VoteActionService,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) public profileService: ProfileService,\n        @inject(Types.Service) @named(Targets.Service.MarketService) public marketService: MarketService,\n        @inject(Types.Service) @named(Targets.Service.ProposalService) public proposalService: ProposalService\n    ) {\n        super(Commands.VOTE_POST);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: profileId\n     *  [1]: proposalHash\n     *  [2]: proposalOptionId\n     *\n     * @param data, RpcRequest\n     * @param rpcCommandFactory, RpcCommandFactory\n     * @returns {Promise<any>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest, rpcCommandFactory: RpcCommandFactory): Promise<SmsgSendResponse> {\n\n        const profileId = data.params.shift();\n        const proposalHash = data.params.shift();\n        // TODO: for now we'll use optionId, we may need to change it later to be something else like hash\n        const proposalOptionId = data.params.shift();\n\n        const proposalModel = await this.proposalService.findOneByHash(proposalHash)\n            .catch(reason => {\n                throw new MessageException('Proposal not found.');\n            });\n        const proposal: resources.Proposal = proposalModel.toJSON();\n        const proposalOption = _.find(proposal.ProposalOptions, (o: resources.ProposalOption) => {\n            return o.optionId === proposalOptionId;\n        });\n\n        if (!proposalOption) {\n            throw new MessageException(`ProposalOption not found.`);\n        }\n\n        // Get profile from address.\n        // Profile that is doing the bidding.\n        const profileModel = await this.profileService.findOne(profileId);\n        if (!profileModel) {\n            throw new MessageException(`Profile with profileId <${profileId}> doesn't exist or doesn't belong to us.`);\n        }\n        const profile: resources.Profile = profileModel.toJSON();\n\n        // Get the default market.\n        // TODO: Might want to let users specify this later.\n        const marketModel = await this.marketService.getDefault();\n        if (!marketModel) {\n            throw new MessageException(`Default market doesn't exist!`);\n        }\n        const market: resources.Market = marketModel.toJSON();\n\n        return await this.voteActionService.send(proposal, proposalOption, profile, market);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: profileId\n     *  [1]: proposalHash\n     *  [2]: proposalOptionId\n     *\n     * @param {RpcRequest} data\n     * @returns {Promise<RpcRequest>}\n     */\n    public async validate(data: RpcRequest): Promise<RpcRequest> {\n        if (data.params.length < 3) {\n            throw new MessageException('Missing params.');\n        }\n\n        if (typeof data.params[0] !== 'number') {\n            throw new MessageException('Invalid profileId.');\n        }\n\n        if (typeof data.params[1] !== 'string') {\n            throw new MessageException('Invalid proposalHash.');\n        }\n\n        if (typeof data.params[2] !== 'number') {\n            throw new MessageException('Invalid proposalOptionId.');\n        }\n\n        return data;\n    }\n\n    public help(): string {\n        return this.getName() + ' <profileId> <proposalHash> <proposalOptionId> ';\n    }\n\n    public description(): string {\n        return 'Vote on a proposal specified via hash. ';\n    }\n\n    public example(): string {\n        return this.getName() + ' 1 392fc0687405099ad71319686aa421b65e262f10f9c2caed181ae81d23d52236 0';\n    }\n}\n"]}