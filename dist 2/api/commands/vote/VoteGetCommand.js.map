{"version":3,"file":"VoteGetCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/vote/VoteGetCommand.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { VoteService } from '../../services/VoteService';\nimport { ProfileService } from '../../services/ProfileService';\nimport { ProposalService } from '../../services/ProposalService';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { Vote } from '../../models/Vote';\nimport { RpcCommandInterface } from './../RpcCommandInterface';\nimport { Commands } from './../CommandEnumType';\nimport { BaseCommand } from './../BaseCommand';\nimport { RpcCommandFactory } from '../../factories/RpcCommandFactory';\nimport { MessageException } from '../../exceptions/MessageException';\nimport * as resources from 'resources';\n\nexport class VoteGetCommand extends BaseCommand implements RpcCommandInterface<Vote> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.VoteService) public voteService: VoteService,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) public profileService: ProfileService,\n        @inject(Types.Service) @named(Targets.Service.ProposalService) public proposalService: ProposalService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        super(Commands.VOTE_GET);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * command description\n     * [0] profileId\n     * [1] proposalHash\n     *\n     * @param data, RpcRequest\n     * @param rpcCommandFactory, RpcCommandFactory\n     * @returns {Promise<any>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest, rpcCommandFactory: RpcCommandFactory): Promise<Vote> {\n        if (data.params.length < 2) {\n            throw new MessageException('Expected <TODO> but received no params.');\n        }\n\n        // Get profile address from profile id\n        const profileId = data.params.shift();\n        const profileModel = await this.profileService.findOne(profileId);\n        const profile: resources.Profile = profileModel.toJSON();\n\n        // Get proposal id from proposal hash\n        const proposalHash = data.params.shift();\n        const proposal = await this.proposalService.findOneByHash(proposalHash);\n\n        const vote = await this.voteService.findOneByVoterAndProposalId(profile.address, proposal.id)\n            .catch(reason => {\n                throw new MessageException('User has not voted for that Proposal yet.');\n            });\n\n        return vote;\n    }\n\n    public help(): string {\n        return this.getName() + ' <profileId> <proposalHash> ';\n    }\n\n    public description(): string {\n        return 'Get votes on a given proposal by a given submitter. ';\n    }\n\n    public example(): string {\n        return this.getName() + ' 1 392fc0687405099ad71319686aa421b65e262f10f9c2caed181ae81d23d52236 ';\n    }\n}\n"]}