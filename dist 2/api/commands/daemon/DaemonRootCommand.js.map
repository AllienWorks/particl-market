{"version":3,"file":"DaemonRootCommand.js","sourceRoot":"","sources":["../../../../src/api/commands/daemon/DaemonRootCommand.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAC1C,0DAAuD;AAEvD,yDAA+D;AAE/D,kDAA0D;AAC1D,gDAA6C;AAC7C,yEAAsE;AACtE,wDAA8C;AAC9C,kEAA+D;AAE/D,IAAa,iBAAiB,GAA9B,uBAA+B,SAAQ,yBAAW;IAI9C,YACmD,MAAyB,EACH,cAA8B;QAEnG,KAAK,CAAC,0BAAQ,CAAC,WAAW,CAAC,CAAC;QAHmB,WAAM,GAAN,MAAM,CAAmB;QACH,mBAAc,GAAd,cAAc,CAAgB;QAGnG,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;OAOG;IAEU,OAAO,CAAuB,IAAgB,EAAE,iBAAoC;;YAC7F,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC5C,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YAEpC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACtE,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC;KAAA;IAEM,KAAK;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,yCAAyC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAC3F,CAAC;IAEM,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI;cACpB,wDAAwD;cACxD,+DAA+D,CAAC;IAC1E,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,+CAA+C,CAAC;IAC3D,CAAC;CACJ,CAAA;AAtBG;IADC,mBAAQ,EAAE;IACY,mBAAA,kBAAO,CAAC,uBAAU,CAAC,CAAA;;6CAAO,uBAAU,EAAqB,qCAAiB;;gDAOhG;AA5BQ,iBAAiB;IAKrB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;qDAAwB,+BAAc;GAN9F,iBAAiB,CA2C7B;AA3CY,8CAAiB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { RpcRequest } from '../../requests/RpcRequest';\nimport { RpcCommandInterface } from '../RpcCommandInterface';\nimport { validate, request } from '../../../core/api/Validate';\nimport { Logger as LoggerType } from '../../../core/Logger';\nimport { Types, Core, Targets } from '../../../constants';\nimport { BaseCommand } from '../BaseCommand';\nimport { RpcCommandFactory } from '../../factories/RpcCommandFactory';\nimport { Commands } from '../CommandEnumType';\nimport { CoreRpcService } from '../../services/CoreRpcService';\n\nexport class DaemonRootCommand extends BaseCommand implements RpcCommandInterface<any> {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.CoreRpcService) public coreRpcService: CoreRpcService\n    ) {\n        super(Commands.DAEMON_ROOT);\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * data.params[]:\n     *  [0]: address id\n     *\n     * @param data\n     * @param rpcCommandFactory\n     * @returns {Promise<void>}\n     */\n    @validate()\n    public async execute( @request(RpcRequest) data: RpcRequest, rpcCommandFactory: RpcCommandFactory): Promise<any> {\n        this.log.debug('data.params:', data.params);\n        const command = data.params.shift();\n\n        const response = await this.coreRpcService.call(command, data.params);\n        this.log.debug('response: ', JSON.stringify(response));\n        return response;\n    }\n\n    public usage(): string {\n        return this.getName() + ' <command> [<arg> [<arg> [ ... ]]]  -  ' + this.description();\n    }\n\n    public help(): string {\n        return this.usage() + '\\n'\n            + '    <command>    - string - The command to execute. \\n'\n            + '    <arg>        - string - An argument for the rpc command. ';\n    }\n\n    public description(): string {\n        return 'Perform an rpc command on the Particl daemon.';\n    }\n}\n"]}