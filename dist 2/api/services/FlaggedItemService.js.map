{"version":3,"file":"FlaggedItemService.js","sourceRoot":"","sources":["../../../src/api/services/FlaggedItemService.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAE1C,+CAAuD;AACvD,sDAA4D;AAC5D,uEAAoE;AACpE,iFAA8E;AAE9E,mFAAgF;AAChF,mFAAgF;AAEhF,6DAA0D;AAE1D,IAAa,kBAAkB,GAA/B;IAII,YAC6E,kBAAsC,EAC7B,eAAsC,EACzE,MAAyB;QAFC,uBAAkB,GAAlB,kBAAkB,CAAoB;QAC7B,oBAAe,GAAf,eAAe,CAAuB;QACzE,WAAM,GAAN,MAAM,CAAmB;QAExE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAEY,OAAO;;YAChB,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;QAC1C,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU,EAAE,cAAuB,IAAI;;YACxD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YACxE,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,2BAA2B,EAAE,iBAAiB,CAAC,CAAC;gBAC9D,MAAM,IAAI,qCAAiB,CAAC,EAAE,CAAC,CAAC;YACpC,CAAC;YACD,MAAM,CAAC,WAAW,CAAC;QACvB,CAAC;KAAA;IAGY,MAAM,CAAqC,IAAS;;YAE7D,+DAA+D;YAC/D,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAE5D,kDAAkD;YAClD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAC1D,MAAM,CAAC,cAAc,CAAC;QAC1B,CAAC;KAAA;IAGY,MAAM,CAAC,EAAU,EAAqC,IAAS;;YAExE,wCAAwC;YACxC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAElD,iBAAiB;YACjB,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAEjC,4BAA4B;YAC5B,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,EAAE,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;YAEvF,yBAAyB;YACzB,MAAM,CAAC,kBAAkB,CAAC;QAC9B,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU;;YAC3B,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC3C,CAAC;KAAA;CAEJ,CAAA;AA9BG;IADC,mBAAQ,EAAE;IACW,mBAAA,kBAAO,CAAC,mDAAwB,CAAC,CAAA;;;;gDAQtD;AAGD;IADC,mBAAQ,EAAE;IACsB,mBAAA,kBAAO,CAAC,mDAAwB,CAAC,CAAA;;;;gDAajE;AAlDQ,kBAAkB;IAKtB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;IAChE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,UAAU,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAA;IACzE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CAFsD,uCAAkB;QACZ,6CAAqB;GANnH,kBAAkB,CAwD9B;AAxDY,gDAAkB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { FlaggedItemRepository } from '../repositories/FlaggedItemRepository';\nimport { FlaggedItem } from '../models/FlaggedItem';\nimport { FlaggedItemCreateRequest } from '../requests/FlaggedItemCreateRequest';\nimport { FlaggedItemUpdateRequest } from '../requests/FlaggedItemUpdateRequest';\nimport * as resources from 'resources';\nimport { ListingItemService } from './ListingItemService';\n\nexport class FlaggedItemService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) public listingItemService: ListingItemService,\n        @inject(Types.Repository) @named(Targets.Repository.FlaggedItemRepository) public flaggedItemRepo: FlaggedItemRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<FlaggedItem>> {\n        return this.flaggedItemRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<FlaggedItem> {\n        const flaggedItem = await this.flaggedItemRepo.findOne(id, withRelated);\n        if (flaggedItem === null) {\n            this.log.warn(`FlaggedItem with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return flaggedItem;\n    }\n\n    @validate()\n    public async create( @request(FlaggedItemCreateRequest) body: any): Promise<FlaggedItem> {\n\n        // If the request body was valid we will create the flaggedItem\n        const flaggedItem = await this.flaggedItemRepo.create(body);\n\n        // finally find and return the created flaggedItem\n        const newFlaggedItem = await this.findOne(flaggedItem.id);\n        return newFlaggedItem;\n    }\n\n    @validate()\n    public async update(id: number, @request(FlaggedItemUpdateRequest) body: any): Promise<FlaggedItem> {\n\n        // find the existing one without related\n        const flaggedItem = await this.findOne(id, false);\n\n        // set new values\n        flaggedItem.Reason = body.reason;\n\n        // update flaggedItem record\n        const updatedFlaggedItem = await this.flaggedItemRepo.update(id, flaggedItem.toJSON());\n\n        // return newFlaggedItem;\n        return updatedFlaggedItem;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.flaggedItemRepo.destroy(id);\n    }\n\n}\n"]}