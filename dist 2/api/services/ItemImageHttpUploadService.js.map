{"version":3,"file":"ItemImageHttpUploadService.js","sourceRoot":"","sources":["../../../src/api/services/ItemImageHttpUploadService.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAE1C,+CAAuD;AACvD,sDAA4D;AAE5D,uFAAoF;AACpF,mEAAgE;AAChE,+EAA4E;AAI5E,IAAa,0BAA0B,GAAvC;IAII,YACsF,0BAAsD,EAChE,gBAAkC,EAC3D,MAAyB;QAFU,+BAA0B,GAA1B,0BAA0B,CAA4B;QAChE,qBAAgB,GAAhB,gBAAgB,CAAkB;QAC3D,WAAM,GAAN,MAAM,CAAmB;QAExE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAIY,mBAAmB,CAAkC,aAAqC;;YAEnG,MAAM,iBAAiB,GAA0B,EAAE,CAAC;YACpD,MAAM,mBAAmB,GAAwB,MAAM,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;YAEpI,GAAG,CAAC,CAAC,MAAM,IAAI,IAAI,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7C,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;gBAC/F,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC;YACtD,CAAC;YACD,MAAM,CAAC,iBAAiB,CAAC;QAC7B,CAAC;KAAA;CACJ,CAAA;AAXG;IADC,mBAAQ,EAAE;IACuB,mBAAA,kBAAO,CAAC,+CAAsB,CAAC,CAAA;;6CAAgB,+CAAsB;;qEAUtG;AAxBQ,0BAA0B;IAK9B,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAA;IACxE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAA;IAC9D,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CAFuE,uDAA0B;QAC9C,mCAAgB;GANrG,0BAA0B,CAyBtC;AAzBY,gEAA0B","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { ListingItemTemplate } from '../models/ListingItemTemplate';\nimport { ListingItemTemplateService } from '../services/ListingItemTemplateService';\nimport { ItemImageService } from '../services/ItemImageService';\nimport { ImagePostUploadRequest } from '../requests/ImagePostUploadRequest';\nimport * as resources from 'resources';\nimport { ImageDataProtocolType } from '../enums/ImageDataProtocolType';\n\nexport class ItemImageHttpUploadService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) private listingItemTemplateService: ListingItemTemplateService,\n        @inject(Types.Service) @named(Targets.Service.ItemImageService) private itemImageService: ItemImageService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n\n    @validate()\n    public async httpPostImageUpload(@request(ImagePostUploadRequest) uploadRequest: ImagePostUploadRequest): Promise<resources.ItemImage[]> {\n\n        const createdItemImages: resources.ItemImage[] = [];\n        const listingItemTemplate: ListingItemTemplate = await this.listingItemTemplateService.findOne(uploadRequest.listingItemTemplateId);\n\n        for (const file of uploadRequest.request.files) {\n            const createdItemImage = await this.itemImageService.createFromFile(file, listingItemTemplate);\n            createdItemImages.push(createdItemImage.toJSON());\n        }\n        return createdItemImages;\n    }\n}\n"]}