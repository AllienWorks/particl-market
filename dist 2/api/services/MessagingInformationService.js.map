{"version":3,"file":"MessagingInformationService.js","sourceRoot":"","sources":["../../../src/api/services/MessagingInformationService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ValidationException } from '../exceptions/ValidationException';\n\nimport { MessagingInformationRepository } from '../repositories/MessagingInformationRepository';\nimport { MessagingInformation } from '../models/MessagingInformation';\nimport { MessagingInformationCreateRequest } from '../requests/MessagingInformationCreateRequest';\nimport { MessagingInformationUpdateRequest } from '../requests/MessagingInformationUpdateRequest';\n\nexport class MessagingInformationService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.MessagingInformationRepository) public messagingInformationRepo: MessagingInformationRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<MessagingInformation>> {\n        return this.messagingInformationRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<MessagingInformation> {\n        const messagingInformation = await this.messagingInformationRepo.findOne(id, withRelated);\n        if (messagingInformation === null) {\n            this.log.warn(`MessagingInformation with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return messagingInformation;\n    }\n\n    @validate()\n    public async create( @request(MessagingInformationCreateRequest) body: MessagingInformationCreateRequest): Promise<MessagingInformation> {\n        const startTime = new Date().getTime();\n\n        // this.log.debug('messagingInformationService.create, body: ', JSON.stringify(body, null, 2));\n\n        // todo: could this be annotated in MessagingInformationCreateRequest?\n        if (body.listing_item_id == null && body.listing_item_template_id == null) {\n            throw new ValidationException('Request body is not valid', ['listing_item_id or listing_item_template_id missing']);\n        }\n\n        // If the request body was valid we will create the messagingInformation\n        const messagingInformation = await this.messagingInformationRepo.create(body);\n\n        // finally find and return the created messagingInformation\n        const newMessagingInformation = await this.findOne(messagingInformation.Id);\n\n        // this.log.debug('messagingInformationService.create: ' + (new Date().getTime() - startTime) + 'ms');\n        return newMessagingInformation;\n    }\n\n    @validate()\n    public async update(id: number, @request(MessagingInformationUpdateRequest) body: MessagingInformationUpdateRequest): Promise<MessagingInformation> {\n\n        // todo: could this be annotated in MessagingInformationCreateRequest?\n        if (body.listing_item_id == null && body.listing_item_template_id == null) {\n            throw new ValidationException('Request body is not valid', ['listing_item_id or listing_item_template_id missing']);\n        }\n\n        // find the existing one without related\n        const messagingInformation = await this.findOne(id, false);\n\n        // set new values\n        messagingInformation.Protocol = body.protocol;\n        messagingInformation.PublicKey = body.publicKey;\n\n        // update messagingInformation record\n        const updatedMessagingInformation = await this.messagingInformationRepo.update(id, messagingInformation.toJSON());\n        return updatedMessagingInformation;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.messagingInformationRepo.destroy(id);\n    }\n\n}\n"]}