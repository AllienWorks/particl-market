{"version":3,"file":"SmsgMessageService.js","sourceRoot":"","sources":["../../../src/api/services/SmsgMessageService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { SmsgMessageRepository } from '../repositories/SmsgMessageRepository';\nimport { SmsgMessage } from '../models/SmsgMessage';\nimport { SmsgMessageCreateRequest } from '../requests/SmsgMessageCreateRequest';\nimport { SmsgMessageUpdateRequest } from '../requests/SmsgMessageUpdateRequest';\nimport { SmsgMessageSearchParams } from '../requests/SmsgMessageSearchParams';\nimport {SmsgMessageStatus} from '../enums/SmsgMessageStatus';\nimport * as resources from 'resources';\n\nexport class SmsgMessageService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.SmsgMessageRepository) public smsgMessageRepo: SmsgMessageRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async searchBy(options: SmsgMessageSearchParams, withRelated: boolean = true): Promise<Bookshelf.Collection<SmsgMessage>> {\n        const result = await this.smsgMessageRepo.searchBy(options, withRelated);\n        // this.log.debug('searchBy, result: ', JSON.stringify(result.toJSON(), null, 2));\n        return result;\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<SmsgMessage>> {\n        return this.smsgMessageRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<SmsgMessage> {\n        const smsgMessage = await this.smsgMessageRepo.findOne(id, withRelated);\n        if (smsgMessage === null) {\n            this.log.warn(`SmsgMessage with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return smsgMessage;\n    }\n\n    public async findOneByMsgId(msgId: string, withRelated: boolean = true): Promise<SmsgMessage> {\n        const smsgMessage = await this.smsgMessageRepo.findOneByMsgId(msgId, withRelated);\n        if (smsgMessage === null) {\n            this.log.warn(`SmsgMessage with the msgid=${msgId} was not found!`);\n            throw new NotFoundException(msgId);\n        }\n        return smsgMessage;\n    }\n\n    @validate()\n    public async create( @request(SmsgMessageCreateRequest) data: SmsgMessageCreateRequest): Promise<SmsgMessage> {\n\n        const body = JSON.parse(JSON.stringify(data));\n        // this.log.debug('create SmsgMessage, body: ', JSON.stringify(body, null, 2));\n\n        // If the request body was valid we will create the smsgMessage\n        const smsgMessage = await this.smsgMessageRepo.create(body);\n\n        // finally find and return the created smsgMessage\n        const newSmsgMessage = await this.findOne(smsgMessage.id);\n        return newSmsgMessage;\n    }\n\n    @validate()\n    public async update(id: number, @request(SmsgMessageUpdateRequest) body: SmsgMessageUpdateRequest): Promise<SmsgMessage> {\n\n        // find the existing one without related\n        const smsgMessage = await this.findOne(id, false);\n\n        // set new values\n        smsgMessage.Type = body.type;\n        smsgMessage.Status = body.status;\n        smsgMessage.Msgid = body.msgid;\n        smsgMessage.Version = body.version;\n        smsgMessage.Read = body.read;\n        smsgMessage.Paid = body.paid;\n        smsgMessage.Payloadsize = body.payloadsize;\n        smsgMessage.Received = body.received;\n        smsgMessage.Sent = body.sent;\n        smsgMessage.Expiration = body.expiration;\n        smsgMessage.Daysretention = body.daysretention;\n        smsgMessage.From = body.from;\n        smsgMessage.To = body.to;\n        smsgMessage.Text = body.text;\n\n        // update smsgMessage record\n        const updatedSmsgMessage = await this.smsgMessageRepo.update(id, smsgMessage.toJSON());\n\n        // const newSmsgMessage = await this.findOne(id);\n        // return newSmsgMessage;\n\n        return updatedSmsgMessage;\n    }\n\n    /**\n     * update the status of the processed message, clean the text field if processing was successfull\n     *\n     * @param {module:resources.SmsgMessage} message\n     * @param {SmsgMessageStatus} status\n     * @returns {Promise<module:resources.SmsgMessage>}\n     */\n    public async updateSmsgMessageStatus(message: resources.SmsgMessage, status: SmsgMessageStatus): Promise<SmsgMessage> {\n\n        const text = status === SmsgMessageStatus.PROCESSED ? '' : message.text;\n\n        const updateRequest = {\n            type: message.type.toString(),\n            status,\n            msgid: message.msgid,\n            version: message.version,\n            read: message.read,\n            paid: message.paid,\n            payloadsize: message.payloadsize,\n            received: message.received,\n            sent: message.sent,\n            expiration: message.expiration,\n            daysretention: message.daysretention,\n            from: message.from,\n            to: message.to,\n            text\n        } as SmsgMessageUpdateRequest;\n\n        // this.log.debug('message:', JSON.stringify(message, null, 2));\n        // this.log.debug('updateRequest:', JSON.stringify(updateRequest, null, 2));\n\n        return await this.update(message.id, updateRequest);\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.smsgMessageRepo.destroy(id);\n    }\n\n}\n"]}