{"version":3,"file":"CurrencyPriceService.js","sourceRoot":"","sources":["../../../src/api/services/CurrencyPriceService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { CurrencyPriceRepository } from '../repositories/CurrencyPriceRepository';\nimport { CurrencyPrice } from '../models/CurrencyPrice';\nimport { CurrencyPriceCreateRequest } from '../requests/CurrencyPriceCreateRequest';\nimport { CurrencyPriceUpdateRequest } from '../requests/CurrencyPriceUpdateRequest';\nimport { CurrencyPriceParams } from '../requests/CurrencyPriceParams';\nimport * as Request from 'request';\nimport { MessageException } from '../exceptions/MessageException';\nimport { SupportedCurrencies } from '../enums/SupportedCurrencies';\nimport * as resources from 'resources';\n\nexport class CurrencyPriceService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.CurrencyPriceRepository) public currencyPriceRepo: CurrencyPriceRepository,\n        @inject(Types.Lib) @named('request') private apiRequest: typeof Request,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<CurrencyPrice>> {\n        return this.currencyPriceRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<CurrencyPrice> {\n        const currencyPrice = await this.currencyPriceRepo.findOne(id, withRelated);\n        if (currencyPrice === null) {\n            this.log.warn(`CurrencyPrice with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return currencyPrice;\n    }\n\n    /**\n     * search CurrencyPrice using given CurrencyPriceParams\n     *\n     * @param options\n     * @returns {Promise<CurrencyPrice>}\n     */\n    @validate()\n    public async search(@request(CurrencyPriceParams) options: CurrencyPriceParams): Promise<CurrencyPrice> {\n        return await this.currencyPriceRepo.search(options);\n    }\n\n    /**\n     *\n     * example: toCurrencies[] = [INR, USD, EUR, GBP]\n     *\n     * description: from argument must be PART for now and toCurrencies is an array of toCurrencies like [INR, USD, EUR, GBP].\n     *\n     * @param {string} fromCurrency name (PART for now)\n     * @param {string[]} toCurrencies array of toCurrencies\n     * @returns {Promise<\"resources\".CurrencyPrice[]>}\n     */\n    public async getCurrencyPrices(fromCurrency: string, toCurrencies: string[]): Promise<resources.CurrencyPrice[]> {\n\n        const returnData: any = [];\n        for (let toCurrency of toCurrencies) {\n            toCurrency = toCurrency.toUpperCase();\n            // check for valid currency\n            if (SupportedCurrencies[toCurrency]) {\n                const currencyPriceModel: CurrencyPrice = await this.search({\n                    from: fromCurrency,\n                    to: toCurrency\n                } as CurrencyPriceParams);\n\n                const currency = currencyPriceModel && currencyPriceModel.toJSON();\n                this.log.debug('currency:', currency);\n\n                // check if currency already exist in the db then update the price\n                if (currency) {\n                    const needToUpdate = await this.needToUpdate(currency.updatedAt);\n                    if (needToUpdate) {\n                        // get the update currency price\n                        const updatedCurrency = await this.getUpdatedCurrencyPrice(fromCurrency, toCurrency);\n                        // update the existing currency price\n                        const updatedCurrencyPrice = await this.update(currency.id, {\n                            from: fromCurrency,\n                            to: toCurrency,\n                            price: updatedCurrency.result\n                        } as CurrencyPriceUpdateRequest);\n\n                        returnData.push(updatedCurrencyPrice.toJSON());\n                    } else {\n                        returnData.push(currency);\n                    }\n                } else {\n                    // get the update currency price\n                    const updatedCurrency = await this.getUpdatedCurrencyPrice(fromCurrency, toCurrency);\n                    // create the new currency price\n                    const createdCurrencyPrice = await this.create({\n                        from: fromCurrency,\n                        to: toCurrency,\n                        price: updatedCurrency.result\n                    } as CurrencyPriceCreateRequest);\n\n                    returnData.push(createdCurrencyPrice.toJSON());\n                }\n            } else {\n                throw new MessageException(`Invalid or unsupported currency: ${toCurrency}.`);\n            }\n        }\n        // this.log.debug('currencyData: ', returnData);\n        return returnData;\n    }\n\n    @validate()\n    public async create( @request(CurrencyPriceCreateRequest) body: CurrencyPriceCreateRequest): Promise<CurrencyPrice> {\n\n        // If the request body was valid we will create the currencyPrice\n        const currencyPrice = await this.currencyPriceRepo.create(body);\n\n        // finally find and return the created currencyPrice\n        const newCurrencyPrice = await this.findOne(currencyPrice.id);\n        return newCurrencyPrice;\n    }\n\n    @validate()\n    public async update(id: number, @request(CurrencyPriceUpdateRequest) body: CurrencyPriceUpdateRequest): Promise<CurrencyPrice> {\n\n        // find the existing one without related\n        const currencyPrice = await this.findOne(id, false);\n\n        // set new values\n        currencyPrice.From = body.from;\n        currencyPrice.To = body.to;\n        currencyPrice.Price = body.price;\n\n        // update currencyPrice record\n        const updatedCurrencyPrice = await this.currencyPriceRepo.update(id, currencyPrice.toJSON());\n\n        // return newCurrencyPrice;\n        return updatedCurrencyPrice;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.currencyPriceRepo.destroy(id);\n    }\n\n    /**\n     * get the updated currency price\n     * fromCurrency: PART (must be PART for now)\n     * toCurrency: another currencies for which we want to convert\n     * @returns {Promise<any>}\n     */\n\n    private async getUpdatedCurrencyPrice(fromCurrency: string, toCurrency: string): Promise<any> {\n        try {\n            return new Promise<any>((resolve, reject) => {\n                this.apiRequest.get(\n                    process.env.CHASING_COINS_API + '/' + fromCurrency + '/' + toCurrency,\n                    {\n                        strictSSL: false\n                    }, async (error: any, response: Request.RequestResponse, body: any) => {\n                    if (error || body.includes('Undefined property')) {\n                        this.log.error('error while fetching currencyprice:', error);\n                        reject(error);\n                    } else {\n                        resolve(JSON.parse(body));\n                    }\n                });\n            }).catch(() => {\n                throw new MessageException(`Invalid or unsupported currency, <${toCurrency}> or <${fromCurrency}>.`);\n            });\n        } catch (err) {\n            throw new MessageException(`Cannot add currency price ${err}.`);\n        }\n    }\n\n    /**\n     * currencyUpdatedAt: timestamp\n     * @returns {Promise<boolean>}\n     */\n\n    private async needToUpdate(currencyUpdatedAt: number): Promise<boolean> {\n        const current: any = new Date().getTime();\n        const ticker: any = new Date(currencyUpdatedAt).getTime();\n        // check if the results in db are older than 60 second\n        const secondsSinceUpdate = ((current - ticker) / 1000);\n        this.log.debug('secondsSinceUpdate:', secondsSinceUpdate);\n        return ( secondsSinceUpdate > Number(process.env.CHASING_COINS_API_DELAY));\n    }\n}\n"]}