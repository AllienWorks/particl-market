{"version":3,"file":"OrderItemObjectService.js","sourceRoot":"","sources":["../../../src/api/services/OrderItemObjectService.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAE1C,+CAAuD;AACvD,sDAA4D;AAC5D,uEAAoE;AACpE,yFAAsF;AAEtF,2FAAwF;AACxF,2FAAwF;AAGxF,IAAa,sBAAsB,GAAnC;IAII,YAC0F,mBAA8C,EACrF,MAAyB;QADc,wBAAmB,GAAnB,mBAAmB,CAA2B;QACrF,WAAM,GAAN,MAAM,CAAmB;QAExE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAEY,OAAO;;YAChB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,CAAC;QAC9C,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU,EAAE,cAAuB,IAAI;;YACxD,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YAChF,EAAE,CAAC,CAAC,eAAe,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,+BAA+B,EAAE,iBAAiB,CAAC,CAAC;gBAClE,MAAM,IAAI,qCAAiB,CAAC,EAAE,CAAC,CAAC;YACpC,CAAC;YACD,MAAM,CAAC,eAAe,CAAC;QAC3B,CAAC;KAAA;IAGY,MAAM,CAAyC,IAAkC;;YAE1F,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAE9C,mFAAmF;YAEnF,mEAAmE;YACnE,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACzE,MAAM,eAAe,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC;YAEtD,sDAAsD;YACtD,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAClE,MAAM,CAAC,kBAAkB,CAAC;QAC9B,CAAC;KAAA;IAGY,MAAM,CAAC,EAAU,EAAyC,IAAkC;;YAErG,wCAAwC;YACxC,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAEtD,iBAAiB;YACjB,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YACrC,eAAe,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YAE3C,gCAAgC;YAChC,MAAM,sBAAsB,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE,EAAE,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;YACnG,MAAM,CAAC,sBAAsB,CAAC;QAClC,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU;;YAC3B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,2BAA2B,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC/C,CAAC;KAAA;CAEJ,CAAA;AAnCG;IADC,mBAAQ,EAAE;IACW,mBAAA,kBAAO,CAAC,2DAA4B,CAAC,CAAA;;6CAAO,2DAA4B;;oDAa7F;AAGD;IADC,mBAAQ,EAAE;IACsB,mBAAA,kBAAO,CAAC,2DAA4B,CAAC,CAAA;;qDAAO,2DAA4B;;oDAYxG;AArDQ,sBAAsB;IAK1B,mBAAA,kBAAM,CAAC,iBAAK,CAAC,UAAU,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,UAAU,CAAC,yBAAyB,CAAC,CAAA;IAC7E,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CADoE,qDAAyB;GAL/H,sBAAsB,CA4DlC;AA5DY,wDAAsB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { OrderItemObjectRepository } from '../repositories/OrderItemObjectRepository';\nimport { OrderItemObject } from '../models/OrderItemObject';\nimport { OrderItemObjectCreateRequest } from '../requests/OrderItemObjectCreateRequest';\nimport { OrderItemObjectUpdateRequest } from '../requests/OrderItemObjectUpdateRequest';\n\n\nexport class OrderItemObjectService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.OrderItemObjectRepository) public orderItemObjectRepo: OrderItemObjectRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<OrderItemObject>> {\n        return this.orderItemObjectRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<OrderItemObject> {\n        const orderItemObject = await this.orderItemObjectRepo.findOne(id, withRelated);\n        if (orderItemObject === null) {\n            this.log.warn(`OrderItemObject with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return orderItemObject;\n    }\n\n    @validate()\n    public async create( @request(OrderItemObjectCreateRequest) data: OrderItemObjectCreateRequest): Promise<OrderItemObject> {\n\n        const body = JSON.parse(JSON.stringify(data));\n\n        // this.log.debug('create OrderItemObject, body: ', JSON.stringify(body, null, 2));\n\n        // If the request body was valid we will create the orderItemObject\n        const orderItemObjectModel = await this.orderItemObjectRepo.create(body);\n        const orderItemObject = orderItemObjectModel.toJSON();\n\n        // finally find and return the created orderItemObject\n        const newOrderItemObject = await this.findOne(orderItemObject.id);\n        return newOrderItemObject;\n    }\n\n    @validate()\n    public async update(id: number, @request(OrderItemObjectUpdateRequest) body: OrderItemObjectUpdateRequest): Promise<OrderItemObject> {\n\n        // find the existing one without related\n        const orderItemObject = await this.findOne(id, false);\n\n        // set new values\n        orderItemObject.DataId = body.dataId;\n        orderItemObject.DataValue = body.dataValue;\n\n        // update orderItemObject record\n        const updatedOrderItemObject = await this.orderItemObjectRepo.update(id, orderItemObject.toJSON());\n        return updatedOrderItemObject;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        this.log.debug('removing orderItemObject:', id);\n        await this.orderItemObjectRepo.destroy(id);\n    }\n\n}\n"]}