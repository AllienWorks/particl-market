{"version":3,"file":"FavoriteItemService.js","sourceRoot":"","sources":["../../../src/api/services/FavoriteItemService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { FavoriteItemRepository } from '../repositories/FavoriteItemRepository';\nimport { FavoriteItem } from '../models/FavoriteItem';\nimport { FavoriteItemCreateRequest } from '../requests/FavoriteItemCreateRequest';\nimport { FavoriteItemUpdateRequest } from '../requests/FavoriteItemUpdateRequest';\nimport { ListingItemService } from './ListingItemService';\nimport { ProfileService } from './ProfileService';\n\nexport class FavoriteItemService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.FavoriteItemRepository) public favoriteItemRepo: FavoriteItemRepository,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) public listingItemService: ListingItemService,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) public profileService: ProfileService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<FavoriteItem>> {\n        return this.favoriteItemRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<FavoriteItem> {\n        const favoriteItem = await this.favoriteItemRepo.findOne(id, withRelated);\n        if (favoriteItem === null) {\n            this.log.warn(`FavoriteItem with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return favoriteItem;\n    }\n\n    /**\n     * search favorite item by profileId and itemId\n     *\n     * @param {number} profileId\n     * @param {number} itemId\n     * @param {boolean} withRelated\n     * @returns {Promise<FavoriteItem>}\n     */\n    public async findOneByProfileIdAndListingItemId(profileId: number, itemId: number, withRelated: boolean = true): Promise<FavoriteItem> {\n        const favoriteItem = await this.favoriteItemRepo.findOneByProfileIdAndListingItemId(profileId, itemId, withRelated);\n        if (favoriteItem === null) {\n            this.log.warn(`FavoriteItem with the profileId=${profileId} or listingItemId=${itemId} was not found!`);\n            throw new NotFoundException(profileId + ' or ' + itemId);\n        }\n        return favoriteItem;\n    }\n\n    /**\n     * find favorite item by profileId\n     *\n     * @param profileId\n     * @param withRelated\n     * @returns {Promise<Bookshelf.Collection<FavoriteItem>> }\n     */\n    public async findAllByProfileId(profileId: number, withRelated: boolean): Promise<Bookshelf.Collection<FavoriteItem>> {\n        return this.favoriteItemRepo.findAllByProfileId(profileId, withRelated);\n    }\n\n\n    @validate()\n    public async create( @request(FavoriteItemCreateRequest) body: FavoriteItemCreateRequest): Promise<FavoriteItem> {\n\n        // If the request body was valid we will create the favoriteItem\n        const favoriteItem = await this.favoriteItemRepo.create(body);\n\n        // finally find and return the created favoriteItem\n        const newFavoriteItem = await this.findOne(favoriteItem.Id);\n        return newFavoriteItem;\n    }\n\n\n    @validate()\n    public async update(id: number, @request(FavoriteItemUpdateRequest) body: FavoriteItemUpdateRequest): Promise<FavoriteItem> {\n\n        // find the existing one without related\n        const favoriteItem = await this.findOne(id, false);\n\n        // set new values\n        // update favoriteItem record\n        const updatedFavoriteItem = await this.favoriteItemRepo.update(id, body);\n        return updatedFavoriteItem;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.favoriteItemRepo.destroy(id);\n    }\n\n}\n"]}