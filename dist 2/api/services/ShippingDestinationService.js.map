{"version":3,"file":"ShippingDestinationService.js","sourceRoot":"","sources":["../../../src/api/services/ShippingDestinationService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ShippingDestinationRepository } from '../repositories/ShippingDestinationRepository';\nimport { ShippingDestination } from '../models/ShippingDestination';\nimport { ShippingDestinationCreateRequest } from '../requests/ShippingDestinationCreateRequest';\nimport { ShippingDestinationUpdateRequest } from '../requests/ShippingDestinationUpdateRequest';\nimport { RpcRequest } from '../requests/RpcRequest';\nimport { ShippingDestinationSearchParams } from '../requests/ShippingDestinationSearchParams';\n\nexport class ShippingDestinationService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.ShippingDestinationRepository) public shippingDestinationRepo: ShippingDestinationRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ShippingDestination>> {\n        return this.shippingDestinationRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ShippingDestination> {\n        const shippingDestination = await this.shippingDestinationRepo.findOne(id, withRelated);\n        if (shippingDestination === null) {\n            this.log.warn(`ShippingDestination with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return shippingDestination;\n    }\n\n    /**\n     * options:\n     *  item_information_id: options.item_information_id\n     *  country: options.options\n     *  shipping_availability: options.shipping_availability\n     *\n     * @param {ShippingDestinationSearchParams} options\n     * @returns {Promise<ShippingDestination>}\n     */\n    @validate()\n    public async search(\n        @request(ShippingDestinationCreateRequest) options: ShippingDestinationSearchParams): Promise<ShippingDestination> {\n        return this.shippingDestinationRepo.search(options);\n    }\n\n    @validate()\n    public async create( @request(ShippingDestinationCreateRequest) body: ShippingDestinationCreateRequest): Promise<ShippingDestination> {\n        const startTime = new Date().getTime();\n\n        // If the request body was valid we will create the shippingDestination\n        const shippingDestination = await this.shippingDestinationRepo.create(body);\n\n        // finally find and return the created shippingDestination\n        const newShippingDestination = await this.findOne(shippingDestination.id);\n\n        // this.log.debug('shippingDestinationService.create: ' + (new Date().getTime() - startTime) + 'ms');\n        return newShippingDestination;\n    }\n\n    @validate()\n    public async update(id: number, @request(ShippingDestinationUpdateRequest) body: ShippingDestinationUpdateRequest): Promise<ShippingDestination> {\n\n        // find the existing one without related\n        const shippingDestination = await this.findOne(id, false);\n\n        // set new values\n        shippingDestination.Country = body.country;\n        shippingDestination.ShippingAvailability = body.shippingAvailability;\n\n        // update shippingDestination record\n        const updatedShippingDestination = await this.shippingDestinationRepo.update(id, shippingDestination.toJSON());\n        return updatedShippingDestination;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.shippingDestinationRepo.destroy(id);\n    }\n}\n"]}