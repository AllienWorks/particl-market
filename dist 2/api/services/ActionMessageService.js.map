{"version":3,"file":"ActionMessageService.js","sourceRoot":"","sources":["../../../src/api/services/ActionMessageService.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAE1C,+CAAuD;AACvD,sDAA4D;AAC5D,4BAA4B;AAC5B,uEAAoE;AACpE,qEAAkE;AAElE,qFAAkF;AAElF,uFAAoF;AAEpF,6DAA0D;AAC1D,iEAA8D;AAC9D,6DAA0D;AAC1D,iEAA8D;AAE9D,mDAAgD;AAChD,4EAAyE;AAEzE,4EAAyE;AAGzE,IAAa,oBAAoB,GAAjC;IAII,YAC8E,kBAAsC,EACpC,oBAA0C,EAC5C,kBAAsC,EACpC,oBAA0C,EAClD,aAA4B,EACpB,oBAA0C,EAClC,iBAA0C,EAC/E,MAAyB;QAPE,uBAAkB,GAAlB,kBAAkB,CAAoB;QACpC,yBAAoB,GAApB,oBAAoB,CAAsB;QAC5C,uBAAkB,GAAlB,kBAAkB,CAAoB;QACpC,yBAAoB,GAApB,oBAAoB,CAAsB;QAClD,kBAAa,GAAb,aAAa,CAAe;QACpB,yBAAoB,GAApB,oBAAoB,CAAsB;QAClC,sBAAiB,GAAjB,iBAAiB,CAAyB;QAC/E,WAAM,GAAN,MAAM,CAAmB;QAExE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAEY,OAAO;;YAChB,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;QAC5C,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU,EAAE,cAAuB,IAAI;;YACxD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YAC5E,EAAE,CAAC,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,6BAA6B,EAAE,iBAAiB,CAAC,CAAC;gBAChE,MAAM,IAAI,qCAAiB,CAAC,EAAE,CAAC,CAAC;YACpC,CAAC;YACD,MAAM,CAAC,aAAa,CAAC;QACzB,CAAC;KAAA;IAGY,MAAM,CAAuC,IAAgC;;YACtF,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YAEvC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9C,iFAAiF;YAEjF,MAAM,wBAAwB,GAAG,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;YACjD,MAAM,0BAA0B,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;YACrD,MAAM,wBAAwB,GAAG,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;YACjD,MAAM,oBAAoB,GAAG,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;YAEhD,OAAO,IAAI,CAAC,IAAI,CAAC;YACjB,OAAO,IAAI,CAAC,MAAM,CAAC;YACnB,OAAO,IAAI,CAAC,IAAI,CAAC;YACjB,OAAO,IAAI,CAAC,OAAO,CAAC;YAEpB,iEAAiE;YACjE,IAAI,kBAAkB,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACnE,IAAI,aAAa,GAAG,kBAAkB,CAAC,MAAM,EAAE,CAAC;YAEhD,qFAAqF;YACrF,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC;gBACvC,wBAAwB,CAAC,iBAAiB,GAAG,aAAa,CAAC,EAAE,CAAC;gBAC9D,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC;gBACxF,MAAM,WAAW,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC;gBAC9C,iFAAiF;YACrF,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC;gBACzC,0BAA0B,CAAC,iBAAiB,GAAG,aAAa,CAAC,EAAE,CAAC;gBAChE,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;gBAC9F,MAAM,aAAa,GAAG,kBAAkB,CAAC,MAAM,EAAE,CAAC;gBAClD,qFAAqF;YACzF,CAAC;YAED,mGAAmG;YACnG,wBAAwB,CAAC,iBAAiB,GAAG,aAAa,CAAC,EAAE,CAAC;YAC9D,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC;YACxF,MAAM,WAAW,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC;YAC9C,iFAAiF;YAEjF,wBAAwB;YAExB,0EAA0E;YAC1E,GAAG,CAAC,CAAC,MAAM,MAAM,IAAI,oBAAoB,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,iBAAiB,GAAG,aAAa,CAAC,EAAE,CAAC;gBAC5C,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAC1E,MAAM,aAAa,GAAG,kBAAkB,CAAC,MAAM,EAAE,CAAC;gBAClD,qFAAqF;YACzF,CAAC;YACD,kBAAkB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAC1D,aAAa,GAAG,kBAAkB,CAAC,MAAM,EAAE,CAAC;YAC5C,qFAAqF;YACrF,+FAA+F;YAE/F,MAAM,CAAC,kBAAkB,CAAC;QAC9B,CAAC;KAAA;IAED;;;;;;OAMG;IACU,0BAA0B,CAAC,KAAuB,EAAE,WAAkC;;YAE/F,MAAM,OAAO,GAAG,KAAK,CAAC,kBAAkB,CAAC;YAEzC,EAAE,CAAC,CAAwB,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC1C,aAAa;gBACb,8EAA8E;gBAC9E,uCAAuC;gBAEvC,uBAAuB;gBACvB,+FAA+F;gBAC/F,iDAAiD;gBAEjD,uBAAuB;gBAEvB,MAAM,0BAA0B,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,WAAW,CAAC,EAAE,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;gBACjI,iHAAiH;gBAEjH,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;gBACpE,MAAM,CAAC,aAAa,CAAC;YAEzB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAwB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC7C,aAAa;gBACb,8EAA8E;gBAC9E,uCAAuC;gBAEvC,uBAAuB;gBACvB,2FAA2F;gBAC3F,iDAAiD;gBAEjD,MAAM,qBAAqB,GAAG;oBAC1B,MAAM,EAAE,+CAAsB,CAAC,WAAW;oBAC1C,IAAI,EAAE,WAAW,CAAC,IAAI;oBACtB,OAAO,EAAE,CAAC;4BACN,EAAE,EAAE,QAAQ;4BACZ,KAAK,EAAE,KAAK,CAAC,WAAW,CAAC,IAAI;yBAChC,CAAC;iBACoB,CAAC;gBAE3B,uBAAuB;gBACvB,MAAM,0BAA0B,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,qBAAqB,EAAE,WAAW,CAAC,EAAE,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;gBACtI,iHAAiH;gBAEjH,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;gBACpE,MAAM,CAAC,aAAa,CAAC;YACzB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,IAAI,mCAAgB,CAAC,qCAAqC,CAAC,CAAC;YACtE,CAAC;QACL,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU;;YAC3B,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC7C,CAAC;KAAA;CAEJ,CAAA;AAvHG;IADC,mBAAQ,EAAE;IACW,mBAAA,kBAAO,CAAC,uDAA0B,CAAC,CAAA;;6CAAO,uDAA0B;;kDAwDzF;AAvFQ,oBAAoB;IAKxB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;IAChE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;IAClE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;IAChE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;IAClE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAA;IAC3D,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;IAClE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,UAAU,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAA;IAC3E,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CAPuD,uCAAkB;QACd,2CAAoB;QACxB,uCAAkB;QACd,2CAAoB;QACnC,6BAAa;QACE,2CAAoB;QACf,iDAAuB;GAXzH,oBAAoB,CAsJhC;AAtJY,oDAAoB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport * as _ from 'lodash';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { MessageException } from '../exceptions/MessageException';\nimport { NotImplementedException } from '../exceptions/NotImplementedException';\nimport { ActionMessageRepository } from '../repositories/ActionMessageRepository';\nimport { ActionMessage } from '../models/ActionMessage';\nimport { ActionMessageCreateRequest } from '../requests/ActionMessageCreateRequest';\nimport { ActionMessageUpdateRequest } from '../requests/ActionMessageUpdateRequest';\nimport { MessageInfoService } from './MessageInfoService';\nimport { MessageEscrowService } from './MessageEscrowService';\nimport { MessageDataService } from './MessageDataService';\nimport { MessageObjectService } from './MessageObjectService';\nimport { MarketplaceEvent } from '../messages/MarketplaceEvent';\nimport { MarketService } from './MarketService';\nimport { ActionMessageFactory } from '../factories/ActionMessageFactory';\nimport { ListingItemAddMessage } from '../messages/ListingItemAddMessage';\nimport { ListingItemMessageType } from '../enums/ListingItemMessageType';\nimport * as resources from 'resources';\n\nexport class ActionMessageService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.MessageInfoService) private messageInfoService: MessageInfoService,\n        @inject(Types.Service) @named(Targets.Service.MessageEscrowService) private messageEscrowService: MessageEscrowService,\n        @inject(Types.Service) @named(Targets.Service.MessageDataService) private messageDataService: MessageDataService,\n        @inject(Types.Service) @named(Targets.Service.MessageObjectService) private messageObjectService: MessageObjectService,\n        @inject(Types.Service) @named(Targets.Service.MarketService) public marketService: MarketService,\n        @inject(Types.Factory) @named(Targets.Factory.ActionMessageFactory) private actionMessageFactory: ActionMessageFactory,\n        @inject(Types.Repository) @named(Targets.Repository.ActionMessageRepository) public actionMessageRepo: ActionMessageRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ActionMessage>> {\n        return this.actionMessageRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ActionMessage> {\n        const actionMessage = await this.actionMessageRepo.findOne(id, withRelated);\n        if (actionMessage === null) {\n            this.log.warn(`ActionMessage with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return actionMessage;\n    }\n\n    @validate()\n    public async create( @request(ActionMessageCreateRequest) data: ActionMessageCreateRequest): Promise<ActionMessage> {\n        const startTime = new Date().getTime();\n\n        const body = JSON.parse(JSON.stringify(data));\n        // this.log.debug('create ActionMessage, body: ', JSON.stringify(body, null, 2));\n\n        const messageInfoCreateRequest = body.info || {};\n        const messageEscrowCreateRequest = body.escrow || {};\n        const messageDataCreateRequest = body.data || {};\n        const actionMessageObjects = body.objects || [];\n\n        delete body.info;\n        delete body.escrow;\n        delete body.data;\n        delete body.objects;\n\n        // If the request body was valid we will create the actionMessage\n        let actionMessageModel = await this.actionMessageRepo.create(body);\n        let actionMessage = actionMessageModel.toJSON();\n\n        // this.log.debug('created actionMessage: ', JSON.stringify(actionMessage, null, 2));\n        if (!_.isEmpty(messageInfoCreateRequest)) {\n            messageInfoCreateRequest.action_message_id = actionMessage.id;\n            const messageInfoModel = await this.messageInfoService.create(messageInfoCreateRequest);\n            const messageInfo = messageInfoModel.toJSON();\n            // this.log.debug('created messageInfo: ', JSON.stringify(messageInfo, null, 2));\n        }\n\n        if (!_.isEmpty(messageEscrowCreateRequest)) {\n            messageEscrowCreateRequest.action_message_id = actionMessage.id;\n            const messageEscrowModel = await this.messageEscrowService.create(messageEscrowCreateRequest);\n            const messageEscrow = messageEscrowModel.toJSON();\n            // this.log.debug('created messageEscrow: ', JSON.stringify(messageEscrow, null, 2));\n        }\n\n        // this.log.debug('messageDataCreateRequest: ', JSON.stringify(messageDataCreateRequest, null, 2));\n        messageDataCreateRequest.action_message_id = actionMessage.id;\n        const messageDataModel = await this.messageDataService.create(messageDataCreateRequest);\n        const messageData = messageDataModel.toJSON();\n        // this.log.debug('created messageData: ', JSON.stringify(messageData, null, 2));\n\n        // create messageobjects\n\n        // this.log.debug('actionMessageObjects:', JSON.stringify(body, null, 2));\n        for (const object of actionMessageObjects) {\n            object.action_message_id = actionMessage.id;\n            const messageObjectModel = await this.messageObjectService.create(object);\n            const messageObject = messageObjectModel.toJSON();\n            // this.log.debug('created messageObject: ', JSON.stringify(messageObject, null, 2));\n        }\n        actionMessageModel = await this.findOne(actionMessage.id);\n        actionMessage = actionMessageModel.toJSON();\n        // this.log.debug('created actionMessage: ', JSON.stringify(actionMessage, null, 2));\n        // this.log.debug('actionMessageService.create: ' + (new Date().getTime() - startTime) + 'ms');\n\n        return actionMessageModel;\n    }\n\n    /**\n     * save the received ActionMessage to the database\n     *\n     * @param {MarketplaceEvent} event\n     * @param {\"resources\".ListingItem} listingItem\n     * @returns {Promise<ActionMessage>}\n     */\n    public async createFromMarketplaceEvent(event: MarketplaceEvent, listingItem: resources.ListingItem): Promise<ActionMessage> {\n\n        const message = event.marketplaceMessage;\n\n        if (/* message.market &&*/ message.mpaction) {   // ACTIONEVENT\n            // get market\n            // const marketModel = await this.marketService.findByAddress(message.market);\n            // const market = marketModel.toJSON();\n\n            // find the ListingItem\n            // const listingItemModel = await this.listingItemService.findOneByHash(message.mpaction.item);\n            // const listingItem = listingItemModel.toJSON();\n\n            // create ActionMessage\n\n            const actionMessageCreateRequest = await this.actionMessageFactory.getModel(message.mpaction, listingItem.id, event.smsgMessage);\n            // this.log.debug('process(), actionMessageCreateRequest:', JSON.stringify(actionMessageCreateRequest, null, 2));\n\n            const actionMessage = await this.create(actionMessageCreateRequest);\n            return actionMessage;\n\n        } else if (/* message.market &&*/ message.item) { // LISTINGITEM\n            // get market\n            // const marketModel = await this.marketService.findByAddress(message.market);\n            // const market = marketModel.toJSON();\n\n            // find the ListingItem\n            // const listingItemModel = await this.listingItemService.findOneByHash(message.item.hash);\n            // const listingItem = listingItemModel.toJSON();\n\n            const listingItemAddMessage = {\n                action: ListingItemMessageType.MP_ITEM_ADD,\n                item: listingItem.hash,\n                objects: [{\n                    id: 'seller',\n                    value: event.smsgMessage.from\n                }]\n            } as ListingItemAddMessage;\n\n            // create ActionMessage\n            const actionMessageCreateRequest = await this.actionMessageFactory.getModel(listingItemAddMessage, listingItem.id, event.smsgMessage);\n            // this.log.debug('process(), actionMessageCreateRequest:', JSON.stringify(actionMessageCreateRequest, null, 2));\n\n            const actionMessage = await this.create(actionMessageCreateRequest);\n            return actionMessage;\n        } else {\n            throw new MessageException('Marketplace message missing market.');\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.actionMessageRepo.destroy(id);\n    }\n\n}\n"]}