{"version":3,"file":"PaymentInformationService.js","sourceRoot":"","sources":["../../../src/api/services/PaymentInformationService.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,4BAA4B;AAC5B,yCAA0C;AAE1C,+CAAuD;AACvD,sDAA4D;AAC5D,uEAAoE;AACpE,2EAAwE;AAExE,+FAA4F;AAE5F,iGAA8F;AAC9F,iGAA8F;AAC9F,mDAAgD;AAChD,yDAAsD;AAEtD,IAAa,yBAAyB,GAAtC;IAII,YAC2E,gBAAkC,EACrC,aAA4B,EACP,sBAAoD,EAC9F,MAAyB;QAHD,qBAAgB,GAAhB,gBAAgB,CAAkB;QACrC,kBAAa,GAAb,aAAa,CAAe;QACP,2BAAsB,GAAtB,sBAAsB,CAA8B;QAC9F,WAAM,GAAN,MAAM,CAAmB;QAExE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAEY,OAAO;;YAChB,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAAE,CAAC;QACjD,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU,EAAE,cAAuB,IAAI;;YACxD,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YACtF,EAAE,CAAC,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC9B,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,kCAAkC,EAAE,iBAAiB,CAAC,CAAC;gBACrE,MAAM,IAAI,qCAAiB,CAAC,EAAE,CAAC,CAAC;YACpC,CAAC;YACD,MAAM,CAAC,kBAAkB,CAAC;QAC9B,CAAC;KAAA;IAGY,MAAM,CAA4C,IAAqC;;YAChG,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YAEvC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAE9C,oDAAoD;YACpD,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,IAAI,IAAI,CAAC,wBAAwB,IAAI,IAAI,CAAC,CAAC,CAAC;gBACxE,MAAM,IAAI,yCAAmB,CAAC,2BAA2B,EAAE,CAAC,qDAAqD,CAAC,CAAC,CAAC;YACxH,CAAC;YAED,iDAAiD;YACjD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAC3B,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YACjC,OAAO,IAAI,CAAC,MAAM,CAAC;YACnB,OAAO,IAAI,CAAC,SAAS,CAAC;YAEtB,sEAAsE;YACtE,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAE1E,gCAAgC;YAChC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,sBAAsB,GAAG,kBAAkB,CAAC,EAAE,CAAC;gBACtD,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC5C,CAAC;YAED,oCAAoC;YACpC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBACxB,SAAS,CAAC,sBAAsB,GAAG,kBAAkB,CAAC,EAAE,CAAC;gBACzD,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAClD,CAAC;YAED,yDAAyD;YACzD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;YAEzD,oGAAoG;YAEpG,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;KAAA;IAGY,MAAM,CAAC,EAAU,EAA4C,IAAqC;;YAE3G,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAE9C,oDAAoD;YACpD,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,IAAI,IAAI,CAAC,wBAAwB,IAAI,IAAI,CAAC,CAAC,CAAC;gBACxE,MAAM,IAAI,yCAAmB,CAAC,2BAA2B,EAAE,CAAC,qDAAqD,CAAC,CAAC,CAAC;YACxH,CAAC;YAED,wCAAwC;YACxC,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YACzD,iBAAiB;YACjB,kBAAkB,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YAEpC,mCAAmC;YACnC,MAAM,yBAAyB,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,EAAE,EAAE,kBAAkB,CAAC,MAAM,EAAE,CAAC,CAAC;YAE5G,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACd,oCAAoC;gBACpC,IAAI,aAAa,GAAG,yBAAyB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC;gBACzE,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;gBAEnD,wBAAwB;gBACxB,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC5B,aAAa,CAAC,sBAAsB,GAAG,EAAE,CAAC;gBAC1C,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YACnD,CAAC;YACD,oCAAoC;YACpC,IAAI,gBAAgB,GAAG,yBAAyB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,CAAC;YAC/E,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;YAEzD,wBAAwB;YACxB,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC;YAClC,gBAAgB,CAAC,sBAAsB,GAAG,EAAE,CAAC;YAC7C,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;YAErD,yDAAyD;YACzD,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACrD,MAAM,CAAC,qBAAqB,CAAC;QAEjC,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU;;YAC3B,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAClD,CAAC;KAAA;CAEJ,CAAA;AAtFG;IADC,mBAAQ,EAAE;IACW,mBAAA,kBAAO,CAAC,iEAA+B,CAAC,CAAA;;6CAAO,iEAA+B;;uDAqCnG;AAGD;IADC,mBAAQ,EAAE;IACsB,mBAAA,kBAAO,CAAC,iEAA+B,CAAC,CAAA;;qDAAO,iEAA+B;;uDAwC9G;AA3GQ,yBAAyB;IAK7B,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAA;IAC9D,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAA;IAC3D,mBAAA,kBAAM,CAAC,iBAAK,CAAC,UAAU,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAA;IAChF,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CAHkD,mCAAgB;QACtB,6BAAa;QACiB,2DAA4B;GAPxI,yBAAyB,CAiHrC;AAjHY,8DAAyB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ValidationException } from '../exceptions/ValidationException';\nimport { MessageException } from '../exceptions/MessageException';\nimport { PaymentInformationRepository } from '../repositories/PaymentInformationRepository';\nimport { PaymentInformation } from '../models/PaymentInformation';\nimport { PaymentInformationCreateRequest } from '../requests/PaymentInformationCreateRequest';\nimport { PaymentInformationUpdateRequest } from '../requests/PaymentInformationUpdateRequest';\nimport { EscrowService } from './EscrowService';\nimport { ItemPriceService } from './ItemPriceService';\n\nexport class PaymentInformationService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ItemPriceService) public itemPriceService: ItemPriceService,\n        @inject(Types.Service) @named(Targets.Service.EscrowService) public escrowService: EscrowService,\n        @inject(Types.Repository) @named(Targets.Repository.PaymentInformationRepository) public paymentInformationRepo: PaymentInformationRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<PaymentInformation>> {\n        return this.paymentInformationRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<PaymentInformation> {\n        const paymentInformation = await this.paymentInformationRepo.findOne(id, withRelated);\n        if (paymentInformation === null) {\n            this.log.warn(`PaymentInformation with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return paymentInformation;\n    }\n\n    @validate()\n    public async create( @request(PaymentInformationCreateRequest) data: PaymentInformationCreateRequest): Promise<PaymentInformation> {\n        const startTime = new Date().getTime();\n\n        const body = JSON.parse(JSON.stringify(data));\n\n        // ItemInformation needs to be related to either one\n        if (body.listing_item_id == null && body.listing_item_template_id == null) {\n            throw new ValidationException('Request body is not valid', ['listing_item_id or listing_item_template_id missing']);\n        }\n\n        // extract and remove related models from request\n        const escrow = body.escrow;\n        const itemPrice = body.itemPrice;\n        delete body.escrow;\n        delete body.itemPrice;\n\n        // If the request body was valid we will create the paymentInformation\n        const paymentInformation = await this.paymentInformationRepo.create(body);\n\n        // create related models, escrow\n        if (!_.isEmpty(escrow)) {\n            escrow.payment_information_id = paymentInformation.Id;\n            await this.escrowService.create(escrow);\n        }\n\n        // create related models, item price\n        if (!_.isEmpty(itemPrice)) {\n            itemPrice.payment_information_id = paymentInformation.Id;\n            await this.itemPriceService.create(itemPrice);\n        }\n\n        // finally find and return the created paymentInformation\n        const result = await this.findOne(paymentInformation.Id);\n\n        // this.log.debug('paymentInformationService.create: ' + (new Date().getTime() - startTime) + 'ms');\n\n        return result;\n    }\n\n    @validate()\n    public async update(id: number, @request(PaymentInformationUpdateRequest) data: PaymentInformationUpdateRequest): Promise<PaymentInformation> {\n\n        const body = JSON.parse(JSON.stringify(data));\n\n        // ItemInformation needs to be related to either one\n        if (body.listing_item_id == null && body.listing_item_template_id == null) {\n            throw new ValidationException('Request body is not valid', ['listing_item_id or listing_item_template_id missing']);\n        }\n\n        // find the existing one without related\n        const paymentInformation = await this.findOne(id, false);\n        // set new values\n        paymentInformation.Type = body.type;\n\n        // update paymentInformation record\n        const updatedPaymentInformation = await this.paymentInformationRepo.update(id, paymentInformation.toJSON());\n\n        if (body.escrow) {\n            // find related record and delete it\n            let relatedEscrow = updatedPaymentInformation.related('Escrow').toJSON();\n            await this.escrowService.destroy(relatedEscrow.id);\n\n            // recreate related data\n            relatedEscrow = body.escrow;\n            relatedEscrow.payment_information_id = id;\n            await this.escrowService.create(relatedEscrow);\n        }\n        // find related record and delete it\n        let relatedItemPrice = updatedPaymentInformation.related('ItemPrice').toJSON();\n        await this.itemPriceService.destroy(relatedItemPrice.id);\n\n        // recreate related data\n        relatedItemPrice = body.itemPrice;\n        relatedItemPrice.payment_information_id = id;\n        await this.itemPriceService.create(relatedItemPrice);\n\n        // finally find and return the updated paymentInformation\n        const newPaymentInformation = await this.findOne(id);\n        return newPaymentInformation;\n\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.paymentInformationRepo.destroy(id);\n    }\n\n}\n"]}