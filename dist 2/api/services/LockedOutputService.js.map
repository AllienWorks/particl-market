{"version":3,"file":"LockedOutputService.js","sourceRoot":"","sources":["../../../src/api/services/LockedOutputService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { LockedOutputRepository } from '../repositories/LockedOutputRepository';\nimport { LockedOutput } from '../models/LockedOutput';\nimport { LockedOutputCreateRequest } from '../requests/LockedOutputCreateRequest';\nimport { LockedOutputUpdateRequest } from '../requests/LockedOutputUpdateRequest';\nimport * as resources from 'resources';\nimport { CoreRpcService } from './CoreRpcService';\n\n\nexport class LockedOutputService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.CoreRpcService) private coreRpcService: CoreRpcService,\n        @inject(Types.Repository) @named(Targets.Repository.LockedOutputRepository) public lockedOutputRepo: LockedOutputRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<LockedOutput>> {\n        return this.lockedOutputRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<LockedOutput> {\n        const lockedOutput = await this.lockedOutputRepo.findOne(id, withRelated);\n        if (lockedOutput === null) {\n            this.log.warn(`LockedOutput with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return lockedOutput;\n    }\n\n    public async findOneByTxId(txid: string, withRelated: boolean = true): Promise<LockedOutput> {\n        const lockedOutput = await this.lockedOutputRepo.findOneByTxId(txid, withRelated);\n        return lockedOutput;\n    }\n\n    @validate()\n    public async create( @request(LockedOutputCreateRequest) data: LockedOutputCreateRequest): Promise<LockedOutput> {\n\n        const body = JSON.parse(JSON.stringify(data));\n        // this.log.debug('create LockedOutput, body: ', JSON.stringify(body, null, 2));\n\n        // If the request body was valid we will create the lockedOutput\n        const lockedOutput = await this.lockedOutputRepo.create(body).catch(reason => {\n            this.log.error('error:', reason);\n            throw reason;\n        });\n\n        // finally find and return the created lockedOutput\n        const newLockedOutput = await this.findOne(lockedOutput.id);\n        return newLockedOutput;\n    }\n\n    @validate()\n    public async update(id: number, @request(LockedOutputUpdateRequest) body: LockedOutputUpdateRequest): Promise<LockedOutput> {\n\n        // find the existing one without related\n        const lockedOutput = await this.findOne(id, false);\n\n        // set new values\n        lockedOutput.Txid = body.txid;\n        lockedOutput.Vout = body.vout;\n        lockedOutput.Amount = body.amount;\n        lockedOutput.Data = body.data;\n        lockedOutput.Address = body.address;\n        lockedOutput.ScriptPubKey = body.scriptPubKey;\n\n        // update lockedOutput record\n        const updatedLockedOutput = await this.lockedOutputRepo.update(id, lockedOutput.toJSON());\n        return updatedLockedOutput;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.lockedOutputRepo.destroy(id);\n    }\n\n    public async createLockedOutputs(outputs: LockedOutputCreateRequest[], bidId: number): Promise<resources.LockedOutput[]> {\n        const lockedOutputs: resources.LockedOutput[] = [];\n        for (const selectedOutput of outputs) {\n            selectedOutput.bid_id = bidId;\n            const lockedOutputModel = await this.create(selectedOutput);\n            const lockedOutput = lockedOutputModel.toJSON();\n            lockedOutputs.push(lockedOutput);\n        }\n        return lockedOutputs;\n    }\n\n    public async destroyLockedOutputs(outputs: resources.LockedOutput[]): Promise<void> {\n        for (const selectedOutput of outputs) {\n            const lockedOutput = await this.findOneByTxId(selectedOutput.txid);\n            if (lockedOutput) {\n                await this.destroy(lockedOutput.Id);\n            }\n        }\n    }\n\n    public async lockOutputs(outputs: resources.LockedOutput[]): Promise<boolean> {\n        this.log.debug('locking outputs:', JSON.stringify(outputs));\n        const locked = await this.coreRpcService.lockUnspent(false, outputs)\n            .catch(reason => {\n                if (reason.body.error.code === -8) {\n                    // \"message\": \"Invalid parameter, output already locked\"\n                    return true;\n                }\n                throw reason;\n            });\n        this.log.debug('outputs locked?', locked);\n        return locked;\n    }\n\n    public async unlockOutputs(outputs: resources.LockedOutput[]): Promise<boolean> {\n        this.log.debug('unlocking outputs:', JSON.stringify(outputs));\n        const unlocked = await this.coreRpcService.lockUnspent(true, outputs);\n        this.log.debug('outputs unlocked?', unlocked);\n        return unlocked;\n    }\n\n}\n"]}