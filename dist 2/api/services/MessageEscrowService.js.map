{"version":3,"file":"MessageEscrowService.js","sourceRoot":"","sources":["../../../src/api/services/MessageEscrowService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { MessageEscrowRepository } from '../repositories/MessageEscrowRepository';\nimport { MessageEscrow } from '../models/MessageEscrow';\nimport { MessageEscrowCreateRequest } from '../requests/MessageEscrowCreateRequest';\nimport { MessageEscrowUpdateRequest } from '../requests/MessageEscrowUpdateRequest';\nimport {NotImplementedException} from '../exceptions/NotImplementedException';\n\n\nexport class MessageEscrowService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.MessageEscrowRepository) public messageEscrowRepo: MessageEscrowRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<MessageEscrow>> {\n        return this.messageEscrowRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<MessageEscrow> {\n        const messageEscrow = await this.messageEscrowRepo.findOne(id, withRelated);\n        if (messageEscrow === null) {\n            this.log.warn(`MessageEscrow with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return messageEscrow;\n    }\n\n    @validate()\n    public async create( @request(MessageEscrowCreateRequest) data: MessageEscrowCreateRequest): Promise<MessageEscrow> {\n\n        const body = JSON.parse(JSON.stringify(data));\n\n        // this.log.debug('messageescrow body:', JSON.stringify(body, null, 2));\n\n        // If the request body was valid we will create the messageEscrow\n        const messageEscrow = await this.messageEscrowRepo.create(body);\n\n        // finally find and return the created messageEscrow\n        const newMessageEscrow = await this.findOne(messageEscrow.id);\n        return newMessageEscrow;\n    }\n\n    @validate()\n    public async update(id: number, @request(MessageEscrowUpdateRequest) body: MessageEscrowUpdateRequest): Promise<MessageEscrow> {\n\n        // find the existing one without related\n        const messageEscrow = await this.findOne(id, false);\n\n        // set new values\n        messageEscrow.Type = body.type;\n        messageEscrow.Rawtx = body.rawtx;\n\n        // update messageEscrow record\n        const updatedMessageEscrow = await this.messageEscrowRepo.update(id, messageEscrow.toJSON());\n\n        const newMessageEscrow = await this.findOne(id);\n        return newMessageEscrow;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.messageEscrowRepo.destroy(id);\n    }\n\n}\n"]}