{"version":3,"file":"OrderItemService.js","sourceRoot":"","sources":["../../../src/api/services/OrderItemService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { OrderItemRepository } from '../repositories/OrderItemRepository';\nimport { OrderItem } from '../models/OrderItem';\nimport { OrderItemCreateRequest } from '../requests/OrderItemCreateRequest';\nimport { OrderItemUpdateRequest } from '../requests/OrderItemUpdateRequest';\nimport { OrderItemObjectService } from './OrderItemObjectService';\n\nexport class OrderItemService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.OrderItemObjectService) public orderItemObjectService: OrderItemObjectService,\n        @inject(Types.Repository) @named(Targets.Repository.OrderItemRepository) public orderItemRepo: OrderItemRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<OrderItem>> {\n        return this.orderItemRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<OrderItem> {\n        const orderItem = await this.orderItemRepo.findOne(id, withRelated);\n        if (orderItem === null) {\n            this.log.warn(`OrderItem with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return orderItem;\n    }\n\n    @validate()\n    public async create( @request(OrderItemCreateRequest) data: OrderItemCreateRequest): Promise<OrderItem> {\n\n        const body = JSON.parse(JSON.stringify(data));\n        // this.log.debug('OrderItemCreateRequest: ', JSON.stringify(body, null, 2));\n\n        const orderItemObjects = body.orderItemObjects ||Â [];\n        delete body.orderItemObjects;\n\n        // this.log.debug('create OrderItem, body: ', JSON.stringify(body, null, 2));\n\n        // If the request body was valid we will create the orderItem\n        const orderItemModel = await this.orderItemRepo.create(body);\n        const orderItem = orderItemModel.toJSON();\n\n        // this.log.debug('created orderItem: ', JSON.stringify(orderItem, null, 2));\n\n        for (const orderItemObject of orderItemObjects) {\n            orderItemObject.order_item_id = orderItem.id;\n            // stringify unless string\n            orderItemObject.dataValue = typeof (orderItemObject.dataValue) === 'string' ? orderItemObject.dataValue : JSON.stringify(orderItemObject.dataValue);\n            await this.orderItemObjectService.create(orderItemObject);\n        }\n\n        // finally find and return the created orderItem\n        const newOrderItem = await this.findOne(orderItem.id);\n        return newOrderItem;\n    }\n\n    @validate()\n    public async update(id: number, @request(OrderItemUpdateRequest) body: OrderItemUpdateRequest): Promise<OrderItem> {\n\n        // find the existing one without related\n        const orderItem = await this.findOne(id, false);\n\n        // set new values\n        orderItem.Status = body.status;\n\n        // update orderItem record\n        const updatedOrderItem = await this.orderItemRepo.update(id, orderItem.toJSON());\n\n        // const newOrderItem = await this.findOne(id);\n        // return newOrderItem;\n\n        return updatedOrderItem;\n    }\n\n    public async destroy(id: number): Promise<void> {\n\n        const orderItemModel = await this.findOne(id);\n        const orderItem = orderItemModel.toJSON();\n\n        // then remove the OrderItemObjects\n        for (const orderItemObject of orderItem.OrderItemObjects) {\n            await this.orderItemObjectService.destroy(orderItemObject.id);\n        }\n\n        await this.orderItemRepo.destroy(id);\n    }\n\n}\n"]}