{"version":3,"file":"BidActionService.js","sourceRoot":"","sources":["../../../src/api/services/BidActionService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets, Events } from '../../constants';\nimport * as resources from 'resources';\nimport { MessageException } from '../exceptions/MessageException';\nimport { MarketplaceEvent } from '../messages/MarketplaceEvent';\nimport { EventEmitter } from 'events';\nimport { ActionMessageService } from './ActionMessageService';\nimport { BidService } from './BidService';\nimport { ProfileService } from './ProfileService';\nimport { MarketService } from './MarketService';\nimport { BidFactory } from '../factories/BidFactory';\nimport { SmsgService } from './SmsgService';\nimport { CoreRpcService } from './CoreRpcService';\nimport { ListingItemService } from './ListingItemService';\nimport { SmsgSendResponse } from '../responses/SmsgSendResponse';\nimport { Profile } from '../models/Profile';\nimport { MarketplaceMessage } from '../messages/MarketplaceMessage';\nimport { BidMessageType } from '../enums/BidMessageType';\nimport { Output } from 'resources';\nimport { BidMessage } from '../messages/BidMessage';\nimport { BidSearchParams } from '../requests/BidSearchParams';\nimport { AddressType } from '../enums/AddressType';\nimport { SearchOrder } from '../enums/SearchOrder';\nimport { BidUpdateRequest } from '../requests/BidUpdateRequest';\nimport { BidCreateRequest } from '../requests/BidCreateRequest';\nimport { Bid } from '../models/Bid';\nimport { OrderFactory } from '../factories/OrderFactory';\nimport { OrderService } from './OrderService';\nimport { BidDataService } from './BidDataService';\nimport { BidDataCreateRequest } from '../requests/BidDataCreateRequest';\nimport { LockedOutputService } from './LockedOutputService';\nimport { BidDataValue } from '../enums/BidDataValue';\nimport { SmsgMessageStatus } from '../enums/SmsgMessageStatus';\nimport { SmsgMessageService } from './SmsgMessageService';\n\n// todo: move\nexport interface OutputData {\n    outputs: Output[];\n    outputsSum: number;\n    outputsChangeAmount: number;\n}\n\n// todo: move\nexport interface IdValuePair {\n    id: string;\n    value: any;\n}\n\nexport class BidActionService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) private listingItemService: ListingItemService,\n        @inject(Types.Service) @named(Targets.Service.MarketService) private marketService: MarketService,\n        @inject(Types.Service) @named(Targets.Service.ActionMessageService) private actionMessageService: ActionMessageService,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) private profileService: ProfileService,\n        @inject(Types.Service) @named(Targets.Service.SmsgService) private smsgService: SmsgService,\n        @inject(Types.Service) @named(Targets.Service.BidService) private bidService: BidService,\n        @inject(Types.Service) @named(Targets.Service.BidDataService) private bidDataService: BidDataService,\n        @inject(Types.Service) @named(Targets.Service.OrderService) private orderService: OrderService,\n        @inject(Types.Service) @named(Targets.Service.CoreRpcService) private coreRpcService: CoreRpcService,\n        @inject(Types.Service) @named(Targets.Service.LockedOutputService) private lockedOutputService: LockedOutputService,\n        @inject(Types.Service) @named(Targets.Service.SmsgMessageService) private smsgMessageService: SmsgMessageService,\n        @inject(Types.Factory) @named(Targets.Factory.BidFactory) private bidFactory: BidFactory,\n        @inject(Types.Factory) @named(Targets.Factory.OrderFactory) private orderFactory: OrderFactory,\n        @inject(Types.Core) @named(Core.Events) private eventEmitter: EventEmitter,\n        @inject(Types.Core) @named(Core.Logger) private Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n        this.configureEventListeners();\n    }\n\n    /**\n     * Send a Bid\n     *\n     * @param {module:resources.ListingItem} listingItem\n     * @param {module:resources.Profile} bidderProfile\n     * @param {any[]} additionalParams\n     * @returns {Promise<SmsgSendResponse>}\n     */\n    public async send(listingItem: resources.ListingItem, bidderProfile: resources.Profile,\n                      additionalParams: IdValuePair[]): Promise<SmsgSendResponse> {\n\n        // TODO: change send params to BidSendRequest and @validate them\n        // TODO: some of this stuff could propably be moved to the factory\n        // TODO: Create new unspent RPC call for unspent outputs that came out of a RingCT transaction\n\n        // generate bidDatas for the message\n        const bidDatas = await this.generateBidDatasForMPA_BID(listingItem, additionalParams);\n\n        // this.log.debug('bidder profile: ', JSON.stringify(bidderProfile, null, 2));\n\n        // create MPA_BID message\n        const bidMessage = await this.bidFactory.getMessage(BidMessageType.MPA_BID, listingItem.hash, bidDatas);\n\n        const marketPlaceMessage = {\n            version: process.env.MARKETPLACE_VERSION,\n            mpaction: bidMessage\n        } as MarketplaceMessage;\n\n        this.log.debug('send(), marketPlaceMessage: ', JSON.stringify(marketPlaceMessage, null, 2));\n\n        // save bid locally before broadcasting\n        const createdBid: resources.Bid = await this.createBid(bidMessage, listingItem, bidderProfile.address);\n        // this.log.debug('createdBid:', JSON.stringify(createdBid, null, 2));\n\n        // store the selected outputs, so we can load and lock them again on mp restart\n        let selectedOutputs = this.getValueFromBidDatas(BidDataValue.BUYER_OUTPUTS, createdBid.BidDatas);\n        selectedOutputs = selectedOutputs[0] === '[' ? JSON.parse(selectedOutputs) : selectedOutputs;\n\n        const createdLockedOutputs = await this.lockedOutputService.createLockedOutputs(selectedOutputs, createdBid.id);\n        const success = await this.lockedOutputService.lockOutputs(createdLockedOutputs);\n\n        if (success) {\n            // broadcast the message to the network\n            return await this.smsgService.smsgSend(bidderProfile.address, listingItem.seller, marketPlaceMessage, false);\n        } else {\n            throw new MessageException('Failed to lock the selected outputs.');\n        }\n    }\n\n    /**\n     * generate the required biddatas for MPA_BID message\n     *\n     * @param {module:resources.ListingItem} listingItem\n     * @param {any[]} additionalParams\n     * @returns {Promise<IdValuePair[]>}\n     */\n    public async generateBidDatasForMPA_BID(\n        listingItem: resources.ListingItem,\n        additionalParams: IdValuePair[]\n    ): Promise<IdValuePair[]> {\n\n        // todo: propably something that we should check earlier\n        // todo: and we shouldnt even be having items without a price at the moment, validation before posting should take care of that\n        // todo: this could also be caused by of some other error, while saving the item\n        if (!listingItem.PaymentInformation.ItemPrice || !listingItem.PaymentInformation.ItemPrice.basePrice) {\n            this.log.warn(`ListingItem with the hash=${listingItem.hash} does not have a price!`);\n            throw new MessageException(`ListingItem with the hash=${listingItem.hash} does not have a price!`);\n        }\n\n        // this.log.debug('listingItem.PaymentInformation: ', JSON.stringify(listingItem.PaymentInformation, null, 2));\n\n        // todo: calculate correct shippingPrice\n        const shippingPrice = listingItem.PaymentInformation.ItemPrice.ShippingPrice;\n        const basePrice = listingItem.PaymentInformation.ItemPrice.basePrice;\n        const shippingPriceMax = Math.max(shippingPrice.international, shippingPrice.domestic);\n        const totalPrice = basePrice + shippingPriceMax; // TODO: Determine if local or international...\n        const requiredAmount = totalPrice * 2; // todo: bidders required amount\n        // todo: calculate totalprice using the items escrowratio\n\n        this.log.debug('totalPrice: ', totalPrice);\n\n        // returns: {\n        //    outputs\n        //    outputsSum\n        //    outputsChangeAmount\n        // }\n        const buyerSelectedOutputData: OutputData = await this.findUnspentOutputs(requiredAmount);\n\n        // changed to getNewAddress, since getaccountaddress doesn't return address which we can get the pubkey from\n        const buyerEscrowPubAddress = await this.coreRpcService.getNewAddress(['_escrow_pub_' + listingItem.hash], false);\n        const buyerEscrowChangeAddress = await this.coreRpcService.getNewAddress(['_escrow_change'], false);\n\n        this.log.debug('buyerEscrowPubAddress: ', buyerEscrowPubAddress);\n        this.log.debug('buyerEscrowChangeAddress: ', buyerEscrowChangeAddress);\n\n        // 0.16.0.3\n        // const buyerEscrowPubAddressInformation = await this.coreRpcService.validateAddress(buyerEscrowPubAddress);\n        // const buyerEcrowPubAddressPublicKey = buyerEscrowPubAddressInformation.pubkey;\n\n        // 0.17++ ...\n        const buyerEscrowPubAddressInformation = await this.coreRpcService.getAddressInfo(buyerEscrowPubAddress);\n        const buyerEcrowPubAddressPublicKey = buyerEscrowPubAddressInformation.pubkey || buyerEscrowPubAddressInformation.scriptPubKey;\n\n        this.log.debug('buyerEscrowPubAddressInformation: ', JSON.stringify(buyerEscrowPubAddressInformation, null, 2));\n\n        if (!buyerEcrowPubAddressPublicKey) {\n            throw new MessageException('Could not get public key for buyerEscrowPubAddress!');\n        }\n\n        // TODO: We need to send a refund / release address\n        // TODO: address should be named releaseAddress or sellerReleaseAddress and all keys should be enums,\n        // it's confusing when on escrowactionservice this 'address' is referred to as sellers address which it is not\n        const buyerEscrowReleaseAddress = await this.coreRpcService.getNewAddress(['_escrow_release'], false);\n\n        // convert the bid data params as bid data key value pair\n        // todo: refactor to use resources.BidData instead of this IdValuePair\n        const bidDatas = this.getIdValuePairsFromArray([\n            BidDataValue.BUYER_OUTPUTS, buyerSelectedOutputData.outputs,\n            BidDataValue.BUYER_PUBKEY, buyerEcrowPubAddressPublicKey,\n            BidDataValue.BUYER_CHANGE_ADDRESS, buyerEscrowChangeAddress,\n            BidDataValue.BUYER_CHANGE_AMOUNT, buyerSelectedOutputData.outputsChangeAmount,\n            BidDataValue.BUYER_RELEASE_ADDRESS, buyerEscrowReleaseAddress\n        ]).concat(additionalParams);\n\n        // this.log.debug('bidDatas: ', JSON.stringify(bidDatas, null, 2));\n\n        return bidDatas;\n    }\n\n    /**\n     * find unspent outputs for the required amount\n     *\n     * @param {number} requiredAmount\n     * @returns {Promise<any>}\n     */\n    public async findUnspentOutputs(requiredAmount: number): Promise<OutputData> {\n\n        // requiredAmount, for MPA_BID: (totalPrice * 2)\n        // requiredAmount, for MPA_ACCEPT: totalPrice\n\n        // todo: get the actual fee\n        const TRANSACTION_FEE = 0.0002;\n        const adjustedRequiredAmount: number = this.correctNumberDecimals(requiredAmount + TRANSACTION_FEE);\n\n        const selectedOutputs: Output[] = [];\n        let selectedOutputsSum = 0;\n        let selectedOutputsChangeAmount = 0;\n\n        const utxoLessThanReqestedAmount: number[] = [];\n        let utxoIdxs: number[] = [];\n\n        let exactMatchIdx = -1;\n        let maxOutputIdx = -1;\n        const defaultselectedOutputsIdxs: number[] = [];\n\n        // get all unspent transaction outputs\n        const unspentOutputs = await this.coreRpcService.listUnspent(1, 99999999, [], false);\n\n        // Loop over all outputs once to obtain various fitlering information\n        unspentOutputs.filter(\n            (output: any, outIdx: number) => {\n                if (output.spendable && output.solvable && output.safe ) {\n                    if ( (exactMatchIdx === -1) && ( this.correctNumberDecimals(output.amount - adjustedRequiredAmount) === 0) ) {\n                        // Found a utxo with amount that is an exact match for the requested amount.\n                        exactMatchIdx = outIdx;\n                    } else if (output.amount < adjustedRequiredAmount) {\n                        // utxo is less than the amount requested, so may be summable with others to get to the exact value (or within a close threshold).\n                        utxoLessThanReqestedAmount.push(outIdx);\n                    }\n\n                    // Get the max utxo amount in case an output needs to be split\n                    if (maxOutputIdx === -1) {\n                        maxOutputIdx = outIdx;\n                    } else if (unspentOutputs[maxOutputIdx].amount < output.amount) {\n                        maxOutputIdx = outIdx;\n                    }\n\n                    // Sum up output amounts for the default case\n                    if (selectedOutputsSum < adjustedRequiredAmount) {\n                        selectedOutputsSum += output.amount;\n                        defaultselectedOutputsIdxs.push(outIdx);\n                    }\n\n                    return true;\n                }\n                return false;\n            }\n        );\n\n        // Step 1: Check whether an exact match was found.\n        if (exactMatchIdx === -1) {\n            // No exact match found, so...\n            //  ... Step 2: Sum utxos to find a summed group that matches exactly or is greater than the requried amount by no more than 1%.\n            for (let ii = 0; ii < Math.pow(2, utxoLessThanReqestedAmount.length); ii++) {\n                const potentialIdxs: number[] = utxoLessThanReqestedAmount.filter((num: number, index: number) => ii & (1 << index) );\n                const summed: number = this.correctNumberDecimals( potentialIdxs.reduce((acc: number, idx: number) => acc + unspentOutputs[idx].amount, 0) );\n\n                if ((summed >= adjustedRequiredAmount) && ((summed - adjustedRequiredAmount) < (adjustedRequiredAmount / 100)) ) {\n                    // Sum of utxos is within a 1 percent upper margin of the requested amount.\n                    if (summed === adjustedRequiredAmount) {\n                        // Found the exact required amount.\n                        utxoIdxs = potentialIdxs;\n                        break;\n                    } else if (!utxoIdxs.length) {\n                        utxoIdxs.length = 0;\n                        utxoIdxs = potentialIdxs;\n                    }\n                }\n            }\n\n            // ... Step 3: If no summed values found, attempt to split a large enough output.\n            if (utxoIdxs.length === 0 && maxOutputIdx !== -1 && unspentOutputs[maxOutputIdx].amount > adjustedRequiredAmount) {\n                const newAddress = await this.coreRpcService.getNewAddress([], false);\n                // sendtoaddress will create a new transaction with its own selection of utxos to use, ie: the output with the max amount is not necessary used\n                const txid: string = await this.coreRpcService.call('sendtoaddress', [newAddress, adjustedRequiredAmount.toFixed(8), 'Split output']);\n                const txData: any = await this.coreRpcService.call('getrawtransaction', [txid, true]);\n                const outputData: any = txData.vout.find( outputObject => outputObject.value.toFixed(8) === adjustedRequiredAmount.toFixed(8) );\n\n                if (outputData) {\n                    selectedOutputs.push({\n                        txid: txData.txid,\n                        vout: outputData.n,\n                        amount: outputData.value\n                    });\n                    selectedOutputsSum = outputData.value;\n                }\n            }\n        } else {\n            // Push the exact match.\n            utxoIdxs.push(exactMatchIdx);\n        }\n\n        // Step 4: Default to the summed utxos if no other method was successful\n        if (!selectedOutputs.length && !utxoIdxs.length) {\n            if (selectedOutputsSum >= adjustedRequiredAmount) {\n                utxoIdxs = defaultselectedOutputsIdxs;\n            } else {\n                this.log.warn('Not enough funds');\n                throw new MessageException('Not enough funds');\n            }\n        }\n\n        if (utxoIdxs.length) {\n            selectedOutputsSum = 0;\n            for (const utxoIdx of utxoIdxs) {\n                const utxo: any = unspentOutputs[utxoIdx];\n                selectedOutputs.push({\n                    txid: utxo.txid,\n                    vout: utxo.vout,\n                    amount: utxo.amount\n                });\n                selectedOutputsSum += utxo.amount;\n            }\n        }\n\n        selectedOutputsChangeAmount = +(selectedOutputsSum - adjustedRequiredAmount).toFixed(8);\n\n        // todo: type\n        const response: OutputData = {\n            outputs: selectedOutputs,\n            outputsSum: selectedOutputsSum,\n            outputsChangeAmount: selectedOutputsChangeAmount\n        };\n\n        this.log.debug('selected outputs:', JSON.stringify(response, null, 2));\n\n        return response;\n    }\n\n\n    /**\n     * Accept a Bid\n     *\n     * @param {module:resources.Bid} bid\n     * @returns {Promise<SmsgSendResponse>}\n     */\n    public async accept(bid: resources.Bid): Promise<SmsgSendResponse> {\n\n        // previous bids action needs to be MPA_BID\n        if (bid.action === BidMessageType.MPA_BID) {\n\n            const listingItem = await this.listingItemService.findOne(bid.ListingItem.id, true)\n                .then(value => {\n                    return value.toJSON();\n                });\n\n            // todo: create order before biddatas so order hash can be added to biddata in generateBidDatasForMPA_ACCEPT\n            // generate bidDatas for MPA_ACCEPT\n            const bidDatas: IdValuePair[] = await this.generateBidDatasForMPA_ACCEPT(listingItem, bid);\n\n            // create the bid accept message using the generated bidDatas\n            const bidMessage = await this.bidFactory.getMessage(BidMessageType.MPA_ACCEPT, listingItem.hash, bidDatas);\n            // this.log.debug('accept(), created bidMessage (MPA_ACCEPT):', JSON.stringify(bidMessage, null, 2));\n\n            // update the bid locally\n            const bidUpdateRequest = await this.bidFactory.getModel(bidMessage, listingItem.id, bid.bidder, bid);\n            const updatedBidModel = await this.bidService.update(bid.id, bidUpdateRequest);\n            const updatedBid = updatedBidModel.toJSON();\n            // this.log.debug('accept(), updatedBid:', JSON.stringify(updatedBid, null, 2));\n\n            // create the order\n            const orderCreateRequest = await this.orderFactory.getModelFromBid(updatedBid);\n            const orderModel = await this.orderService.create(orderCreateRequest);\n            const order = orderModel.toJSON();\n\n            this.log.debug('accept(), created Order: ', JSON.stringify(order, null, 2));\n            // this.log.debug('accept(), created bidMessage.objects: ', bidMessage.objects);\n\n            // put the order.hash in BidMessage and also save it\n            // todo: this is here because bidMessage.objects 'possibly undefined', which it never really should be\n            if (!bidMessage.objects) {\n                bidMessage.objects = [];\n            }\n            bidMessage.objects.push({id: BidDataValue.ORDER_HASH, value: order.hash});\n\n            // TODO: clean this up, so that we can add this with bidService.update\n            const orderHashBidData = await this.bidDataService.create({\n                bid_id: updatedBid.id,\n                dataId: BidDataValue.ORDER_HASH.toString(),\n                dataValue: order.hash\n            } as BidDataCreateRequest);\n\n            // this.log.debug('accept(), updatedBid.id: ', updatedBid.id);\n            // this.log.debug('accept(), order.hash: ', order.hash);\n            // this.log.debug('accept(), added orderHash to bidData: ', orderHashBidData.toJSON());\n\n            // store the sellers selected outputs in db, so we can load and lock them again on mp restart\n            let selectedOutputs = this.getValueFromBidDatas(BidDataValue.SELLER_OUTPUTS, updatedBid.BidDatas);\n            selectedOutputs = selectedOutputs[0] === '[' ? JSON.parse(selectedOutputs) : selectedOutputs;\n            const createdLockedOutputs = await this.lockedOutputService.createLockedOutputs(selectedOutputs, bid.id);\n            const success = await this.lockedOutputService.lockOutputs(createdLockedOutputs);\n\n            const marketPlaceMessage = {\n                version: process.env.MARKETPLACE_VERSION,\n                mpaction: bidMessage\n            } as MarketplaceMessage;\n\n            if (success) {\n                // broadcast the MPA_ACCEPT message\n                this.log.debug('send(), marketPlaceMessage: ', JSON.stringify(marketPlaceMessage, null, 2));\n                return await this.smsgService.smsgSend(listingItem.seller, updatedBid.bidder, marketPlaceMessage, false);\n            } else {\n                throw new MessageException('Failed to lock the selected outputs.');\n            }\n\n        } else {\n            this.log.error(`Bid can not be accepted because its state allready is ${bid.action}`);\n            throw new MessageException(`Bid can not be accepted because its state already is ${bid.action}`);\n        }\n    }\n\n    /**\n     * generate the required biddatas for MPA_ACCEPT message\n     *\n     * @param {module:resources.ListingItem} listingItem\n     * @param {module:resources.Bid} bid\n     * @returns {Promise<any[]>}\n     */\n    public async generateBidDatasForMPA_ACCEPT(\n        listingItem: resources.ListingItem,\n        bid: resources.Bid\n    ): Promise<IdValuePair[]> {\n\n        if (_.isEmpty(listingItem.PaymentInformation.ItemPrice)) {\n            this.log.warn(`ListingItem with the hash=${listingItem.hash} does not have a price!`);\n            throw new MessageException(`ListingItem with the hash=${listingItem.hash} does not have a price!`);\n        }\n\n        // todo: price type...\n        const shippingPrice = listingItem.PaymentInformation.ItemPrice.ShippingPrice;\n        const basePrice = listingItem.PaymentInformation.ItemPrice.basePrice;\n        const shippingPriceMax = Math.max(shippingPrice.international, shippingPrice.domestic);\n        const totalPrice = basePrice + shippingPriceMax; // TODO: Determine if local or international...\n        const requiredAmount = totalPrice; // todo: sellers required amount\n        // todo: calculate totalprice using the items escrowratio\n\n        this.log.debug('totalPrice: ', totalPrice);\n\n        // returns: {\n        //    outputs: Output[]\n        //    outputsSum\n        //    outputsChangeAmount\n        // }\n        const sellerSelectedOutputData: OutputData = await this.findUnspentOutputs(requiredAmount);\n\n        // create OutputData for buyer\n        const buyerSelectedOutputs: Output[] = JSON.parse(this.getValueFromBidDatas(BidDataValue.BUYER_OUTPUTS, bid.BidDatas));\n        const buyerOutputsSum = buyerSelectedOutputs.reduce((acc, obj) => {\n            const amount = obj.amount || 0;\n            return acc + amount;\n        }, 0);\n        const buyerRequiredAmount = totalPrice * 2;\n        const buyerSelectedOutputsChangeAmount = +(buyerOutputsSum - buyerRequiredAmount - 0.0002).toFixed(8);\n\n        // TODO: validate that the outputs are not spent\n        if (buyerOutputsSum < buyerRequiredAmount) {\n            this.log.warn('Not enough funds');\n            throw new MessageException('Not enough funds');\n        }\n\n        const buyerSelectedOutputData: OutputData = {\n            outputs: buyerSelectedOutputs,\n            outputsSum: buyerOutputsSum,\n            outputsChangeAmount: buyerSelectedOutputsChangeAmount\n        };\n\n        this.log.debug('sellerSelectedOutputData: ', JSON.stringify(sellerSelectedOutputData, null, 2));\n        this.log.debug('buyerSelectedOutputData: ', JSON.stringify(buyerSelectedOutputData, null, 2));\n\n        // create seller escrow addresses\n        // changed to getNewAddress, since getaccountaddress doesn't return address which we can get the pubkey from\n        const sellerEscrowPubAddress = await this.coreRpcService.getNewAddress(['_escrow_pub_' + listingItem.hash], false);\n        const sellerEscrowChangeAddress = await this.coreRpcService.getNewAddress(['_escrow_change'], false);\n\n        const buyerEscrowChangeAddress = this.getValueFromBidDatas(BidDataValue.BUYER_CHANGE_ADDRESS, bid.BidDatas); // TODO: Error handling - nice messagee..\n\n        this.log.debug('sellerEscrowPubAddress: ', sellerEscrowPubAddress);\n        this.log.debug('sellerEscrowChangeAddress: ', sellerEscrowChangeAddress);\n\n        // 0.16.0.3\n        // const sellerEscrowPubAddressInformation = await this.coreRpcService.validateAddress(sellerEscrowPubAddress);\n        // const sellerEscrowPubAddressPublicKey = sellerEscrowPubAddressInformation.pubkey;\n\n        // 0.17++ ...\n        const sellerEscrowPubAddressInformation = await this.coreRpcService.getAddressInfo(sellerEscrowPubAddress);\n        const sellerEscrowPubAddressPublicKey = sellerEscrowPubAddressInformation.pubkey;\n\n        const buyerEscrowPubAddressPublicKey = this.getValueFromBidDatas(BidDataValue.BUYER_PUBKEY, bid.BidDatas);\n\n        // create multisig escrow address\n        // escrowMultisigAddress:  0=[{\n        //   \"address\": \"rU71DNgoAj7W6e1aQqALk66HXrUpuEbERH\",\n        //   \"redeemScript\": \"522102b3d88...c52ae\"\n        // }]\n        // todo: replace '_escrow_' + listingItem.hash with something unique\n        const escrowMultisigAddress = await this.coreRpcService.addMultiSigAddress(\n            2,\n            [sellerEscrowPubAddressPublicKey, buyerEscrowPubAddressPublicKey].sort(),\n            '_escrow_' + listingItem.hash);\n\n\n        // txout: {\n        //   escrowAddress: amount that should be escrowed\n        //   sellerEscrowChangeAddress: sellers change amount\n        //   buyerEscrowChangeAddress: buyers change amount\n        // }\n        const txout = await this.createTxOut(\n            escrowMultisigAddress.address,\n            sellerEscrowChangeAddress,\n            buyerEscrowChangeAddress,\n            sellerSelectedOutputData,\n            buyerSelectedOutputData,\n            sellerEscrowPubAddressPublicKey,\n            buyerEscrowPubAddressPublicKey,\n            totalPrice,\n            listingItem.hash);\n\n\n        const txInputs: Output[] = buyerSelectedOutputData.outputs.concat(sellerSelectedOutputData.outputs);\n        const rawtx = await this.coreRpcService.createRawTransaction(txInputs, txout);\n\n        this.log.debug('MPA_ACCEPT, txInputs: ', JSON.stringify(txInputs, null, 2));\n        this.log.debug('MPA_ACCEPT, txout: ', JSON.stringify(txout, null, 2));\n        this.log.debug('MPA_ACCEPT, rawtx: ', JSON.stringify(rawtx, null, 2));\n\n        // 0.16.0.3\n        // const signed = await this.coreRpcService.signRawTransaction(rawtx);\n        // this.log.debug('signed: ', JSON.stringify(signed, null, 2));\n\n        // 0.17++\n        // if (Environment.isDevelopment() || Environment.isTest()) {\n        //    const privKey = await this.coreRpcService.dumpPrivKey(addr);\n        //    signed = await this.coreRpcService.signRawTransactionWithKey(rawtx, [privKey]);\n        // } else {\n        const signed = await this.coreRpcService.signRawTransactionWithWallet(rawtx);\n        // }\n\n        this.log.info('===========================================================================');\n        this.log.info('signed: ', JSON.stringify(signed, null, 2));\n        this.log.info('===========================================================================');\n\n        // TODO: duplicate code, use the same signRawTx function as in EscrowActionService\n        if (!signed || (signed.errors && (\n                signed.errors[0].error !== 'Operation not valid with the current stack size' &&\n                signed.errors[0].error !== 'Unable to sign input, invalid stack size (possibly missing key)'))) {\n            this.log.error('Error signing transaction' + signed ? ': ' + signed.errors[0].error : '');\n            throw new MessageException('Error signing transaction' + signed ? ': ' + signed.error : '');\n        }\n\n        if (signed.complete) {\n            this.log.error('Transaction should not be complete at this stage, will not send insecure message');\n            throw new MessageException('Transaction should not be complete at this stage, will not send insecure message');\n        }\n\n        const bidDatas: IdValuePair[] = this.getIdValuePairsFromArray([\n            BidDataValue.SELLER_OUTPUTS, sellerSelectedOutputData.outputs,\n            BidDataValue.BUYER_OUTPUTS, buyerSelectedOutputData.outputs, // allready in BidData, not necessarily needed here\n            // 'pubkeys', [sellerEscrowPubAddressPublicKey, buyerEcrowPubAddressPublicKey].sort(),\n            BidDataValue.SELLER_PUBKEY, sellerEscrowPubAddressPublicKey,\n            BidDataValue.BUYER_PUBKEY, buyerEscrowPubAddressPublicKey, // allready in BidData, not necessarily needed here\n            BidDataValue.RAW_TX, signed.hex\n        ]);\n\n        this.log.debug('bidDatas: ', JSON.stringify(bidDatas, null, 2));\n\n        return bidDatas;\n    }\n\n    /**\n     *\n     * @param {string} escrowMultisigAddress\n     * @param {string} sellerEscrowChangeAddress\n     * @param {string} buyerEscrowChangeAddress\n     * @param {OutputData} sellerSelectedOutputData\n     * @param {OutputData} buyerSelectedOutputData\n     * @param {string} sellerEscrowPubAddressPublicKey\n     * @param {string} buyerEscrowPubAddressPublicKey\n     * @param {number} itemTotalPrice\n     * @param {string} listingItemHash\n     * @returns {any}\n     */\n    public createTxOut(escrowMultisigAddress: string,\n                       sellerEscrowChangeAddress: string,\n                       buyerEscrowChangeAddress: string,\n                       sellerSelectedOutputData: OutputData,\n                       buyerSelectedOutputData: OutputData,\n                       sellerEscrowPubAddressPublicKey: string,\n                       buyerEscrowPubAddressPublicKey: string,\n                       itemTotalPrice: number,\n                       listingItemHash: string): any {\n\n        // txout: {\n        //   escrowMultisigAddress: amount that should be escrowed\n        //   sellerEscrowChangeAddress: sellers change amount\n        //   buyerEscrowChangeAddress: buyers change amount\n        // }\n        const txout = {};\n\n\n        this.log.debug('sellerEscrowPubAddressPublicKey: ', sellerEscrowPubAddressPublicKey);\n        this.log.debug('buyerEcrowPubAddressPublicKey: ', buyerEscrowPubAddressPublicKey);\n        this.log.debug('listingItem.hash: ', listingItemHash);\n\n        txout[escrowMultisigAddress] = +(itemTotalPrice * 3).toFixed(8); // TODO: Shipping... ;(\n        txout[sellerEscrowChangeAddress] = sellerSelectedOutputData.outputsChangeAmount;\n        txout[buyerEscrowChangeAddress] = buyerSelectedOutputData.outputsChangeAmount;\n\n\n        // this.log.debug('buyerOutputs: ', JSON.stringify(buyerSelectedOutputData.outputs, null, 2));\n\n        // TODO: Verify that buyers outputs are unspent?? :/\n        // TODO: Refactor reusable logic. and verify / validate buyer change.\n\n        if (!_.isEmpty(buyerSelectedOutputData.outputs)) {\n            let buyerOutputsSum = 0;\n            let buyerOutputsChangeAmount = 0;\n\n            buyerSelectedOutputData.outputs.forEach(output => {\n                const amount = output.amount || 0;\n                buyerOutputsSum += amount;\n                if (buyerOutputsSum > itemTotalPrice * 2) { // TODO: Ratio\n                    buyerOutputsChangeAmount = +(buyerOutputsSum - (itemTotalPrice * 2) - 0.0001).toFixed(8); // TODO: Get actual fee...\n                    return;\n                }\n            });\n\n            // todo: calculate buyers requiredAmount from Ratio\n            // check that buyers outputs contain enough funds\n            if (buyerOutputsSum < itemTotalPrice * 2) {\n                this.log.warn('Buyers outputs do not contain enough funds!');\n                throw new MessageException('Buyers outputs do not contain enough funds!');\n            }\n            txout[buyerEscrowChangeAddress] = buyerSelectedOutputData.outputsChangeAmount;\n\n        } else {\n            this.log.error('Buyer didn\\'t supply outputs!');\n            throw new MessageException('Buyer didn\\'t supply outputs!'); // TODO: proper message for no outputs :P\n        }\n\n        // TODO: Decide if we want this on the blockchain or not...\n        // TODO: Think about how to recover escrow information to finalize transactions should client pc / database crash..\n\n        //\n        // txout['data'] = unescape(encodeURIComponent(data.params[0]))\n        //    .split('').map(v => v.charCodeAt(0).toString(16)).join('').substr(0, 80);\n        //\n\n        return txout;\n    }\n\n\n    /**\n     * Cancel a Bid\n     *\n     * @param {module:resources.Bid} bid\n     * @returns {Promise<SmsgSendResponse>}\n     */\n    public async cancel(bid: resources.Bid): Promise<SmsgSendResponse> {\n\n        if (bid.action === BidMessageType.MPA_BID) {\n\n            const listingItem = await this.listingItemService.findOne(bid.ListingItem.id, true)\n                .then(value => {\n                    return value.toJSON();\n                });\n\n            // create the bid cancel message\n            const bidMessage: BidMessage = await this.bidFactory.getMessage(BidMessageType.MPA_CANCEL, listingItem.hash);\n\n            // Update the bid in the database with new action.\n            const tmpBidCreateRequest: BidCreateRequest = await this.bidFactory.getModel(bidMessage, listingItem.id, bid.bidder, bid);\n            const bidUpdateRequest: BidUpdateRequest = {\n                listing_item_id: tmpBidCreateRequest.listing_item_id,\n                action: BidMessageType.MPA_CANCEL,\n                bidder: tmpBidCreateRequest.bidder,\n                bidDatas: tmpBidCreateRequest.bidDatas\n            } as BidUpdateRequest;\n            await this.bidService.update(bid.id, bidUpdateRequest);\n\n            const marketPlaceMessage = {\n                version: process.env.MARKETPLACE_VERSION,\n                mpaction: bidMessage\n            } as MarketplaceMessage;\n\n            this.log.debug('send(), marketPlaceMessage: ', marketPlaceMessage);\n\n            // remove buyers lockedoutputs\n            let selectedOutputs = this.getValueFromBidDatas(BidDataValue.BUYER_OUTPUTS, bid.BidDatas);\n            selectedOutputs = selectedOutputs[0] === '[' ? JSON.parse(selectedOutputs) : selectedOutputs;\n            await this.lockedOutputService.destroyLockedOutputs(selectedOutputs);\n            const success = await this.lockedOutputService.unlockOutputs(selectedOutputs);\n\n            if (success) {\n                // broadcast the cancel bid message\n                return await this.smsgService.smsgSend(bid.bidder, listingItem.seller, marketPlaceMessage, false);\n            } else {\n                throw new MessageException('Failed to unlock the locked outputs.');\n            }\n\n        } else {\n            this.log.error(`Bid can not be cancelled because it was already been ${bid.action}`);\n            throw new MessageException(`Bid can not be cancelled because it was already been ${bid.action}`);\n        }\n    }\n\n    /**\n     * Reject a Bid\n     * todo: add the bid as param, so we know whose bid we are rejecting. now supports just one bidder.\n     *\n     * @param {module:resources.Bid} bid\n     * @returns {Promise<SmsgSendResponse>}\n     */\n    public async reject(bid: resources.Bid): Promise<SmsgSendResponse> {\n\n        if (bid.action === BidMessageType.MPA_BID) {\n\n            const listingItem = await this.listingItemService.findOne(bid.ListingItem.id, true)\n                .then(value => {\n                    return value.toJSON();\n                });\n\n            // fetch the seller profile\n            const sellerProfileModel: Profile = await this.profileService.findOneByAddress(listingItem.seller);\n            if (!sellerProfileModel) {\n                this.log.error('Seller profile not found. We aren\\'t the seller?');\n                throw new MessageException('Seller profile not found. We aren\\'t the seller?');\n            }\n            const sellerProfile = sellerProfileModel.toJSON();\n\n            // create the bid reject message\n            const bidMessage = await this.bidFactory.getMessage(BidMessageType.MPA_REJECT, listingItem.hash);\n\n            // Update the bid in the database with new action.\n            const tmpBidCreateRequest: BidCreateRequest = await this.bidFactory.getModel(bidMessage, listingItem.id, bid.bidder, bid);\n            const bidUpdateRequest: BidUpdateRequest = {\n                listing_item_id: tmpBidCreateRequest.listing_item_id,\n                action: BidMessageType.MPA_REJECT,\n                bidder: tmpBidCreateRequest.bidder,\n                bidDatas: tmpBidCreateRequest.bidDatas\n            } as BidUpdateRequest;\n            await this.bidService.update(bid.id, bidUpdateRequest);\n\n            const marketPlaceMessage = {\n                version: process.env.MARKETPLACE_VERSION,\n                mpaction: bidMessage\n            } as MarketplaceMessage;\n\n            this.log.debug('send(), marketPlaceMessage: ', marketPlaceMessage);\n\n            // broadcast the reject bid message\n            return await this.smsgService.smsgSend(sellerProfile.address, bid.bidder, marketPlaceMessage, false);\n        } else {\n            this.log.error(`Bid can not be rejected because it was already been ${bid.action}`);\n            throw new MessageException(`Bid can not be rejected because it was already been ${bid.action}`);\n        }\n    }\n\n    /**\n     * process received BidMessage\n     * - save ActionMessage\n     * - create Bid\n     *\n     * @param {MarketplaceEvent} event\n     * @returns {Promise<module:resources.Bid>}\n     */\n    public async processBidReceivedEvent(event: MarketplaceEvent): Promise<SmsgMessageStatus> {\n\n        const bidMessage: BidMessage = event.marketplaceMessage.mpaction as BidMessage;\n        const bidder = event.smsgMessage.from;\n        const message = event.marketplaceMessage;\n\n        if (!message.mpaction || !message.mpaction.item) {   // ACTIONEVENT\n            throw new MessageException('Missing mpaction.');\n        }\n\n        return await this.listingItemService.findOneByHash(message.mpaction.item)\n            .then(async listingItemModel => {\n\n                const listingItem = listingItemModel.toJSON();\n\n                // todo: check that the listingitem is yours\n\n                // first save actionmessage\n                const actionMessageModel = await this.actionMessageService.createFromMarketplaceEvent(event, listingItem);\n                const actionMessage = actionMessageModel.toJSON();\n\n                // TODO: should someone be able to bid more than once?\n                // TODO: for that to be possible, we need to be able to identify different bids from one address\n                // -> needs bid.hash\n                // TODO: when testing locally, bid gets created first for the bidder after which it can be found here when receiving the bid\n\n                const biddersExistingBidsForItem = await this.bidService.search({\n                    listingItemHash: bidMessage.item,\n                    bidders: [bidder]\n                } as BidSearchParams);\n\n                if (biddersExistingBidsForItem && biddersExistingBidsForItem.length > 0) {\n                    this.log.debug('biddersExistingBidsForItem:', JSON.stringify(biddersExistingBidsForItem, null, 2));\n                    throw new MessageException('Bids allready exist for the ListingItem for the bidder.');\n                }\n\n                if (bidMessage) {\n                    const createdBid = await this.createBid(bidMessage, listingItem, bidder);\n                    // this.log.debug('createdBid:', JSON.stringify(createdBid, null, 2));\n\n                    // TODO: do whatever else needs to be done\n\n                    return SmsgMessageStatus.PROCESSED;\n                } else {\n                    throw new MessageException('Missing BidMessage');\n                }\n            })\n            .catch(reason => {\n                // ListingItem not found\n                return SmsgMessageStatus.WAITING;\n            });\n\n    }\n\n    /**\n     * process received AcceptBidMessage\n     * - save ActionMessage\n     * - update Bid\n     *\n     * @param {MarketplaceEvent} event\n     * @returns {Promise<module:resources.Bid>}\n     */\n    public async processAcceptBidReceivedEvent(event: MarketplaceEvent): Promise<SmsgMessageStatus> {\n\n        const bidMessage: BidMessage = event.marketplaceMessage.mpaction as BidMessage;\n        const bidder = event.smsgMessage.to; // from seller to buyer\n\n        // find the ListingItem\n        const message = event.marketplaceMessage;\n        if (!message.mpaction || !message.mpaction.item) {   // ACTIONEVENT\n            throw new MessageException('Missing mpaction.');\n        }\n\n        return await this.listingItemService.findOneByHash(message.mpaction.item)\n            .then(async listingItemModel => {\n\n                const listingItem = listingItemModel.toJSON();\n\n                // TODO: save incoming and outgoing actionmessages\n                // TODO: ... and do it in one place\n                // first save it\n                const actionMessageModel = await this.actionMessageService.createFromMarketplaceEvent(event, listingItem);\n                const actionMessage = actionMessageModel.toJSON();\n\n                if (bidMessage) {\n\n                    // find the Bid\n                    const existingBid = _.find(listingItem.Bids, (o: resources.Bid) => {\n                        return o.action === BidMessageType.MPA_BID && o.bidder === bidder;\n                    });\n\n                    // this.log.debug('existingBid:', JSON.stringify(existingBid, null, 2));\n\n                    if (existingBid) {\n\n                        // update the bid locally\n                        const bidUpdateRequest = await this.bidFactory.getModel(bidMessage, listingItem.id, bidder, existingBid);\n                        // this.log.debug('bidUpdateRequest:', JSON.stringify(bidUpdateRequest, null, 2));\n                        const updatedBidModel = await this.bidService.update(existingBid.id, bidUpdateRequest);\n                        let updatedBid: resources.Bid = updatedBidModel.toJSON();\n                        // this.log.debug('updatedBid:', JSON.stringify(updatedBid, null, 2));\n\n                        // create the order from the bid\n                        const orderCreateRequest = await this.orderFactory.getModelFromBid(updatedBid);\n                        const orderModel = await this.orderService.create(orderCreateRequest);\n                        const order = orderModel.toJSON();\n\n                        this.log.debug('processAcceptBidReceivedEvent(), created Order: ', JSON.stringify(order, null, 2));\n\n                        const orderHash = this.getValueFromBidDatas(BidDataValue.ORDER_HASH, updatedBid.BidDatas);\n                        this.log.debug('seller orderHash: ', orderHash);\n                        this.log.debug('local orderHash: ', order.hash);\n\n                        if (orderHash !== order.hash) {\n                            throw new MessageException('Created Order.hash does not match with the received orderHash.');\n                        }\n                        await updatedBidModel.fetch({withRelated: ['OrderItem']});\n                        updatedBid = updatedBidModel.toJSON();\n                        // TODO: do whatever else needs to be done\n\n                        // this.log.debug('processAcceptBidReceivedEvent(), updatedBid: ', JSON.stringify(updatedBid, null, 2));\n                        return SmsgMessageStatus.PROCESSED;\n                    } else {\n                        return SmsgMessageStatus.WAITING;\n                    }\n                } else {\n                    throw new MessageException('Missing BidMessage.');\n                }\n            })\n            .catch(reason => {\n                // ListingItem not found\n                return SmsgMessageStatus.WAITING;\n            });\n    }\n\n    /**\n     * process received CancelBidMessage\n     *\n     * @param {MarketplaceEvent} event\n     * @returns {Promise<module:resources.ActionMessage>}\n     */\n    public async processCancelBidReceivedEvent(event: MarketplaceEvent): Promise<SmsgMessageStatus> {\n\n        const bidMessage: any = event.marketplaceMessage.mpaction as BidMessage;\n        const bidder = event.smsgMessage.from;\n        // find the ListingItem\n        const message = event.marketplaceMessage;\n        if (!message.mpaction || !message.mpaction.item) {   // ACTIONEVENT\n            throw new MessageException('Missing mpaction.');\n        }\n\n        return await this.listingItemService.findOneByHash(message.mpaction.item)\n            .then(async listingItemModel => {\n\n                const listingItem = listingItemModel.toJSON();\n\n                // first save it\n                const actionMessageModel = await this.actionMessageService.createFromMarketplaceEvent(event, listingItem);\n                const actionMessage = actionMessageModel.toJSON();\n\n                // Get latest bid from listingItemId and bidder so we can get bidId.\n                const params: BidSearchParams = new BidSearchParams({\n                    listingItemId: listingItem.id,\n                    action: BidMessageType.MPA_BID,\n                    bidders: [ bidder ],\n                    ordering: SearchOrder.DESC\n                });\n\n                // TODO: oldBids.pop() does not return anything. this wont work.\n                const oldBids: Bookshelf.Collection<Bid> = await this.bidService.search(params);\n                let oldBid: any = oldBids.pop();\n                if (!oldBid) {\n                    this.log.error('Missing old bid.');\n                    return SmsgMessageStatus.WAITING;\n                }\n                oldBid = oldBid.toJSON();\n\n                // Update the bid in the database with new action.\n                const tmpBidCreateRequest: BidCreateRequest = await this.bidFactory.getModel(bidMessage, listingItem.id, bidder, oldBid);\n                const bidUpdateRequest: BidUpdateRequest = {\n                    listing_item_id: tmpBidCreateRequest.listing_item_id,\n                    action: BidMessageType.MPA_CANCEL,\n                    bidder: tmpBidCreateRequest.bidder,\n                    bidDatas: tmpBidCreateRequest.bidDatas\n                } as BidUpdateRequest;\n                const updatedBid = await this.bidService.update(oldBid.id, bidUpdateRequest);\n\n                return SmsgMessageStatus.PROCESSED;\n            })\n            .catch(reason => {\n                // ListingItem not found\n                return SmsgMessageStatus.WAITING;\n            });\n\n    }\n\n    /**\n     * process received RejectBidMessage\n     *\n     * @param {MarketplaceEvent} event\n     * @returns {Promise<module:resources.ActionMessage>}\n     */\n    public async processRejectBidReceivedEvent(event: MarketplaceEvent): Promise<SmsgMessageStatus> {\n\n        const message = event.marketplaceMessage;\n        const bidMessage: any = message.mpaction as BidMessage;\n        const bidder = event.smsgMessage.to;\n\n        // find the ListingItem\n        if (!bidMessage) {   // ACTIONEVENT\n            throw new MessageException('Missing mpaction.');\n        }\n\n        return await this.listingItemService.findOneByHash(bidMessage.item)\n            .then(async listingItemModel => {\n                const listingItem = listingItemModel.toJSON();\n\n                // first save it\n                const actionMessageModel = await this.actionMessageService.createFromMarketplaceEvent(event, listingItem);\n                const actionMessage = actionMessageModel.toJSON();\n\n                // Get latest bid from listingItemId and bidder so we can get bidId.\n                const params: BidSearchParams = new BidSearchParams({\n                    listingItemId: listingItem.id,\n                    action: BidMessageType.MPA_BID,\n                    bidders: [ bidder ],\n                    ordering: SearchOrder.DESC\n                });\n                const oldBids: Bookshelf.Collection<Bid> = await this.bidService.search(params);\n\n                // TODO: oldBids.pop() does not return anything. this wont work.\n                let oldBid: any = oldBids.pop();\n                if (!oldBid) {\n                    throw new MessageException('Missing old bid.');\n                }\n                oldBid = oldBid.toJSON();\n\n                // Update the bid in the database with new action.\n                const tmpBidCreateRequest: BidCreateRequest = await this.bidFactory.getModel(bidMessage, listingItem.id, bidder, oldBid);\n                const bidUpdateRequest: BidUpdateRequest = {\n                    listing_item_id: tmpBidCreateRequest.listing_item_id,\n                    action: BidMessageType.MPA_REJECT,\n                    bidder: tmpBidCreateRequest.bidder,\n                    bidDatas: tmpBidCreateRequest.bidDatas\n                } as BidUpdateRequest;\n                const bidModel = await this.bidService.update(oldBid.id, bidUpdateRequest);\n                const bid = bidModel.toJSON();\n\n                // remove buyers lockedoutputs\n                let selectedOutputs = this.getValueFromBidDatas(BidDataValue.BUYER_OUTPUTS, bid.BidDatas);\n                selectedOutputs = selectedOutputs[0] === '[' ? JSON.parse(selectedOutputs) : selectedOutputs;\n\n                await this.lockedOutputService.destroyLockedOutputs(selectedOutputs);\n                const success = await this.lockedOutputService.unlockOutputs(selectedOutputs);\n\n                if (success) {\n                    return SmsgMessageStatus.PROCESSED;\n                } else {\n                    throw new MessageException('Failed to unlock the locked outputs.');\n                }\n\n            })\n            .catch(reason => {\n                return SmsgMessageStatus.WAITING;\n            });\n    }\n\n    /**\n     *\n     * todo: should be moved to util or we should combine the bid and escrowactionservices\n     * @param {string[]} data\n     * data[]:\n     * [0]: id, string\n     * [1]: value, string\n     * [2]: id, string\n     * [3]: value, string\n     *\n     * @param {any[]} data\n     * @returns {IdValuePair[]}\n     */\n    public getIdValuePairsFromArray(data: any[]): IdValuePair[] {\n        const idValuePairs: IdValuePair[] = [];\n\n        // convert the bid data params as idValuePairs array\n        for (let i = 0; i < data.length; i += 2) {\n            idValuePairs.push({id: data[i], value: data[i + 1]});\n        }\n        return idValuePairs;\n    }\n\n    /**\n     *\n     * todo: should be moved to util or we should combine the bid and escrowactionservices\n     * @param {string} key\n     * @param {module:resources.BidData[]} bidDatas\n     * @returns {any}\n     */\n    private getValueFromBidDatas(key: string, bidDatas: resources.BidData[]): any {\n        const value = bidDatas.find(kv => kv.dataId === key);\n        if (value) {\n            return value.dataValue;\n        } else {\n            this.log.error('Missing BidData value for key: ' + key);\n            throw new MessageException('Missing BidData value for key: ' + key);\n        }\n    }\n\n    private async createBid(bidMessage: BidMessage, listingItem: resources.ListingItem, bidder: string): Promise<resources.Bid> {\n\n        // create a bid\n        const bidCreateRequest = await this.bidFactory.getModel(bidMessage, listingItem.id, bidder);\n\n        // make sure the bids address type is correct\n        this.log.debug('found listingItem.id: ', listingItem.id);\n\n        if (!_.isEmpty(listingItem.ListingItemTemplate)) { // local profile is selling\n            this.log.debug('listingItem has template: ', listingItem.ListingItemTemplate.id);\n            this.log.debug('listingItem template has profile: ', listingItem.ListingItemTemplate.Profile.id);\n            bidCreateRequest.address.type = AddressType.SHIPPING_BID;\n            bidCreateRequest.address.profile_id = listingItem.ListingItemTemplate.Profile.id;\n        } else { // local profile is buying\n            this.log.debug('listingItem has no template ');\n            this.log.debug('bidder: ', bidder);\n            const profileModel = await this.profileService.findOneByAddress(bidder);\n            const profile = profileModel.toJSON();\n            bidCreateRequest.address.type = AddressType.SHIPPING_BID;\n            bidCreateRequest.address.profile_id = profile.id;\n        }\n\n        const createdBidModel = await this.bidService.create(bidCreateRequest);\n        const createdBid = createdBidModel.toJSON();\n        return createdBid;\n    }\n\n    /**\n     * get seller from listingitems MP_ITEM_ADD ActionMessage\n     * todo:  refactor\n     * @param {\"resources\".ListingItem} listingItem\n     * @returns {Promise<string>}\n     */\n    private getBuyer(listingItem: resources.ListingItem): string {\n        for (const actionMessage of listingItem.ActionMessages) {\n            if (actionMessage.action === 'MPA_BID') {\n                return actionMessage.MessageData.from;\n            }\n        }\n        throw new MessageException('Buyer not found for ListingItem.');\n    }\n\n    private configureEventListeners(): void {\n        this.log.info('Configuring EventListeners ');\n\n        this.eventEmitter.on(Events.BidReceivedEvent, async (event) => {\n            this.log.debug('Received event:', JSON.stringify(event, null, 2));\n            await this.processBidReceivedEvent(event)\n                .then(async status => {\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, status);\n                })\n                .catch(async reason => {\n                    this.log.error('ERROR: BidReceivedMessage processing failed.', reason);\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, SmsgMessageStatus.PROCESSING_FAILED);\n                });\n        });\n        this.eventEmitter.on(Events.AcceptBidReceivedEvent, async (event) => {\n            this.log.debug('Received event:', JSON.stringify(event, null, 2));\n            await this.processAcceptBidReceivedEvent(event)\n                .then(async status => {\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, status);\n                })\n                .catch(async reason => {\n                    this.log.error('ERROR: BidAcceptMessage processing failed.', reason);\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, SmsgMessageStatus.PROCESSING_FAILED);\n                });\n        });\n        this.eventEmitter.on(Events.CancelBidReceivedEvent, async (event) => {\n            this.log.debug('Received event:', JSON.stringify(event, null, 2));\n            await this.processCancelBidReceivedEvent(event)\n                .then(async status => {\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, status);\n                })\n                .catch(async reason => {\n                    this.log.error('ERROR: BidCancelMessage processing failed.', reason);\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, SmsgMessageStatus.PROCESSING_FAILED);\n                });\n        });\n        this.eventEmitter.on(Events.RejectBidReceivedEvent, async (event) => {\n            this.log.debug('Received event:', JSON.stringify(event, null, 2));\n            await this.processRejectBidReceivedEvent(event)\n                .then(async status => {\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, status);\n                })\n                .catch(async reason => {\n                    this.log.error('ERROR: BidRejectMessage processing failed.', reason);\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, SmsgMessageStatus.PROCESSING_FAILED);\n                });\n\n        });\n    }\n\n    /**\n     * Convenience util to correct unwanted precision errors in numbers.\n     * (particularly after number arithmetic)\n     *\n     * @param {number} n\n     * @returns {number}\n     */\n    private correctNumberDecimals(n: number): number {\n        return Number.parseFloat( n.toFixed(8) );\n    }\n}\n"]}