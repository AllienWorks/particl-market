{"version":3,"file":"EscrowActionService.js","sourceRoot":"","sources":["../../../src/api/services/EscrowActionService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets, Events } from '../../constants';\nimport * as resources from 'resources';\nimport { MarketplaceEvent } from '../messages/MarketplaceEvent';\n\nimport { EventEmitter } from 'events';\nimport { ActionMessageService } from './ActionMessageService';\nimport { EscrowService } from './EscrowService';\nimport { ListingItemService } from './ListingItemService';\nimport { MessageException } from '../exceptions/MessageException';\nimport * as _ from 'lodash';\nimport { MarketplaceMessage } from '../messages/MarketplaceMessage';\nimport { SmsgSendResponse } from '../responses/SmsgSendResponse';\nimport { OrderFactory } from '../factories/OrderFactory';\nimport { OrderService } from './OrderService';\nimport { SmsgService } from './SmsgService';\nimport { CoreRpcService } from './CoreRpcService';\nimport { EscrowFactory } from '../factories/EscrowFactory';\nimport { EscrowMessageType } from '../enums/EscrowMessageType';\nimport { BidMessageType } from '../enums/BidMessageType';\nimport { EscrowRequest } from '../requests/EscrowRequest';\nimport { OrderStatus } from '../enums/OrderStatus';\nimport { Output } from 'resources';\nimport { NotImplementedException } from '../exceptions/NotImplementedException';\nimport { OrderItemObjectService } from './OrderItemObjectService';\nimport { OrderItemObjectCreateRequest } from '../requests/OrderItemObjectCreateRequest';\nimport { OrderItemObjectUpdateRequest } from '../requests/OrderItemObjectUpdateRequest';\nimport { EscrowMessage } from '../messages/EscrowMessage';\nimport { OrderItemUpdateRequest } from '../requests/OrderItemUpdateRequest';\nimport { OrderItemService } from './OrderItemService';\nimport { OrderSearchParams } from '../requests/OrderSearchParams';\nimport { LockedOutputService } from './LockedOutputService';\nimport { BidDataValue } from '../enums/BidDataValue';\nimport { SmsgMessageStatus } from '../enums/SmsgMessageStatus';\nimport { SmsgMessageService } from './SmsgMessageService';\n\nexport class EscrowActionService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ActionMessageService) private actionMessageService: ActionMessageService,\n        @inject(Types.Service) @named(Targets.Service.EscrowService) private escrowService: EscrowService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) private listingItemService: ListingItemService,\n        @inject(Types.Service) @named(Targets.Service.SmsgService) private smsgService: SmsgService,\n        @inject(Types.Service) @named(Targets.Service.OrderService) private orderService: OrderService,\n        @inject(Types.Service) @named(Targets.Service.OrderItemService) private orderItemService: OrderItemService,\n        @inject(Types.Service) @named(Targets.Service.OrderItemObjectService) private orderItemObjectService: OrderItemObjectService,\n        @inject(Types.Service) @named(Targets.Service.CoreRpcService) private coreRpcService: CoreRpcService,\n        @inject(Types.Service) @named(Targets.Service.LockedOutputService) private lockedOutputService: LockedOutputService,\n        @inject(Types.Service) @named(Targets.Service.SmsgMessageService) private smsgMessageService: SmsgMessageService,\n        @inject(Types.Factory) @named(Targets.Factory.EscrowFactory) private escrowFactory: EscrowFactory,\n        @inject(Types.Factory) @named(Targets.Factory.OrderFactory) private orderFactory: OrderFactory,\n        @inject(Types.Core) @named(Core.Events) private eventEmitter: EventEmitter,\n        @inject(Types.Core) @named(Core.Logger) private Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n        this.configureEventListeners();\n    }\n\n    /**\n     * Send the lock message for the given OrderItem\n     *\n     * @param {EscrowRequest} escrowRequest\n     * @returns {Promise<SmsgSendResponse>}\n     */\n    public async lock(escrowRequest: EscrowRequest): Promise<SmsgSendResponse> {\n\n        this.validateEscrowRequest(escrowRequest);\n\n        // unlock and remove the locked outputs from db before sending the rawtx\n        const buyerSelectedOutputs = this.getValueFromOrderItemObjects(BidDataValue.BUYER_OUTPUTS, escrowRequest.orderItem.OrderItemObjects);\n        await this.lockedOutputService.destroyLockedOutputs(buyerSelectedOutputs);\n        const unlockSuccess = await this.lockedOutputService.unlockOutputs(buyerSelectedOutputs);\n\n        if (unlockSuccess) {\n            // generate rawtx and update it in the db\n            const rawtx = await this.createRawTx(escrowRequest);\n            const updatedRawTx = await this.updateRawTxOrderItemObject(escrowRequest.orderItem.OrderItemObjects, rawtx);\n\n            await this.updateOrderItemStatus(escrowRequest.orderItem, OrderStatus.ESCROW_LOCKED);\n\n            return await this.createAndSendMessage(escrowRequest, rawtx);\n\n        } else {\n            throw new MessageException('Failed to unlock the locked outputs.');\n        }\n\n    }\n\n\n    /**\n     *\n     * @param {EscrowRequest} escrowRequest\n     * @returns {Promise<SmsgSendResponse>}\n     */\n    public async refund(escrowRequest: EscrowRequest): Promise<SmsgSendResponse> {\n\n        throw new NotImplementedException();\n\n        // todo: refactor lock/refund/release since they're pretty much the same\n        // todo: add @validate to EscrowLockRequest\n/*\n        const orderItem = escrowRequest.orderItem;\n        const escrow = orderItem.Bid.ListingItem.PaymentInformation.Escrow;\n\n        if (_.isEmpty(orderItem)) {\n            throw new MessageException('OrderItem not found!');\n        }\n\n        if (_.isEmpty(escrow)) {\n            throw new MessageException('Escrow not found!');\n        }\n\n        const listingItemModel = await this.listingItemService.findOneByHash(orderItem.itemHash);\n        const listingItem = listingItemModel.toJSON();\n\n        // generate rawtx\n        const rawtx = await this.createRawTx(escrowRequest, listingItem);\n\n        const updatedRawTx = await this.updateRawTxOrderItemObject(orderItem.OrderItemObjects, rawtx);\n\n        // update OrderStatus\n        const newOrderStatus = OrderStatus.CHANGE;\n        const updatedOrderItem = await this.updateOrderItemStatus(orderItem, newOrderStatus);\n\n        // use escrowfactory to generate the refund message\n        const escrowActionMessage = await this.escrowFactory.getMessage(escrowRequest, rawtx);\n\n        const marketPlaceMessage = {\n            version: process.env.MARKETPLACE_VERSION,\n            mpaction: escrowActionMessage\n        } as MarketplaceMessage;\n\n        return await this.smsgService.smsgSend(orderItem.Order.seller, orderItem.Order.buyer, marketPlaceMessage, false);\n*/\n    }\n\n    /**\n     * Seller sends EscrowReleaseMessage (MPA_RELEASE) to the Buyer, indicating that the item has been sent.\n     * Buyer sends EscrowReleaseMessage (MPA_RELEASE) to the Seller, indicating that the sent item has been received.\n     *\n     * @param {EscrowRequest} escrowRequest\n     * @returns {Promise<SmsgSendResponse>}\n     */\n    public async release(escrowRequest: EscrowRequest): Promise<SmsgSendResponse> {\n\n        this.validateEscrowRequest(escrowRequest);\n\n        const orderItem = escrowRequest.orderItem;\n        const escrow = orderItem.Bid.ListingItem.PaymentInformation.Escrow;\n\n        // generate rawtx and update it in the db\n        const rawtx = await this.createRawTx(escrowRequest);\n        const updatedRawTx = await this.updateRawTxOrderItemObject(orderItem.OrderItemObjects, rawtx);\n\n        // update OrderStatus\n        const isMyListingItem = !_.isEmpty(orderItem.Bid.ListingItem.ListingItemTemplate);\n        const newOrderStatus = isMyListingItem ? OrderStatus.SHIPPING : OrderStatus.COMPLETE;\n        await this.updateOrderItemStatus(orderItem, newOrderStatus);\n\n        return await this.createAndSendMessage(escrowRequest, rawtx);\n    }\n\n    private validateEscrowRequest(escrowRequest: EscrowRequest): boolean {\n\n        const orderItem = escrowRequest.orderItem;\n        const escrow = orderItem.Bid.ListingItem.PaymentInformation.Escrow;\n\n        if (_.isEmpty(orderItem)) {\n            throw new MessageException('OrderItem not found!');\n        }\n\n        if (_.isEmpty(escrow)) {\n            throw new MessageException('Escrow not found!');\n        }\n\n        // todo: add sanity checks and validate that values are correct and outputs unspent, etc\n\n\n        return true;\n    }\n\n    private async createAndSendMessage(escrowRequest: EscrowRequest, rawtx: string): Promise<SmsgSendResponse> {\n\n        // use escrowfactory to generate the message\n        const escrowActionMessage = await this.escrowFactory.getMessage(escrowRequest, rawtx);\n\n        const marketPlaceMessage = {\n            version: process.env.MARKETPLACE_VERSION,\n            mpaction: escrowActionMessage\n        } as MarketplaceMessage;\n\n        const isMyListingItem = !_.isEmpty(escrowRequest.orderItem.Bid.ListingItem.ListingItemTemplate);\n        const sendFromAddress = isMyListingItem ? escrowRequest.orderItem.Order.seller : escrowRequest.orderItem.Order.buyer;\n        const sendToAddress = isMyListingItem ? escrowRequest.orderItem.Order.buyer : escrowRequest.orderItem.Order.seller;\n\n        return await this.smsgService.smsgSend(sendFromAddress, sendToAddress, marketPlaceMessage, false);\n    }\n\n    /**\n     * find Order, using buyer, seller and Order.OrderItem.itemHash\n     *\n     * @param {string} listingItemHash\n     * @param {string} buyerAddress\n     * @param {string} sellerAddress\n     * @returns {Promise<module:resources.Order>}\n     */\n    private async findOrder(listingItemHash: string, buyerAddress: string, sellerAddress: string): Promise<resources.Order> {\n\n        const orderSearchParams = {\n            listingItemHash,\n            buyerAddress,\n            sellerAddress\n        } as OrderSearchParams;\n\n        const ordersModel = await this.orderService.search(orderSearchParams);\n        const orders = ordersModel.toJSON();\n\n        if (orders.length === 0) {\n            this.log.error('Order not found for EscrowMessage.');\n            throw new MessageException('Order not found for EscrowMessage.');\n        }\n\n        if (orders.length > 1) {\n            this.log.error('Multiple Orders found for EscrowMessage, this should not happen.');\n            throw new MessageException('Multiple Orders found for EscrowMessage.');\n        }\n        return orders[0];\n    }\n\n    /**\n     *\n     * @param {MarketplaceEvent} event\n     * @returns {Promise<module:resources.Order>}\n     */\n    private async processLockEscrowReceivedEvent(event: MarketplaceEvent): Promise<SmsgMessageStatus> {\n\n        // TODO: EscrowMessage should contain Order.hash to identify the item in case there are two different Orders\n        // with the same item for same buyer. Currently, buyer can only bid once for an item, but this might not be the case always.\n\n        const message = event.marketplaceMessage;\n        if (!message.mpaction) {   // ACTIONEVENT\n            throw new MessageException('Missing mpaction.');\n        }\n\n        const escrowMessage = message.mpaction as EscrowMessage;\n        const listingItemHash = escrowMessage.item;\n\n        // find the ListingItem\n        return await this.listingItemService.findOneByHash(escrowMessage.item)\n            .then(async listingItemModel => {\n\n                const listingItem = listingItemModel.toJSON();\n\n                const seller = listingItem.seller;\n                const buyer = listingItem.seller === event.smsgMessage.from ? event.smsgMessage.to : event.smsgMessage.from;\n\n                // save ActionMessage\n                const actionMessageModel = await this.actionMessageService.createFromMarketplaceEvent(event, listingItem);\n                const actionMessage = actionMessageModel.toJSON();\n\n                // find the Order, using buyer, seller and Order.OrderItem.itemHash\n                const order: resources.Order = await this.findOrder(listingItemHash, buyer, seller);\n                const orderItem = _.find(order.OrderItems, (o: resources.OrderItem) => {\n                    return o.itemHash === listingItemHash;\n                });\n\n                if (orderItem) {\n\n                    // update rawtx\n                    const rawtx = escrowMessage.escrow.rawtx;\n                    const updatedRawTx = await this.updateRawTxOrderItemObject(orderItem.OrderItemObjects, rawtx);\n                    this.log.info('processLock(), rawtx:', JSON.stringify(updatedRawTx, null, 2));\n\n                    const updatedOrderItem = await this.updateOrderItemStatus(orderItem, OrderStatus.ESCROW_LOCKED);\n\n                    // remove the sellers locked outputs\n                    const selectedOutputs = this.getValueFromOrderItemObjects(BidDataValue.SELLER_OUTPUTS, orderItem.OrderItemObjects);\n                    await this.lockedOutputService.destroyLockedOutputs(selectedOutputs);\n\n                    return SmsgMessageStatus.PROCESSED;\n\n                } else {\n                    this.log.error('OrderItem not found for EscrowMessage.');\n                    throw new MessageException('OrderItem not found for EscrowMessage.');\n                }\n\n            })\n            .catch(reason => {\n                // ListingItem not found\n                return SmsgMessageStatus.WAITING;\n            });\n\n    }\n\n    private async processReleaseEscrowReceivedEvent(event: MarketplaceEvent): Promise<SmsgMessageStatus> {\n\n        const message = event.marketplaceMessage;\n        if (!message.mpaction) {   // ACTIONEVENT\n            throw new MessageException('Missing mpaction.');\n        }\n\n        const escrowMessage = message.mpaction as EscrowMessage;\n        const listingItemHash = escrowMessage.item;\n\n        // find the ListingItem\n        return await this.listingItemService.findOneByHash(escrowMessage.item)\n            .then(async listingItemModel => {\n\n                const listingItem: resources.ListingItem = listingItemModel.toJSON();\n\n                const seller = listingItem.seller;\n                const buyer = listingItem.seller === event.smsgMessage.from ? event.smsgMessage.to : event.smsgMessage.from;\n                const isMyListingItem = !!listingItem.ListingItemTemplate;\n\n                // save ActionMessage\n                const actionMessageModel = await this.actionMessageService.createFromMarketplaceEvent(event, listingItem);\n                const actionMessage = actionMessageModel.toJSON();\n\n                // find the Order, using buyer, seller and Order.OrderItem.itemHash\n                const order: resources.Order = await this.findOrder(listingItemHash, buyer, seller);\n                const orderItem = _.find(order.OrderItems, (o: resources.OrderItem) => {\n                    return o.itemHash === listingItemHash;\n                });\n\n                if (orderItem) {\n\n                    // update rawtx\n                    const rawtx = escrowMessage.escrow.rawtx;\n                    const updatedRawTx = await this.updateRawTxOrderItemObject(orderItem.OrderItemObjects, rawtx);\n\n\n                    const newOrderStatus = isMyListingItem ? OrderStatus.COMPLETE : OrderStatus.SHIPPING;\n                    const updatedOrderItem = await this.updateOrderItemStatus(orderItem, newOrderStatus);\n\n                    return SmsgMessageStatus.PROCESSED;\n\n                } else {\n                    this.log.error('OrderItem not found for EscrowMessage.');\n                    throw new MessageException('OrderItem not found for EscrowMessage.');\n                }\n            })\n            .catch(reason => {\n                // ListingItem not found\n                return SmsgMessageStatus.WAITING;\n            });\n\n    }\n\n    private async processRequestRefundEscrowReceivedEvent(event: MarketplaceEvent): Promise<SmsgMessageStatus> {\n\n        // find the ListingItem\n        const message = event.marketplaceMessage;\n        if (!message.mpaction || !message.mpaction.item) {   // ACTIONEVENT\n            throw new MessageException('Missing mpaction.');\n        }\n        // find the ListingItem\n        return await this.listingItemService.findOneByHash(message.mpaction.item)\n            .then(async listingItemModel => {\n                const listingItem = listingItemModel.toJSON();\n\n                // first save it\n                const actionMessageModel = await this.actionMessageService.createFromMarketplaceEvent(event, listingItem);\n                const actionMessage = actionMessageModel.toJSON();\n\n                // todo: update order\n                return SmsgMessageStatus.PROCESSED;\n            })\n            .catch(reason => {\n                // ListingItem not found\n                return SmsgMessageStatus.WAITING;\n            });\n    }\n\n    private async processRefundEscrowReceivedEvent(event: MarketplaceEvent): Promise<SmsgMessageStatus> {\n\n        // find the ListingItem\n        const message = event.marketplaceMessage;\n        if (!message.mpaction || !message.mpaction.item) {   // ACTIONEVENT\n            throw new MessageException('Missing mpaction.');\n        }\n\n        // find the ListingItem\n        return await this.listingItemService.findOneByHash(message.mpaction.item)\n            .then(async listingItemModel => {\n                const listingItem = listingItemModel.toJSON();\n\n                // first save it\n                const actionMessageModel = await this.actionMessageService.createFromMarketplaceEvent(event, listingItem);\n                const actionMessage = actionMessageModel.toJSON();\n\n                // todo: update order\n                return SmsgMessageStatus.PROCESSED;\n            })\n            .catch(reason => {\n                // ListingItem not found\n                return SmsgMessageStatus.WAITING;\n            });\n    }\n\n    /**\n     * Creates rawtx based on params\n     *\n     * @param request\n     * @param escrow\n     * @returns {string}\n     */\n    private async createRawTx(request: EscrowRequest): Promise<string> {\n\n        // MPA_LOCK:\n        //\n        //\n\n        // MPA_RELEASE:\n        // rawtx: 'The buyer sends the half signed rawtx which releases the escrow and payment.\n        // The vendor then recreates the whole transaction (check ouputs, inputs, scriptsigs\n        // and the fee), verifying that buyer\\'s rawtx is indeed legitimate. The vendor then\n        // signs the rawtx and broadcasts it.'\n\n        // MPA_REFUND\n        // rawtx: 'The vendor decodes the rawtx from MP_REQUEST_REFUND and recreates the whole\n        // transaction (check ouputs, inputs, scriptsigs and the fee), verifying that buyer\\'s\n        // rawtx is indeed legitimate. The vendor then signs the rawtx and sends it to the buyer.\n        // The vendor can decide to broadcast it himself.'\n\n        const orderItem: resources.OrderItem = request.orderItem;\n        const bid: resources.Bid = orderItem.Bid;\n        const isMyListingItem = !_.isEmpty(bid.ListingItem.ListingItemTemplate);\n\n        // this.log.debug('createRawTx(), orderItem:', JSON.stringify(orderItem, null, 2));\n\n        // rawtx is potentially the txid in case of ESCROW_LOCKED.\n        let rawtx = this.getValueFromOrderItemObjects(BidDataValue.RAW_TX, orderItem.OrderItemObjects);\n        const buyerEscrowPubAddressPublicKey = this.getValueFromOrderItemObjects(BidDataValue.BUYER_PUBKEY, orderItem.OrderItemObjects);\n        const sellerEscrowPubAddressPublicKey = this.getValueFromOrderItemObjects(BidDataValue.SELLER_PUBKEY, orderItem.OrderItemObjects);\n        const pubkeys = [sellerEscrowPubAddressPublicKey, buyerEscrowPubAddressPublicKey].sort();\n        // todo: does the order of the pubkeys matter?\n\n        this.log.debug('createRawTx(), rawtx:', rawtx);\n        this.log.debug('createRawTx(), pubkeys:', pubkeys);\n\n        if (!bid || bid.action !== BidMessageType.MPA_ACCEPT\n            || !orderItem || !orderItem.OrderItemObjects || orderItem.OrderItemObjects.length === 0\n            || !rawtx || !pubkeys) {\n\n            this.log.error('Not enough valid information to finalize escrow');\n            throw new MessageException('Not enough valid information to finalize escrow');\n        }\n\n        this.log.debug('createRawTx(), request.action:', request.action);\n\n        switch (request.action) {\n\n            case EscrowMessageType.MPA_LOCK:\n\n                if (isMyListingItem) {\n                    throw new MessageException('Seller can\\'t lock an Escrow.');\n                }\n\n                // Add Escrow address\n                // TODO: Way to recover escrow address should we lose it\n                const escrowMultisigAddress = await this.coreRpcService.addMultiSigAddress(\n                    2,\n                    pubkeys,\n                    '_escrow_' + orderItem.itemHash\n                );\n                this.log.debug('createRawTx(), escrowMultisigAddress:', JSON.stringify(escrowMultisigAddress, null, 2));\n\n                // validate the escrow amounts\n                const decodedTx = await this.coreRpcService.decodeRawTransaction(rawtx);\n                this.log.debug('createRawTx(), decoded:', JSON.stringify(decodedTx, null, 2));\n                // TODO: validation\n\n                // buyer signs the escrow tx, which should complete\n                const signedForLock = await this.signRawTx(rawtx, true);\n                this.log.debug('createRawTx(), signedForLock:', JSON.stringify(signedForLock, null, 2));\n\n                // TODO: This requires user interaction, so should be elsewhere possibly?\n                // TODO: Save TXID somewhere maybe??!\n                const response = await this.coreRpcService.sendRawTransaction(signedForLock); // .hex);\n\n                this.log.debug('createRawTx(), response:', JSON.stringify(response, null, 2));\n                return response;\n\n            case EscrowMessageType.MPA_RELEASE:\n\n                if (OrderStatus.ESCROW_LOCKED === orderItem.status && isMyListingItem) {\n                    // seller sends the first MPA_RELEASE, OrderStatus.ESCROW_LOCKED\n                    // this.log.debug('createRawTx(), orderItem:', JSON.stringify(orderItem, null, 2));\n\n                    const buyerReleaseAddress = this.getValueFromOrderItemObjects(BidDataValue.BUYER_RELEASE_ADDRESS, orderItem.OrderItemObjects);\n                    this.log.debug('createRawTx(), buyerReleaseAddress:', buyerReleaseAddress);\n\n                    if (!buyerReleaseAddress) {\n                        this.log.error('Not enough valid information to finalize escrow');\n                        throw new MessageException('Not enough valid information to finalize escrow');\n                    }\n\n                    const sellerReleaseAddress = await this.coreRpcService.getNewAddress(['_escrow_release'], false);\n                    this.log.debug('createRawTx(), sellerReleaseAddress:', sellerReleaseAddress);\n\n                    // rawtx is the transaction id!\n                    const realrawtx = await this.coreRpcService.getRawTransaction(rawtx);\n                    const decoded = await this.coreRpcService.decodeRawTransaction(realrawtx);\n                    this.log.debug('createRawTx(), decoded:', JSON.stringify(decoded, null, 2));\n\n                    const txid = decoded.txid;\n                    const value = decoded.vout[0].value - 0.0001; // TODO: Proper TX Fee\n\n                    if (!txid) {\n                        this.log.error(`Transaction with not found with txid: ${txid}.`);\n                        throw new MessageException(`Transaction with not found with txid: ${txid}.`);\n                    }\n\n                    const txout = {};\n\n                    // CRITICAL TODO: Use the right ratio's...\n\n                    // seller gets his escrow amount + buyer payment back\n                    // buyer gets the escrow amount back\n                    txout[sellerReleaseAddress] = +(value / 3 * 2).toFixed(8);\n                    txout[buyerReleaseAddress] = +(value / 3).toFixed(8);\n\n                    // TODO: Make sure this is the correct vout !!!\n                    // TODO: loop through the vouts and check the value, but what if theres multiple outputs with same value?\n                    const txInputs: Output[] = [{txid, vout: 0}];\n                    this.log.debug('===============================================================================');\n                    this.log.debug('createRawTx(), txInputs:', JSON.stringify(txInputs, null, 2));\n                    this.log.debug('createRawTx(), txout: ', JSON.stringify(txout, null, 2));\n\n                    rawtx = await this.coreRpcService.createRawTransaction(txInputs, txout);\n                    const signed = await this.signRawTx(rawtx, false);\n\n                    this.log.debug('createRawTx(), rawtx: ', JSON.stringify(rawtx, null, 2));\n                    this.log.debug('createRawTx(), signed: ', JSON.stringify(signed, null, 2));\n\n                    return signed.hex;\n\n                } else if (OrderStatus.SHIPPING === orderItem.status && !isMyListingItem) {\n                    // buyer sends the MPA_RELEASE, OrderStatus.SHIPPING\n\n                    const completeRawTx = await this.signRawTx(rawtx, true);\n                    this.log.debug('createRawTx(), completeRawTx: ', JSON.stringify(completeRawTx, null, 2));\n\n                    const txid =  await this.coreRpcService.sendRawTransaction(completeRawTx);\n                    this.log.debug('createRawTx(), response:', JSON.stringify(txid, null, 2));\n                    return txid;\n\n                } else {\n                    throw new MessageException('Something went wrong, MPA_RELEASE should not be sent at this point.');\n                }\n\n            default:\n                throw new NotImplementedException();\n        }\n    }\n\n    /**\n     * signs rawtx and ignores errors in case tx shouldnt be complete yet.\n     *\n     * @param {string} rawtx\n     * @param {boolean} shouldBeComplete\n     * @returns {Promise<any>}\n     */\n    private async signRawTx(rawtx: string, shouldBeComplete: boolean): Promise<any> {\n\n        this.log.debug('signRawTx(): signing rawtx, shouldBeComplete:', shouldBeComplete);\n\n        // This requires user interaction, so should be elsewhere possibly?\n        // TODO: Verify that the transaction has the correct values! Very important!!! TODO TODO TODO\n\n        // 0.16.x\n        // const signed = await this.coreRpcService.signRawTransaction(rawtx);\n        // 0.17++\n        const signed = await this.coreRpcService.signRawTransactionWithWallet(rawtx);\n        this.log.info('===========================================================================');\n        this.log.info('signed: ', JSON.stringify(signed, null, 2));\n        this.log.info('===========================================================================');\n\n        if (shouldBeComplete) {\n            // rawtx_complete =  buyer.combinerawtransaction(rawtx_with_buyer_sig, rawtx_with_seller_sig)\n            const completeRawTx = await this.coreRpcService.combineRawTransaction([signed.hex, rawtx]);\n            this.log.info('===========================================================================');\n            this.log.info('completeRawTx: ', JSON.stringify(completeRawTx, null, 2));\n            this.log.info('===========================================================================');\n\n            // const decodedTx = await this.coreRpcService.decodeRawTransaction(completeRawTx);\n            // this.log.debug('createRawTx(), completeRawTx decoded:', JSON.stringify(decodedTx, null, 2));\n\n            return completeRawTx;\n\n        } else {\n\n            const ignoreErrors = [\n                'Unable to sign input, invalid stack size (possibly missing key)',\n                'Operation not valid with the current stack size',\n                'Signature must be zero for failed CHECK(MULTI)SIG operation'\n            ];\n\n            if (!signed\n                || signed.errors\n                && (!shouldBeComplete && ignoreErrors.indexOf(signed.errors[0].error) === -1)) {\n                this.log.error('Error signing transaction' + signed.errors ? ': ' + signed.errors[0].error : '');\n                this.log.error('signed: ', JSON.stringify(signed, null, 2));\n                throw new MessageException('Error signing transaction' + signed.errors ? ': ' + signed.error : '');\n            }\n\n            this.log.debug('signRawTx(): signed:', JSON.stringify(signed, null, 2));\n            return signed;\n        }\n\n/*\n        if (shouldBeComplete) {\n            if (!signed.complete) {\n                this.log.error('Transaction should be complete at this stage.', JSON.stringify(signed, null, 2));\n                throw new MessageException('Transaction should be complete at this stage');\n            }\n        } else if (signed.complete) {\n            this.log.error('Transaction should not be complete at this stage, will not send insecure message');\n            throw new MessageException('Transaction should not be complete at this stage, will not send insecure message');\n        }\n\n        this.log.debug('signRawTx(): signed:', JSON.stringify(signed, null, 2));\n\n        return signed;\n*/\n    }\n\n    /**\n     *\n     * @param {string} key\n     * @param {module:resources.OrderItemObject[]} orderItemObjects\n     * @returns {any}\n     */\n    private getValueFromOrderItemObjects(key: string, orderItemObjects: resources.OrderItemObject[]): any {\n        const value = orderItemObjects.find(kv => kv.dataId === key);\n        if (value) {\n            return value.dataValue[0] === '[' ? JSON.parse(value.dataValue) : value.dataValue;\n        } else {\n            this.log.error('Missing OrderItemObject value for key: ' + key);\n            throw new MessageException('Missing OrderItemObject value for key: ' + key);\n        }\n    }\n\n    /**\n     * updates rawtx\n     *\n     * @param {module:resources.OrderItemObject[]} orderItemObjects\n     * @param {string} newRawtx\n     * @returns {Promise<any>}\n     */\n    private async updateRawTxOrderItemObject(orderItemObjects: resources.OrderItemObject[], newRawtx: string): Promise<any> {\n        const rawtxObject = orderItemObjects.find(kv => kv.dataId === 'rawtx');\n\n        if (rawtxObject) {\n            const updatedOrderItemObject = await this.orderItemObjectService.update(rawtxObject.id, {\n                dataId: BidDataValue.RAW_TX.toString(),\n                dataValue: newRawtx\n            } as OrderItemObjectUpdateRequest);\n            return updatedOrderItemObject.toJSON();\n        } else {\n            this.log.error('OrderItemObject for rawtx not found!');\n            throw new MessageException('OrderItemObject for rawtx not found!');\n        }\n    }\n\n    /**\n     * updates orderitems status\n     *\n     * @param {module:resources.OrderItem} orderItem\n     * @param {OrderStatus} newOrderStatus\n     * @returns {Promise<module:resources.OrderItem>}\n     */\n    private async updateOrderItemStatus(orderItem: resources.OrderItem, newOrderStatus: OrderStatus): Promise<resources.OrderItem> {\n\n        const orderItemUpdateRequest = {\n            itemHash: orderItem.itemHash,\n            status: newOrderStatus\n        } as OrderItemUpdateRequest;\n\n        const updatedOrderItemModel = await this.orderItemService.update(orderItem.id, orderItemUpdateRequest);\n        const updatedOrderItem: resources.OrderItem = updatedOrderItemModel.toJSON();\n        // this.log.debug('updatedOrderItem:', JSON.stringify(updatedOrderItem, null, 2));\n        return updatedOrderItem;\n    }\n\n    private configureEventListeners(): void {\n        this.log.info('Configuring EventListeners ');\n\n        this.eventEmitter.on(Events.LockEscrowReceivedEvent, async (event) => {\n            this.log.debug('Received event:', JSON.stringify(event, null, 2));\n            await this.processLockEscrowReceivedEvent(event)\n                .then(async status => {\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, status);\n                })\n                .catch(async reason => {\n                    this.log.error('ERROR: EscrowLockMessage processing failed.', reason);\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, SmsgMessageStatus.PROCESSING_FAILED);\n                });\n        });\n        this.eventEmitter.on(Events.ReleaseEscrowReceivedEvent, async (event) => {\n            this.log.debug('Received event:', JSON.stringify(event, null, 2));\n            await this.processReleaseEscrowReceivedEvent(event)\n                .then(async status => {\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, status);\n                })\n                .catch(async reason => {\n                    this.log.error('ERROR: EscrowReleaseMessage processing failed.', reason);\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, SmsgMessageStatus.PROCESSING_FAILED);\n                });\n        });\n        this.eventEmitter.on(Events.RequestRefundEscrowReceivedEvent, async (event) => {\n            this.log.debug('Received event:', JSON.stringify(event, null, 2));\n            await this.processRequestRefundEscrowReceivedEvent(event)\n                .then(async status => {\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, status);\n                })\n                .catch(async reason => {\n                    this.log.error('ERROR: EscrowRequestRefundMessage processing failed.', reason);\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, SmsgMessageStatus.PROCESSING_FAILED);\n                });\n        });\n        this.eventEmitter.on(Events.RefundEscrowReceivedEvent, async (event) => {\n            this.log.debug('Received event:', JSON.stringify(event, null, 2));\n            await this.processRefundEscrowReceivedEvent(event)\n                .then(async status => {\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, status);\n                })\n                .catch(async reason => {\n                    this.log.error('ERROR: EscrowRefundMessage processing failed.', reason);\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, SmsgMessageStatus.PROCESSING_FAILED);\n                });\n        });\n    }\n\n}\n"]}