{"version":3,"file":"CoreRpcService.js","sourceRoot":"","sources":["../../../src/api/services/CoreRpcService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { Environment } from '../../core/helpers/Environment';\nimport * as WebRequest from 'web-request';\nimport { HttpException } from '../exceptions/HttpException';\nimport { JsonRpc2Response } from '../../core/api/jsonrpc';\nimport { InternalServerException } from '../exceptions/InternalServerException';\nimport { CoreCookieService } from './CoreCookieService';\nimport {Output} from 'resources';\n\ndeclare function escape(s: string): string;\ndeclare function unescape(s: string): string;\n\nlet RPC_REQUEST_ID = 1;\n\nexport class CoreRpcService {\n\n    public log: LoggerType;\n\n    private DEFAULT_MAINNET_PORT = 51735;\n    private DEFAULT_TESTNET_PORT = 51935;\n    private DEFAULT_REGTEST_PORT = 19792;\n    private DEFAULT_HOSTNAME = 'localhost';\n    // DEFAULT_USERNAME & DEFAULT_PASSWORD in CoreCookieService\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Service) @named(Targets.Service.CoreCookieService) private coreCookieService: CoreCookieService\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async isConnected(): Promise<boolean> {\n        return await this.getNetworkInfo()\n            .then(response => true)\n            .catch(error => {\n                return false;\n            });\n    }\n\n    /**\n     * returns the particld version:\n     * 16000400: 0.16.0.4,\n     * 16000700: 0.16.0.7, ...\n     *\n     * @returns {Promise<number>}\n     */\n    public async getVersion(): Promise<number> {\n        return await this.getNetworkInfo()\n            .then(response => {\n                return response.version;\n            });\n    }\n\n    public async getNetworkInfo(): Promise<any> {\n        return await this.call('getnetworkinfo', [], false);\n    }\n\n    /**\n     * ﻿Returns a new Particl address for receiving payments, key is saved in wallet.\n     *\n     * If 'account' is specified (DEPRECATED), it is added to the address book\n     * so payments received with the address will be credited to 'account'.\n     *\n     * params:\n     * ﻿[0] \"account\", (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided,\n     *      the default account \"\" is used. It can also be set to the empty string \"\" to represent the default account.\n     *      The account does not need to exist, it will be created if there is no account by the given name.\n     * [1] bech32, (bool, optional) Use Bech32 encoding.\n     * [2] hardened, (bool, optional) Derive a hardened key.\n     * [3] 256bit, (bool, optional) Use 256bit hash.\n     *\n     * @param {any[]} params\n     * @param {boolean} smsgAddress\n     * @returns {Promise<any>}\n     */\n    public async getNewAddress(params: any[] = [], smsgAddress: boolean = true): Promise<any> {\n        const response = await this.call('getnewaddress', params);\n\n        if (smsgAddress) {\n            // call﻿smsgaddlocaladdress, even though I'm not sure if its required\n            const addLocalAddressResponse = await this.call('smsgaddlocaladdress', [response]);\n            this.log.debug('addLocalAddressResponse: ', addLocalAddressResponse);\n\n            // add address as receive address\n            // const localKeyResponse = await this.call('smsglocalkeys', ['recv', '+', response]);\n            // this.log.debug('localKeyResponse: ', localKeyResponse);\n        }\n        return response;\n    }\n\n    /**\n     * ﻿﻿Return information about the given particl address. Some information requires the address to be in the wallet.\n     *\n     * example result:\n     * {\n     *   \"address\": \"pdtVbU4WBLCvM3gwfBFbDtkG79qUnF62xV\",\n     *   \"scriptPubKey\": \"76a91462c87f85096decc977f6abe76a6824d2dcd11b9a88ac\",\n     *   \"from_ext_address_id\": \"xBc887dWRvSSwTkNbsfrVrms23YVXD2NZc\",\n     *   \"path\": \"m/0/6817\",\n     *   \"ismine\": true,\n     *   \"iswatchonly\": false,\n     *   \"isscript\": false,\n     *   \"iswitness\": false,\n     *   \"pubkey\": \"02570e92f4b8fb95599bd22a2428286bffad59d2de62ddf42d276653806a61e7f9\",\n     *   \"iscompressed\": true,\n     *   \"account\": \"_escrow_pub_0b787bf9b0da334baf91b62213f0f0362858299d3babd96893fd010414b71c43\"\n     * }\n     *\n     * @param {string} address\n     * @returns {Promise<any>}\n     */\n    public async getAddressInfo(address: string): Promise<any> {\n        return await this.call('getaddressinfo', [address]);\n    }\n\n    /**\n     * ﻿Add a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\n     *\n     * Each key is a Particl address or hex-encoded public key.\n     * If 'account' is specified (DEPRECATED), assign address to that account.\n     *\n     * params:\n     * ﻿[0] ﻿nrequired,       (numeric, required) The number of required signatures out of the n keys or addresses.\n     * [1] \"keys\",          (string, required) A json array of particl addresses or hex-encoded public keys\n     *      [\n     *          \"address\"   (string) particl address or hex-encoded public key\n     *          ...,\n     *      ]\n     * [2] \"account\"        (string, optional) DEPRECATED. An account to assign the addresses to.\n     * [3] bech32           (bool, optional) Use Bech32 encoding.\n     * [4] 256bit           (bool, optional) Use 256bit hash.\n     *\n     * example result:\n     * ﻿{\n     *   \"address\":\"multisigaddress\",    (string) The value of the new multisig address.\n     *   \"redeemScript\":\"script\"         (string) The string value of the hex-encoded redemption script.\n     * }\n     *\n     * @param {number} nrequired\n     * @param {string[]} keys\n     * @param {string} account\n     * @returns {Promise<any>}\n     */\n    public async addMultiSigAddress(nrequired: number, keys: string[], account?: string): Promise<any> {\n        const params: any[] = [];\n        params.push(nrequired);\n        params.push(keys);\n        if (account) {\n            params.push(account);\n        }\n        this.log.debug('params: ', params);\n        return await this.call('addmultisigaddress', params);\n    }\n\n    /**\n     * ﻿Create a transaction spending the given inputs and creating new outputs.\n     * Outputs can be addresses or data.\n     * Returns hex-encoded raw transaction.\n     * Note that the transaction's inputs are not signed, and\n     * it is not stored in the wallet or transmitted to the network.\n     *\n     * @param {\"resources\".Output[]} inputs\n     * @param outputs\n     * @returns {Promise<any>}\n     */\n    public async createRawTransaction(inputs: Output[], outputs: any): Promise<any> {\n        return await this.call('createrawtransaction', [inputs, outputs]);\n    }\n\n    /**\n     * ﻿Sign inputs for raw transaction (serialized, hex-encoded)\n     *\n     * @param {string} hexstring\n     * @param {any[]} outputs\n     * @returns {Promise<any>}\n     */\n    public async signRawTransactionWithWallet(hexstring: string, outputs?: any[]): Promise<any> {\n        const params: any[] = [];\n        params.push(hexstring);\n        if (outputs) {\n            params.push(outputs);\n        }\n        return await this.call('signrawtransactionwithwallet', params);\n    }\n\n    /**\n     * ﻿combinerawtransaction [\"hexstring\",...]\n     *\n     * Combine multiple partially signed transactions into one transaction.\n     * The combined transaction may be another partially signed transaction or a fully signed transaction\n     *\n     * @param {string} hexstring\n     * @param {any[]} outputs\n     * @returns {Promise<any>}\n     */\n    public async combineRawTransaction(hexstrings: string[]): Promise<any> {\n        return await this.call('combinerawtransaction', [hexstrings]);\n    }\n\n    /**\n     * ﻿Sign inputs for raw transaction (serialized, hex-encoded)\n     *\n     * @param {string} hexstring\n     * @param {string[]} privkeys\n     * @param prevtxs\n     * @param sighashtype\n     * @returns {Promise<any>}\n     */\n    public async signRawTransactionWithKey(hexstring: string, privkeys: string[], prevtxs?: any, sighashtype?: any): Promise<any> {\n        const params: any[] = [hexstring, privkeys];\n        if (prevtxs) {\n            params.push(prevtxs);\n        }\n        if (sighashtype) {\n            params.push(sighashtype);\n        }\n\n        return await this.call('signrawtransactionwithkey', params);\n    }\n\n    /**\n     * Sign inputs for raw transaction (serialized, hex-encoded)\n     *\n     * @param {string} hexstring\n     * @param {any[]} outputs\n     * @returns {Promise<any>}\n     */\n    public async signRawTransaction(hexstring: string, outputs?: any[]): Promise<any> {\n        const params: any[] = [];\n        params.push(hexstring);\n        if (outputs) {\n            params.push(outputs);\n        }\n        return await this.call('signrawtransaction', params);\n    }\n\n    /**\n     * Submits raw transaction (serialized, hex-encoded) to local node and network.\n     *\n     * @param {string} hexstring\n     * @returns {Promise<any>}\n     */\n    public async sendRawTransaction(hexstring: string, allowHighFees: boolean = false): Promise<any> {\n        const params: any[] = [];\n        params.push(hexstring);\n        params.push(allowHighFees);\n        return await this.call('sendrawtransaction', params);\n    }\n\n    /**\n     * Return a JSON object representing the serialized, hex-encoded transaction.\n     *\n     * @param {string} hexstring\n     * @returns {Promise<any>}\n     */\n    public async decodeRawTransaction(hexstring: string, isWitness?: boolean): Promise<any> {\n        const params: any[] = [];\n        params.push(hexstring);\n\n        if (isWitness !== undefined) {\n            params.push(isWitness);\n        }\n        return await this.call('decoderawtransaction', params);\n    }\n\n    /**\n     * Return the raw transaction data.\n     *\n     * @param {string} hexstring\n     * @returns {Promise<any>}\n     */\n    public async getRawTransaction(txid: string, verbose?: boolean, blockhash?: string): Promise<any> {\n        const params: any[] = [];\n        params.push(txid);\n\n        if (verbose !== undefined) {\n            params.push(verbose);\n        }\n        if (blockhash !== undefined) {\n            params.push(blockhash);\n        }\n        return await this.call('getrawtransaction', params);\n    }\n\n    /**\n     * ﻿Returns array of unspent transaction outputs\n     * with between minconf and maxconf (inclusive) confirmations.\n     * Optionally filter to only include txouts paid to specified addresses.\n     *\n     * @param {number} minconf\n     * @param {number} maxconf\n     * @param {string[]} addresses\n     * @param {boolean} includeUnsafe\n     * @param queryOptions\n     * @returns {Promise<any>}\n     */\n    public async listUnspent(minconf: number, maxconf: number,\n                             addresses: string[] = [], includeUnsafe: boolean = true, queryOptions: any = {}): Promise<any> {\n\n        const params: any[] = [minconf, maxconf, addresses, includeUnsafe];\n        if (!_.isEmpty(queryOptions)) {\n            params.push(queryOptions);\n        }\n\n        return await this.call('listunspent', params);\n    }\n\n    /**\n     *\n     * @param {boolean} unlock\n     * @param {module:resources.Output[]} outputs, [{\"txid\":\"id\",\"vout\": n},...]\n     * @returns {Promise<any>}\n     */\n    public async lockUnspent(unlock: boolean, outputs: Output[]): Promise<any> {\n\n        const params: any[] = [unlock, outputs, true];\n        return await this.call('lockunspent', params);\n    }\n\n    /**\n     * ﻿DEPRECATED. Returns the current Particl address for receiving payments to this account.\n     *\n     * @param {string} account\n     * @returns {Promise<any>}\n     */\n    public async getAccountAddress(account: string): Promise<any> {\n        const params: any[] = [account];\n        return await this.call('getaccountaddress', params);\n    }\n\n    /**\n     * ﻿Get the current block number\n     *\n     * @param {string} account\n     * @returns {Promise<any>}\n     */\n    public async getBlockCount(): Promise<number> {\n        return await this.call('getblockcount', []);\n    }\n\n    /**\n     * ﻿Reveals the private key corresponding to 'address'.\n     *\n     * @param {string} address\n     * @returns {Promise<string>}\n     */\n    public async dumpPrivKey(address: string): Promise<string> {\n        const params: any[] = [address];\n        return await this.call('dumpprivkey', params);\n    }\n\n    public async call(method: string, params: any[] = [], logCall: boolean = true): Promise<any> {\n\n        const id = RPC_REQUEST_ID++;\n        const postData = JSON.stringify({\n            jsonrpc: '2.0',\n            method,\n            params,\n            id\n        });\n\n        const url = this.getUrl();\n        const options = this.getOptions();\n\n        if (logCall) {\n            // TODO: handle [object Object]\n            this.log.debug('call: ' + method + ' ' + JSON.stringify(params).replace(new RegExp(',', 'g'), ' '));\n        }\n        // this.log.debug('call url:', url);\n        // this.log.debug('call postData:', postData);\n\n        return await WebRequest.post(url, options, postData)\n            .then( response => {\n\n                if (response.statusCode !== 200) {\n                    this.log.error('response.headers: ', response.headers);\n                    this.log.error('response.statusCode: ', response.statusCode);\n                    this.log.error('response.statusMessage: ', response.statusMessage);\n                    this.log.error('response.content: ', response.content);\n                    const message = response.content ? JSON.parse(response.content) : response.statusMessage;\n                    throw new HttpException(response.statusCode, message);\n                }\n\n                const jsonRpcResponse = JSON.parse(response.content) as JsonRpc2Response;\n                if (jsonRpcResponse.error) {\n                    throw new InternalServerException([jsonRpcResponse.error.code, jsonRpcResponse.error.message]);\n                }\n\n                // this.log.debug('RESULT:', jsonRpcResponse.result);\n                return jsonRpcResponse.result;\n            })\n            .catch(error => {\n                // this.log.error('ERROR: ' + JSON.stringify(error));\n                if (error instanceof HttpException || error instanceof InternalServerException) {\n                    throw error;\n                } else {\n                    throw new InternalServerException([error.name, error.message]);\n                }\n            });\n\n    }\n\n    private getOptions(): any {\n\n        const auth = {\n            user: (process.env.RPCUSER ? process.env.RPCUSER : this.coreCookieService.getCoreRpcUsername()),\n            pass: (process.env.RPCPASSWORD ? process.env.RPCPASSWORD : this.coreCookieService.getCoreRpcPassword()),\n            sendImmediately: false\n        };\n\n        const headers = {\n            'User-Agent': 'Marketplace RPC client',\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        };\n        const rpcOpts = {\n            auth,\n            headers\n        };\n\n        // this.log.debug('initializing rpc with opts:', rpcOpts);\n        return rpcOpts;\n    }\n\n    private getUrl(): string {\n        // this.log.debug('Environment.isTestnet():', Environment.isTestnet());\n        // this.log.debug('Environment.isAlpha():', Environment.isAlpha());\n        // this.log.debug('process.env.TESTNET:', process.env.TESTNET);\n\n        const host = (process.env.RPCHOSTNAME ? process.env.RPCHOSTNAME : this.DEFAULT_HOSTNAME);\n        const port = process.env.RPC_PORT ?\n            process.env.RPC_PORT :\n            (Environment.isRegtest() ?\n                (process.env.REGTEST_PORT ? process.env.REGTEST_PORT : this.DEFAULT_REGTEST_PORT) :\n                (Environment.isTestnet() ?\n                    (process.env.TESTNET_PORT ? process.env.TESTNET_PORT : this.DEFAULT_TESTNET_PORT) :\n                    (process.env.MAINNET_PORT ? process.env.MAINNET_PORT : this.DEFAULT_MAINNET_PORT)\n                )\n            );\n        return 'http://' + host + ':' + port;\n    }\n\n}\n"]}