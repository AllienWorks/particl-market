{"version":3,"file":"ItemLocationService.js","sourceRoot":"","sources":["../../../src/api/services/ItemLocationService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ItemLocationRepository } from '../repositories/ItemLocationRepository';\nimport { ItemLocation } from '../models/ItemLocation';\nimport { ItemLocationCreateRequest } from '../requests/ItemLocationCreateRequest';\nimport { ItemLocationUpdateRequest } from '../requests/ItemLocationUpdateRequest';\nimport { LocationMarkerService } from './LocationMarkerService';\n\n\nexport class ItemLocationService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.LocationMarkerService) public locationMarkerService: LocationMarkerService,\n        @inject(Types.Repository) @named(Targets.Repository.ItemLocationRepository) public itemLocationRepo: ItemLocationRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ItemLocation>> {\n        return this.itemLocationRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ItemLocation> {\n        const itemLocation = await this.itemLocationRepo.findOne(id, withRelated);\n        if (itemLocation === null) {\n            this.log.warn(`ItemLocation with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return itemLocation;\n    }\n\n    @validate()\n    public async create(@request(ItemLocationCreateRequest) data: ItemLocationCreateRequest): Promise<ItemLocation> {\n        const body = JSON.parse(JSON.stringify(data));\n\n        // extract and remove related models from request\n        const locationMarker = body.locationMarker;\n        delete body.locationMarker;\n\n        // If the request body was valid we will create the itemLocation\n        const itemLocation = await this.itemLocationRepo.create(body);\n\n        // create related models\n        if (!_.isEmpty(locationMarker)) {\n            locationMarker.item_location_id = itemLocation.Id;\n            await this.locationMarkerService.create(locationMarker);\n        }\n\n        // finally find and return the created itemLocation\n        const result = await this.findOne(itemLocation.Id);\n        return result;\n    }\n\n    @validate()\n    public async update(id: number, @request(ItemLocationUpdateRequest) data: ItemLocationUpdateRequest): Promise<ItemLocation> {\n\n        const body = JSON.parse(JSON.stringify(data));\n\n        const locationMarker = body.locationMarker;\n        delete body.locationMarker;\n\n        // find the existing one without related\n        const itemLocation = await this.findOne(id, false);\n\n        // set new values\n        itemLocation.Region = body.region;\n        itemLocation.Address = body.address;\n\n        // update itemLocation record\n        const updatedItemLocation = await this.itemLocationRepo.update(id, itemLocation.toJSON());\n\n        // update related locationMarker\n        const existingLocationMarker = updatedItemLocation.related('LocationMarker').toJSON();\n        if (!_.isEmpty(locationMarker) && !_.isEmpty(existingLocationMarker)) {\n            // we have new locationMarker and existingLocationMarker -> update with new data\n            locationMarker.item_location_id = id;\n            await this.locationMarkerService.update(existingLocationMarker.id, locationMarker);\n\n        } else if (!_.isEmpty(locationMarker) && _.isEmpty(existingLocationMarker)) {\n            // we have new locationMarker but no existingLocationMarker -> create new\n            locationMarker.item_location_id = id;\n            await this.locationMarkerService.create(locationMarker);\n\n        } else if (_.isEmpty(locationMarker) && !_.isEmpty(existingLocationMarker)) {\n            // we have no new locationMarker and existingLocationMarker -> remove existing\n            await this.locationMarkerService.destroy(existingLocationMarker.id);\n        }\n\n        // finally find and return the updated itemLocation\n        return await this.findOne(id);\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.itemLocationRepo.destroy(id);\n    }\n\n}\n"]}