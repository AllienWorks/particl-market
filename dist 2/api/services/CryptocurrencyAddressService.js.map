{"version":3,"file":"CryptocurrencyAddressService.js","sourceRoot":"","sources":["../../../src/api/services/CryptocurrencyAddressService.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAE1C,+CAAuD;AACvD,sDAA4D;AAC5D,uEAAoE;AAEpE,qGAAkG;AAElG,uGAAoG;AACpG,uGAAoG;AAGpG,IAAa,4BAA4B,GAAzC;IAII,YACgG,yBAA0D,EACvG,MAAyB;QADoB,8BAAyB,GAAzB,yBAAyB,CAAiC;QACvG,WAAM,GAAN,MAAM,CAAmB;QAExE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAEY,OAAO;;YAChB,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,OAAO,EAAE,CAAC;QACpD,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU,EAAE,cAAuB,IAAI;;YACxD,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YAC5F,EAAE,CAAC,CAAC,qBAAqB,KAAK,IAAI,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,qCAAqC,EAAE,iBAAiB,CAAC,CAAC;gBACxE,MAAM,IAAI,qCAAiB,CAAC,EAAE,CAAC,CAAC;YACpC,CAAC;YACD,MAAM,CAAC,qBAAqB,CAAC;QACjC,CAAC;KAAA;IAGY,MAAM,CAA+C,IAAwC;;YACtG,yEAAyE;YACzE,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;gBACnF,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,yCAAyC,EAAE,CAAC,CAAC,CAAC;gBAC7D,MAAM,CAAC,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,4DAA4D;YAC5D,MAAM,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;QACxD,CAAC;KAAA;IAGY,MAAM,CAAC,EAAU,EAA+C,IAAwC;;YAEjH,wCAAwC;YACxC,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAE5D,iBAAiB;YACjB,qBAAqB,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACvC,qBAAqB,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;YAE7C,sCAAsC;YACtC,MAAM,CAAC,MAAM,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,EAAE,EAAE,qBAAqB,CAAC,MAAM,EAAE,CAAC,CAAC;QAC3F,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU;;YAC3B,MAAM,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACrD,CAAC;KAAA;CAEJ,CAAA;AA7BG;IADC,mBAAQ,EAAE;IACW,mBAAA,kBAAO,CAAC,uEAAkC,CAAC,CAAA;;6CAAO,uEAAkC;;0DASzG;AAGD;IADC,mBAAQ,EAAE;IACsB,mBAAA,kBAAO,CAAC,uEAAkC,CAAC,CAAA;;qDAAO,uEAAkC;;0DAWpH;AAhDQ,4BAA4B;IAKhC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,UAAU,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAA;IACnF,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CADgF,iEAA+B;GALjJ,4BAA4B,CAsDxC;AAtDY,oEAA4B","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ValidationException } from '../exceptions/ValidationException';\nimport { CryptocurrencyAddressRepository } from '../repositories/CryptocurrencyAddressRepository';\nimport { CryptocurrencyAddress } from '../models/CryptocurrencyAddress';\nimport { CryptocurrencyAddressCreateRequest } from '../requests/CryptocurrencyAddressCreateRequest';\nimport { CryptocurrencyAddressUpdateRequest } from '../requests/CryptocurrencyAddressUpdateRequest';\n\n\nexport class CryptocurrencyAddressService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.CryptocurrencyAddressRepository) public cryptocurrencyAddressRepo: CryptocurrencyAddressRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<CryptocurrencyAddress>> {\n        return this.cryptocurrencyAddressRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<CryptocurrencyAddress> {\n        const cryptocurrencyAddress = await this.cryptocurrencyAddressRepo.findOne(id, withRelated);\n        if (cryptocurrencyAddress === null) {\n            this.log.warn(`CryptocurrencyAddress with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return cryptocurrencyAddress;\n    }\n\n    @validate()\n    public async create( @request(CryptocurrencyAddressCreateRequest) body: CryptocurrencyAddressCreateRequest): Promise<CryptocurrencyAddress> {\n        // If the request body was valid we will create the cryptocurrencyAddress\n        const cryptocurrencyAddress = await this.cryptocurrencyAddressRepo.create(body).catch(e => {\n            this.log.error('CryptocurrencyAddressService.create(): ', e);\n            throw e;\n        });\n\n        // finally find and return the created cryptocurrencyAddress\n        return await this.findOne(cryptocurrencyAddress.Id);\n    }\n\n    @validate()\n    public async update(id: number, @request(CryptocurrencyAddressUpdateRequest) body: CryptocurrencyAddressUpdateRequest): Promise<CryptocurrencyAddress> {\n\n        // find the existing one without related\n        const cryptocurrencyAddress = await this.findOne(id, false);\n\n        // set new values\n        cryptocurrencyAddress.Type = body.type;\n        cryptocurrencyAddress.Address = body.address;\n\n        // update cryptocurrencyAddress record\n        return await this.cryptocurrencyAddressRepo.update(id, cryptocurrencyAddress.toJSON());\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.cryptocurrencyAddressRepo.destroy(id);\n    }\n\n}\n"]}