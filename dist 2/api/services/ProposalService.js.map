{"version":3,"file":"ProposalService.js","sourceRoot":"","sources":["../../../src/api/services/ProposalService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ProposalRepository } from '../repositories/ProposalRepository';\nimport { Proposal } from '../models/Proposal';\nimport { ProposalCreateRequest } from '../requests/ProposalCreateRequest';\nimport { ProposalUpdateRequest } from '../requests/ProposalUpdateRequest';\nimport { ObjectHash } from '../../core/helpers/ObjectHash';\nimport { HashableObjectType } from '../enums/HashableObjectType';\nimport { ProposalOptionService } from './ProposalOptionService';\nimport { ProposalSearchParams } from '../requests/ProposalSearchParams';\nimport {ProposalOptionResultUpdateRequest} from '../requests/ProposalOptionResultUpdateRequest';\nimport {ProposalResultUpdateRequest} from '../requests/ProposalResultUpdateRequest';\nimport {CoreRpcService} from './CoreRpcService';\nimport {ProposalResultService} from './ProposalResultService';\nimport {ProposalOptionResultService} from './ProposalOptionResultService';\nimport * as resources from 'resources';\nimport {ProposalOptionResultCreateRequest} from '../requests/ProposalOptionResultCreateRequest';\nimport {ProposalResultCreateRequest} from '../requests/ProposalResultCreateRequest';\n\nexport class ProposalService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ProposalOptionService) public proposalOptionService: ProposalOptionService,\n        @inject(Types.Service) @named(Targets.Service.CoreRpcService) public coreRpcService: CoreRpcService,\n        @inject(Types.Service) @named(Targets.Service.ProposalResultService) public proposalResultService: ProposalResultService,\n        @inject(Types.Service) @named(Targets.Service.ProposalOptionResultService) public proposalOptionResultService: ProposalOptionResultService,\n        @inject(Types.Repository) @named(Targets.Repository.ProposalRepository) public proposalRepo: ProposalRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async searchBy(options: ProposalSearchParams, withRelated: boolean = true): Promise<Bookshelf.Collection<Proposal>> {\n        const result = await this.proposalRepo.searchBy(options, withRelated);\n        // this.log.debug('searchBy, result: ', JSON.stringify(result.toJSON(), null, 2));\n        return result;\n    }\n\n    public async findAll(withRelated: boolean = true): Promise<Bookshelf.Collection<Proposal>> {\n        return this.proposalRepo.findAll(withRelated);\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Proposal> {\n        const proposal = await this.proposalRepo.findOne(id, withRelated);\n        if (proposal === null) {\n            this.log.warn(`Proposal with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return proposal;\n    }\n\n    public async findOneByHash(hash: string, withRelated: boolean = true): Promise<Proposal> {\n        const proposal = await this.proposalRepo.findOneByHash(hash, withRelated);\n        if (proposal === null) {\n            this.log.warn(`Proposal with the hash=${hash} was not found!`);\n            throw new NotFoundException(hash);\n        }\n        return proposal;\n    }\n\n    public async findOneByItemHash(listingItemHash: string, withRelated: boolean = true): Promise<Proposal> {\n        const proposal = await this.proposalRepo.findOneByItemHash(listingItemHash, withRelated);\n        if (proposal === null) {\n            this.log.warn(`Proposal with the listingItemHash=${listingItemHash} was not found!`);\n            throw new NotFoundException(listingItemHash);\n        }\n        return proposal;\n    }\n\n    @validate()\n    public async create( @request(ProposalCreateRequest) data: ProposalCreateRequest, skipOptions: boolean = false): Promise<Proposal> {\n        const startTime = new Date().getTime();\n\n        const body = JSON.parse(JSON.stringify(data));\n        // this.log.debug('create Proposal, body: ', JSON.stringify(body, null, 2));\n\n        body.hash = ObjectHash.getHash(body, HashableObjectType.PROPOSAL_CREATEREQUEST);\n\n        // extract and remove related models from request\n        const options = body.options || [];\n        delete body.options;\n\n        // if the request body was valid we will create the proposal\n        const proposal = await this.proposalRepo.create(body);\n\n        // TODO: remove skipOptions\n        // skipOptions is just for tests\n        if (!skipOptions) {\n            let optionId = 0;\n            // create related options\n            for (const optionCreateRequest of options) {\n                optionCreateRequest.proposal_id = proposal.id;\n                optionCreateRequest.proposalHash = body.hash;\n\n                if (!optionCreateRequest.optionId) {\n                    optionCreateRequest.optionId = optionId;\n                    optionId++;\n                }\n                // this.log.debug('optionCreateRequest: ', JSON.stringify(optionCreateRequest, null, 2));\n                await this.proposalOptionService.create(optionCreateRequest);\n            }\n        } else {\n            this.log.debug('skipping creation of ProposalOptions...');\n        }\n\n        // finally find and return the created proposal\n        const result = await this.findOne(proposal.id, true);\n\n        this.log.debug('ProposalService.create: ' + (new Date().getTime() - startTime) + 'ms');\n\n        return result;\n    }\n\n    @validate()\n    public async update(id: number, @request(ProposalUpdateRequest) data: ProposalUpdateRequest): Promise<Proposal> {\n\n        const body = JSON.parse(JSON.stringify(data));\n        body.hash = ObjectHash.getHash(body, HashableObjectType.PROPOSAL_CREATEREQUEST);\n\n        // find the existing one without related\n        const proposal = await this.findOne(id, false);\n\n        // set new values\n        proposal.Submitter = body.submitter;\n        proposal.BlockStart = body.blockStart;\n        proposal.BlockEnd = body.blockEnd;\n        proposal.ExpiryTime = body.expiryTime;\n        proposal.PostedAt = body.postedAt;\n        proposal.ExpiredAt = body.expiredAt;\n        proposal.ReceivedAt = body.receivedAt;\n        proposal.Hash = body.hash;\n        proposal.Item = body.item;\n        proposal.Type = body.type;\n        proposal.Title = body.title;\n        proposal.Description = body.description;\n\n        // update proposal record\n        const updatedProposal = await this.proposalRepo.update(id, proposal.toJSON());\n        return updatedProposal;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.proposalRepo.destroy(id);\n    }\n\n\n    /**\n     * creates empty ProposalResult for the Proposal\n     * todo: create one after call to proposalservice.create, so this doesnt need to be called from anywhere else\n     *\n     * @param {\"resources\".Proposal} proposal\n     * @returns {Promise<\"resources\".ProposalResult>}\n     */\n    public async createProposalResult(proposal: resources.Proposal): Promise<resources.ProposalResult> {\n        const currentBlock: number = await this.coreRpcService.getBlockCount();\n\n        let proposalResultModel = await this.proposalResultService.create({\n            block: currentBlock,\n            proposal_id: proposal.id\n        } as ProposalResultCreateRequest);\n\n        let proposalResult: resources.ProposalResult = proposalResultModel.toJSON();\n\n        for (const proposalOption of proposal.ProposalOptions) {\n            const proposalOptionResult = await this.proposalOptionResultService.create({\n                weight: 0,\n                voters: 0,\n                proposal_option_id: proposalOption.id,\n                proposal_result_id: proposalResult.id\n            } as ProposalOptionResultCreateRequest);\n            // this.log.debug('processProposalReceivedEvent.proposalOptionResult = ' + JSON.stringify(proposalOptionResult, null, 2));\n        }\n\n        proposalResultModel = await this.proposalResultService.findOne(proposalResult.id);\n        proposalResult = proposalResultModel.toJSON();\n\n        // this.log.debug('proposalResult: ', JSON.stringify(proposalResult, null, 2));\n        return proposalResult;\n    }\n\n\n    /**\n     * todo: needs refactoring, perhaps combine with createProposalResult\n     * todo: and move to proposalresultservice?\n     * todo: this is just updating the latest one.. we should propably modify this so that we create a new\n     * one periodically and can track the voting progress while proposal is active\n     *\n     * @param {number} proposalResultId\n     * @returns {Promise<\"resources\".ProposalResult>}\n     */\n    public async recalculateProposalResult(proposal: resources.Proposal): Promise<resources.ProposalResult> {\n\n        const currentBlock: number = await this.coreRpcService.getBlockCount();\n\n        // get the proposal\n        // const proposalModel = await this.proposalService.findOne(proposalId);\n        // const proposal = proposalModel.toJSON();\n\n        this.log.debug('recalculateProposalResult(), proposal.id: ', proposal.id);\n\n        // fetch the latest ProposalResult to get the latest id\n        let proposalResultModel = await this.proposalResultService.findOneByProposalHash(proposal.hash);\n        let proposalResult: resources.ProposalResult = proposalResultModel.toJSON();\n\n        // first update the block in ProposalResult\n        proposalResultModel = await this.proposalResultService.update(proposalResult.id, {\n            block: currentBlock\n        } as ProposalResultUpdateRequest);\n        proposalResult = proposalResultModel.toJSON();\n\n        // then loop through ProposalOptionResults and update values\n        for (const proposalOptionResult of proposalResult.ProposalOptionResults) {\n            // get the votes\n            const proposalOptionModel = await this.proposalOptionService.findOne(proposalOptionResult.ProposalOption.id);\n            const proposalOption: resources.ProposalOption = proposalOptionModel.toJSON();\n\n            // this.log.debug('recalculateProposalResult(), proposalOption: ', JSON.stringify(proposalOption, null, 2));\n            this.log.debug('recalculateProposalResult(), proposalOption.Votes.length: ', proposalOption.Votes.length);\n\n            // update\n            const updatedProposalOptionResultModel = await this.proposalOptionResultService.update(proposalOptionResult.id, {\n                weight: proposalOption.Votes.length,\n                voters: proposalOption.Votes.length\n            } as ProposalOptionResultUpdateRequest);\n            const updatedProposalOptionResult = updatedProposalOptionResultModel.toJSON();\n            // this.log.debug('recalculateProposalResult(), proposalOption: ', JSON.stringify(updatedProposalOptionResult, null, 2));\n        }\n\n        proposalResultModel = await this.proposalResultService.findOne(proposalResult.id);\n        proposalResult = proposalResultModel.toJSON();\n        // this.log.debug('recalculateProposalResult(), proposalResult: ', JSON.stringify(proposalResult, null, 2));\n\n        return proposalResult;\n    }\n\n}\n"]}