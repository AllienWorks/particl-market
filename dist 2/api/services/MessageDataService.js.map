{"version":3,"file":"MessageDataService.js","sourceRoot":"","sources":["../../../src/api/services/MessageDataService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { MessageDataRepository } from '../repositories/MessageDataRepository';\nimport { MessageData } from '../models/MessageData';\nimport { MessageDataCreateRequest } from '../requests/MessageDataCreateRequest';\nimport { MessageDataUpdateRequest } from '../requests/MessageDataUpdateRequest';\n\n\nexport class MessageDataService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.MessageDataRepository) public messageDataRepo: MessageDataRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<MessageData>> {\n        return this.messageDataRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<MessageData> {\n        const messageData = await this.messageDataRepo.findOne(id, withRelated);\n        if (messageData === null) {\n            this.log.warn(`MessageData with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return messageData;\n    }\n\n    @validate()\n    public async create( @request(MessageDataCreateRequest) data: MessageDataCreateRequest): Promise<MessageData> {\n\n        const body = JSON.parse(JSON.stringify(data));\n\n        // this.log.debug('messagedata body:', JSON.stringify(body, null, 2));\n\n        // If the request body was valid we will create the messageData\n        const messageData = await this.messageDataRepo.create(body);\n\n        // finally find and return the created messageData\n        const newMessageData = await this.findOne(messageData.id);\n        return newMessageData;\n    }\n\n    @validate()\n    public async update(id: number, @request(MessageDataUpdateRequest) body: MessageDataUpdateRequest): Promise<MessageData> {\n\n        // find the existing one without related\n        const messageData = await this.findOne(id, false);\n\n        // set new values\n        messageData.Msgid = body.msgid;\n        messageData.Version = body.version;\n        messageData.Received = body.received;\n        messageData.Sent = body.sent;\n        messageData.From = body.from;\n        messageData.To = body.to;\n\n        // update messageData record\n        const updatedMessageData = await this.messageDataRepo.update(id, messageData.toJSON());\n\n        const newMessageData = await this.findOne(id);\n        return newMessageData;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.messageDataRepo.destroy(id);\n    }\n\n}\n"]}