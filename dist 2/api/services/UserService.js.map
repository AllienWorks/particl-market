{"version":3,"file":"UserService.js","sourceRoot":"","sources":["../../../src/api/services/UserService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\n/**\n * UserService\n * ------------------------------\n *\n * This service is here to validate and call the repository layer for\n * database actions. Furthermore you should throw events here if\n * necessary.\n */\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { EventEmitter } from '../../core/api/events';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { UserCreateRequest } from '../requests/user/UserCreateRequest';\nimport { UserUpdateRequest } from '../requests/user/UserUpdateRequest';\nimport { UserRepository } from '../repositories/UserRepository';\nimport { User } from '../models/User';\nimport { UserCreatedListener } from '../listeners/user/UserCreatedListener';\n\n\nexport class UserService {\n\n    private log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.UserRepository) public userRepo: UserRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Core) @named(Core.Events) public events: EventEmitter\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * This returns all user database objects\n     */\n    public findAll(): Promise<Bookshelf.Collection<User>> {\n        return this.userRepo.findAll();\n    }\n\n    /**\n     * Returns the user with the given id or throws a Not-Found exception\n     *\n     * @param {number} id of the user\n     * @returns {Promise<User>}\n     */\n    public async findOne(id: number): Promise<User> {\n        const user = await this.userRepo.findOne(id);\n        if (user === null) {\n            this.log.warn(`User with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return user;\n    }\n\n    /**\n     * Returns the user with the given user_id or throws a Not-Found exception\n     *\n     * @param {number} id of the user\n     * @returns {Promise<User>}\n     */\n    public async findByUserId(userId: string): Promise<User> {\n        const user = await this.userRepo.findByUserId(userId);\n        if (user === null) {\n            this.log.warn(`User with the userId=${userId} was not found!`);\n            throw new NotFoundException(userId);\n        }\n        return user;\n    }\n\n    /**\n     * We will validate the data and create a new user and\n     * return it, so the client get its new id\n     *\n     * @param {*} data is the json body of the request\n     * @returns {Promise<User>}\n     */\n    @validate()\n    public async create( @request(UserCreateRequest) data: any): Promise<User> {\n        // If the request body was valid we will create the user\n        const user = await this.userRepo.create(data);\n        this.events.emit(UserCreatedListener.Event, user.toJSON());\n        return user;\n    }\n\n    /**\n     * We will validate the data and update a user with the given id and\n     * return the new user\n     *\n     * @param {number} id of the user\n     * @param {*} newUser is the json body of the request\n     * @returns {Promise<User>}\n     */\n    @validate()\n    public async update(id: number, @request(UserUpdateRequest) newUser: any): Promise<User> {\n        // Find or fail\n        const user = await this.findOne(id);\n        // Set new values\n        user.FirstName = newUser.firstName;\n        user.LastName = newUser.lastName;\n        user.Email = newUser.email;\n        // Update user record\n        const updatedUser = await this.userRepo.update(id, user.toJSON());\n        return updatedUser;\n    }\n\n    /**\n     * This will just delete a user\n     *\n     * @param {number} id of the user\n     * @returns {Promise<void>}\n     */\n    public destroy(id: number): Promise<void> {\n        return this.userRepo.destroy(id);\n    }\n\n}\n"]}