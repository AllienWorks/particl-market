{"version":3,"file":"AddressService.js","sourceRoot":"","sources":["../../../src/api/services/AddressService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { AddressRepository } from '../repositories/AddressRepository';\nimport { Address } from '../models/Address';\nimport { AddressCreateRequest } from '../requests/AddressCreateRequest';\nimport { AddressUpdateRequest } from '../requests/AddressUpdateRequest';\n\nexport class AddressService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.AddressRepository) public addressRepo: AddressRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<Address>> {\n        return this.addressRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Address> {\n        const address = await this.addressRepo.findOne(id, withRelated);\n        if (address === null) {\n            this.log.warn(`Address with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return address;\n    }\n\n    @validate()\n    public async create( @request(AddressCreateRequest) body: AddressCreateRequest): Promise<Address> {\n\n        // todo: should propably validate country here\n        // this.log.debug('create Address, body: ', JSON.stringify(body, null, 2));\n\n        // If the request body was valid we will create the address\n        const address = await this.addressRepo.create(body);\n        // finally find and return the created addressId\n        const newAddress = await this.findOne(address.Id);\n        return newAddress;\n    }\n\n    @validate()\n    public async update(id: number, @request(AddressUpdateRequest) body: AddressUpdateRequest): Promise<Address> {\n        // find the existing one without related\n        const address = await this.findOne(id, false);\n        // set new values\n        address.Title = body.title;\n        address.FirstName = body.firstName;\n        address.LastName = body.lastName;\n        address.AddressLine1 = body.addressLine1;\n        address.AddressLine2 = body.addressLine2;\n        address.ZipCode = body.zipCode;\n        address.City = body.city;\n        address.State = body.state;\n        address.Country = body.country;\n        // update address record\n        const updatedAddress = await this.addressRepo.update(id, address.toJSON());\n        return updatedAddress;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        this.log.debug('removing address:', id);\n        return await this.addressRepo.destroy(id);\n    }\n\n}\n"]}