{"version":3,"file":"BidService.js","sourceRoot":"","sources":["../../../src/api/services/BidService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\n\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ValidationException } from '../exceptions/ValidationException';\n\nimport { BidRepository } from '../repositories/BidRepository';\n\nimport { Bid } from '../models/Bid';\n\nimport { BidCreateRequest } from '../requests/BidCreateRequest';\nimport { BidUpdateRequest } from '../requests/BidUpdateRequest';\nimport { BidDataCreateRequest } from '../requests/BidDataCreateRequest';\nimport { BidSearchParams } from '../requests/BidSearchParams';\n\nimport { EventEmitter } from 'events';\nimport { BidDataService } from './BidDataService';\nimport { ListingItemService } from './ListingItemService';\nimport { AddressService } from './AddressService';\nimport { ProfileService } from './ProfileService';\n\nimport { SearchOrder } from '../enums/SearchOrder';\n\nexport class BidService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.BidRepository) public bidRepo: BidRepository,\n        @inject(Types.Service) @named(Targets.Service.BidDataService) public bidDataService: BidDataService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) public listingItemService: ListingItemService,\n        @inject(Types.Service) @named(Targets.Service.AddressService) public addressService: AddressService,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) public profileService: ProfileService,\n        @inject(Types.Core) @named(Core.Events) public eventEmitter: EventEmitter,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<Bid>> {\n        return await this.bidRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Bid> {\n        const bid = await this.bidRepo.findOne(id, withRelated);\n        if (bid === null) {\n            this.log.warn(`Bid with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return bid;\n    }\n\n    public async findAllByListingItemHash(hash: string, withRelated: boolean = true): Promise<Bookshelf.Collection<Bid>> {\n        // TODO: this does not seem to be implemented, see repo/model\n        const params = {\n            listingItemHash: hash\n        } as BidSearchParams;\n        return await this.search(params);\n    }\n\n    /**\n     * search Bid using given BidSearchParams\n     *\n     * @param options\n     * @returns {Promise<Bookshelf.Collection<Bid>>}\n     */\n    @validate()\n    public async search(@request(BidSearchParams) options: BidSearchParams, withRelated: boolean = true): Promise<Bookshelf.Collection<Bid>> {\n\n        // if item hash was given, set the item id\n        if (options.listingItemHash) {\n            const foundListing = await this.listingItemService.findOneByHash(options.listingItemHash, false);\n            options.listingItemId = foundListing.Id;\n        }\n        return await this.bidRepo.search(options, withRelated);\n    }\n\n    @validate()\n    public async getLatestBid(listingItemId: number, bidder: string): Promise<Bid> {\n        // return await this.bidRepo.getLatestBid(listingItemId, bidder);\n        return await this.search({\n            listingItemId,\n            bidders: [ bidder ],\n            ordering: SearchOrder.DESC\n        } as BidSearchParams, true)[0];\n    }\n\n    @validate()\n    public async create(@request(BidCreateRequest) data: BidCreateRequest): Promise<Bid> {\n\n        const body = JSON.parse(JSON.stringify(data));\n        // this.log.debug('BidCreateRequest:', JSON.stringify(body, null, 2));\n\n        // bid needs is related to listing item\n        if (body.listing_item_id == null) {\n            this.log.error('Request body is not valid, listing_item_id missing');\n            throw new ValidationException('Request body is not valid', ['listing_item_id missing']);\n        }\n\n        // bid needs to have a bidder\n        if (body.bidder == null) {\n            this.log.error('Request body is not valid, bidder missing');\n            throw new ValidationException('Request body is not valid', ['bidder missing']);\n        }\n\n        // shipping address\n        if (body.address == null) {\n            this.log.error('Request body is not valid, address missing');\n            throw new ValidationException('Request body is not valid', ['address missing']);\n        }\n\n        const addressCreateRequest = body.address;\n        delete body.address;\n\n        // in case there's no profile id, figure it out\n        if (!addressCreateRequest.profile_id) {\n            const foundBidderProfile = await this.profileService.findOneByAddress(body.bidder);\n            if (foundBidderProfile) {\n                // we are the bidder\n                addressCreateRequest.profile_id = foundBidderProfile.id;\n            } else {\n                try {\n                    // we are the seller\n                    const listingItemModel = await this.listingItemService.findOne(body.listing_item_id);\n                    const listingItem = listingItemModel.toJSON();\n                    addressCreateRequest.profile_id = listingItem.ListingItemTemplate.Profile.id;\n                } catch (e) {\n                    this.log.error('Funny test data bid? It seems we are neither bidder nor the seller.');\n                }\n            }\n        }\n\n        // this.log.debug('address create request: ', JSON.stringify(addressCreateRequest, null, 2));\n        const addressModel = await this.addressService.create(addressCreateRequest);\n        const address = addressModel.toJSON();\n        // this.log.debug('created address: ', JSON.stringify(address, null, 2));\n\n        // set the address_id for bid\n        body.address_id = address.id;\n\n        const bidDatas = body.bidDatas || [];\n        delete body.bidDatas;\n\n        // this.log.debug('body: ', JSON.stringify(body, null, 2));\n        // If the request body was valid we will create the bid\n        const bid = await this.bidRepo.create(body);\n\n        for (const dataToSave of bidDatas) {\n            // todo: move to biddataservice?\n            dataToSave.bid_id = bid.Id;\n            // todo: test with different types of dataValue\n            dataToSave.dataValue = typeof (dataToSave.dataValue) === 'string' ? dataToSave.dataValue : JSON.stringify(dataToSave.dataValue);\n\n            // this.log.debug('dataToSave: ', JSON.stringify(dataToSave, null, 2));\n            await this.bidDataService.create(dataToSave);\n        }\n\n        // finally find and return the created bid\n        const newBid = await this.findOne(bid.Id);\n        return newBid;\n    }\n\n    @validate()\n    public async update(id: number, @request(BidUpdateRequest) data: BidUpdateRequest): Promise<Bid> {\n\n        const body = JSON.parse(JSON.stringify(data));\n\n        // find the existing one without related\n        const bid = await this.findOne(id, false);\n\n        // extract and remove related models from request\n        const bidDatas: BidDataCreateRequest[] = body.bidDatas || [];\n        delete body.bidDatas;\n\n        // set new values, we only need to change the action\n        bid.Action = body.action;\n        // bid.Bidder = body.bidder;\n\n        // update bid record\n        const updatedBid = await this.bidRepo.update(id, bid.toJSON());\n\n        // remove old BidDatas\n        if (bidDatas) {\n            const oldBidDatas = updatedBid.related('BidDatas').toJSON();\n            for (const bidData of oldBidDatas) {\n                await this.bidDataService.destroy(bidData.id);\n            }\n\n            // create new BidDatas\n            for (const bidData of bidDatas) {\n                bidData.bid_id = id;\n                bidData.dataValue = typeof (bidData.dataValue) === 'string' ? bidData.dataValue : JSON.stringify(bidData.dataValue);\n                await this.bidDataService.create(bidData);\n            }\n        }\n\n        return await this.findOne(id, true);\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.bidRepo.destroy(id);\n    }\n\n}\n"]}