{"version":3,"file":"SmsgService.js","sourceRoot":"","sources":["../../../src/api/services/SmsgService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { CoreRpcService } from './CoreRpcService';\nimport { MarketplaceMessage } from '../messages/MarketplaceMessage';\nimport { SmsgSendResponse } from '../responses/SmsgSendResponse';\nimport {Environment} from '../../core/helpers/Environment';\nimport * as resources from 'resources';\nimport {IncomingSmsgMessage} from '../messages/IncomingSmsgMessage';\n\nexport class SmsgService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.CoreRpcService) public coreRpcService: CoreRpcService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * ﻿Adds a private key (as returned by dumpprivkey) to the smsg database.\n     * The imported key can receive messages even if the wallet is locked.\n     *\n     * Arguments:\n     * 1. \"privkey\"          (string, required) The private key (see dumpprivkey)\n     * 2. \"label\"            (string, optional, default=\"\") An optional label\n     *\n     * @param {string} privateKey\n     * @param {string} label\n     * @returns {Promise<boolean>}\n     */\n    public async smsgImportPrivKey(privateKey: string, label: string = 'default market'): Promise<boolean> {\n        return await this.coreRpcService.call('smsgimportprivkey', [privateKey, label])\n            .then(response => true)\n            .catch(error => {\n                this.log.error('smsgImportPrivKey failed: ', error);\n                return false;\n            });\n    }\n\n    /**\n     * Decrypt and display all received messages.\n     * Warning: clear will delete all messages.\n     *\n     * ﻿smsginbox [all|unread|clear]\n     *\n     * @param {string} param\n     * @returns {Promise<any>}\n     */\n    public async smsgInbox(param: string = 'all'): Promise<any> {\n        const response = await this.coreRpcService.call('smsginbox', [param], false);\n        // this.log.debug('got response:', response);\n        return response;\n    }\n\n    /**\n     * ﻿Send an encrypted message from address to another\n     *\n     * response:\n     * {\n     * \"result\": \"Sent.\",\n     * \"txid\": \"756be1d7b7ebcac344792bd2f050b75240ec7bc0c47d706adde8f87bec260c22\",\n     * \"fee\": 0.002554\n     * }\n     * {\n     * \"result\": \"Send failed.\",\n     * \"error\": \"Message is too long, 5392 > 4096\"\n     * }\n     *\n     * @param {string} fromAddress\n     * @param {string} toAddress\n     * @param {MarketplaceMessage} message\n     * @param {boolean} paidMessage\n     * @param {number} daysRetention\n     * @param {boolean} estimateFee\n     * @returns {Promise<any>}\n     */\n    public async smsgSend(fromAddress: string,\n                          toAddress: string,\n                          message: MarketplaceMessage,\n                          paidMessage: boolean = true,\n                          daysRetention: number = parseInt(process.env.PAID_MESSAGE_RETENTION_DAYS, 10),\n                          estimateFee: boolean = false): Promise<SmsgSendResponse> {\n\n        this.log.debug('smsgSend, from: ' + fromAddress + ', to: ' + toAddress);\n        const params: any[] = [\n            fromAddress,\n            toAddress,\n            JSON.stringify(message),\n            paidMessage,\n            daysRetention,\n            estimateFee\n        ];\n        const response: SmsgSendResponse = await this.coreRpcService.call('smsgsend', params);\n        this.log.debug('smsgSend, response: ' + JSON.stringify(response, null, 2));\n        return response;\n    }\n\n    /**\n     * List and manage keys.\n     * ﻿﻿[whitelist|all|wallet|recv <+/-> <address>|anon <+/-> <address>]\n     *\n     * response:\n     * ﻿{\n     * \"wallet_keys\": [\n     * ],\n     * \"smsg_keys\": [\n     *   {\n     *     \"address\": \"pmktyVZshdMAQ6DPbbRXEFNGuzMbTMkqAA\",\n     *     \"public_key\": \"MkRjwngPvzX17eF6sjadwjgfjHmn3E9wVheSTi1UjecUNxxZtBFyVJLiWCrMUrm4FbpFW3ehg5HaWfxFd3xQnRzj\",\n     *     \"receive\": \"1\",\n     *     \"anon\": \"1\",\n     *     \"label\": \"default market\"\n     *   }\n     * ],\n     * \"result\": \"1\"\n     * }\n     *\n     * @returns {Promise<any>}\n     */\n    public async smsgLocalKeys(): Promise<any> {\n        const response = await this.coreRpcService.call('smsglocalkeys');\n        // this.log.debug('smsgLocalKeys, response: ' + JSON.stringify(response, null, 2));\n        return response;\n    }\n\n    /**\n     * View smsg by msgid.\n     *\n     * Arguments:\n     * 1. \"msgid\"              (string, required) The id of the message to view.\n     * 2. options              (json, optional) Options object.\n     * {\n     *       \"delete\": bool                 (bool, optional) Delete msg if true.\n     *       \"setread\": bool                (bool, optional) Set read status to value.\n     *       \"encoding\": str                (string, optional, default=\"ascii\") Display message data in encoding, values: \"hex\".\n     * }\n     *\n     * Result:\n     * {\n     *  \"msgid\": \"...\"                    (string) The message identifier\n     *  \"version\": \"str\"                  (string) The message version\n     *  \"location\": \"str\"                 (string) inbox|outbox|sending\n     *  \"received\": int                     (int) Time the message was received\n     *  \"to\": \"str\"                       (string) Address the message was sent to\n     *  \"read\": bool                        (bool) Read status\n     *  \"sent\": int                         (int) Time the message was created\n     *  \"paid\": bool                        (bool) Paid or free message\n     *  \"daysretention\": int                (int) Number of days message will stay in the network for\n     *  \"expiration\": int                   (int) Time the message will be dropped from the network\n     *  \"payloadsize\": int                  (int) Size of user message\n     *  \"from\": \"str\"                     (string) Address the message was sent from\n     * }\n     *\n     * @returns {Promise<IncomingSmsgMessage>}\n     */\n    public async smsg(msgId: string, remove: boolean = false, setRead: boolean = true): Promise<IncomingSmsgMessage> {\n        const response = await this.coreRpcService.call('smsg', [msgId, {\n                delete: remove,\n                setread: setRead,\n                encoding: 'ascii'\n            }\n        ]);\n        // this.log.debug('smsg, response: ' + JSON.stringify(response, null, 2));\n        return response;\n    }\n\n    /**\n     * ﻿Add address and matching public key to database.\n     * ﻿smsgaddaddress <address> <pubkey>\n     *\n     * @param {string} address\n     * @param {string} publicKey\n     * @returns {Promise<boolean>}\n     */\n    public async smsgAddAddress(address: string, publicKey: string): Promise<boolean> {\n        return await this.coreRpcService.call('smsgaddaddress', [address, publicKey])\n            .then(response => {\n                this.log.debug('smsgAddAddress, response: ' + JSON.stringify(response, null, 2));\n                if (response.result === 'Public key added to db.'\n                    || (response.result === 'Public key not added to db.' && response.reason === 'Public key exists in database')) {\n                    return true;\n                } else {\n                    return false;\n                }\n            })\n            .catch(error => {\n                this.log.error('smsgAddAddress failed: ', error);\n                return false;\n            });\n    }\n}\n"]}