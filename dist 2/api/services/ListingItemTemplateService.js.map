{"version":3,"file":"ListingItemTemplateService.js","sourceRoot":"","sources":["../../../src/api/services/ListingItemTemplateService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { MessageException } from '../exceptions/MessageException';\n\nimport { ListingItemTemplate } from '../models/ListingItemTemplate';\nimport { ListingItemTemplateRepository } from '../repositories/ListingItemTemplateRepository';\n\nimport { ItemInformationService } from './ItemInformationService';\nimport { PaymentInformationService } from './PaymentInformationService';\nimport { MessagingInformationService } from './MessagingInformationService';\nimport { CryptocurrencyAddressService } from './CryptocurrencyAddressService';\nimport { ListingItemObjectService } from './ListingItemObjectService';\n\nimport { ListingItemTemplateSearchParams } from '../requests/ListingItemTemplateSearchParams';\n\nimport { ListingItemTemplateCreateRequest } from '../requests/ListingItemTemplateCreateRequest';\nimport { ListingItemTemplateUpdateRequest } from '../requests/ListingItemTemplateUpdateRequest';\nimport { ItemInformationCreateRequest } from '../requests/ItemInformationCreateRequest';\nimport { ItemInformationUpdateRequest } from '../requests/ItemInformationUpdateRequest';\nimport { PaymentInformationCreateRequest } from '../requests/PaymentInformationCreateRequest';\nimport { PaymentInformationUpdateRequest } from '../requests/PaymentInformationUpdateRequest';\nimport { MessagingInformationCreateRequest } from '../requests/MessagingInformationCreateRequest';\nimport { MessagingInformationUpdateRequest } from '../requests/MessagingInformationUpdateRequest';\nimport { ListingItemObjectCreateRequest } from '../requests/ListingItemObjectCreateRequest';\nimport { ListingItemObjectUpdateRequest } from '../requests/ListingItemObjectUpdateRequest';\nimport { ObjectHash } from '../../core/helpers/ObjectHash';\nimport { HashableObjectType } from '../enums/HashableObjectType';\nimport { HashableListingItem } from '../../core/helpers/HashableListingItem';\n\nexport class ListingItemTemplateService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.ListingItemTemplateRepository) public listingItemTemplateRepo: ListingItemTemplateRepository,\n        @inject(Types.Service) @named(Targets.Service.ItemInformationService) public itemInformationService: ItemInformationService,\n        @inject(Types.Service) @named(Targets.Service.PaymentInformationService) public paymentInformationService: PaymentInformationService,\n        @inject(Types.Service) @named(Targets.Service.MessagingInformationService) public messagingInformationService: MessagingInformationService,\n        @inject(Types.Service) @named(Targets.Service.CryptocurrencyAddressService) public cryptocurrencyAddressService: CryptocurrencyAddressService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemObjectService) public listingItemObjectService: ListingItemObjectService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ListingItemTemplate>> {\n        return this.listingItemTemplateRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ListingItemTemplate> {\n        const listingItemTemplate = await this.listingItemTemplateRepo.findOne(id, withRelated);\n        if (listingItemTemplate === null) {\n            this.log.warn(`ListingItemTemplate with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return listingItemTemplate;\n    }\n\n    /**\n     *\n     * @param {string} hash\n     * @param {boolean} withRelated\n     * @returns {Promise<ListingItemTemplate>}\n     */\n    public async findOneByHash(hash: string, withRelated: boolean = true): Promise<ListingItemTemplate> {\n        const listingItemTemplate = await this.listingItemTemplateRepo.findOneByHash(hash, withRelated);\n        if (listingItemTemplate === null) {\n            this.log.warn(`ListingItemTemplate with the hash=${hash} was not found!`);\n            throw new NotFoundException(hash);\n        }\n        return listingItemTemplate;\n    }\n\n    /**\n     * search ListingItemTemplates using given ListingItemTemplateSearchParams\n     *\n     * @param options\n     * @returns {Promise<Bookshelf.Collection<ListingItemTemplate>>}\n     */\n    @validate()\n    public async search(\n        @request(ListingItemTemplateSearchParams) options: ListingItemTemplateSearchParams): Promise<Bookshelf.Collection<ListingItemTemplate>> {\n        return await this.listingItemTemplateRepo.search(options);\n    }\n\n    @validate()\n    public async create( @request(ListingItemTemplateCreateRequest) data: ListingItemTemplateCreateRequest,\n                         timestampedHash: boolean = false): Promise<ListingItemTemplate> {\n\n        // TODO: need to add transactions and rollback in case of failure\n        const body = JSON.parse(JSON.stringify(data));\n\n        body.hash = ObjectHash.getHash(body, HashableObjectType.LISTINGITEMTEMPLATE_CREATEREQUEST, [timestampedHash]);\n\n        // this.log.debug('create template, body:', JSON.stringify(body, null, 2));\n\n        // extract and remove related models from request\n        const itemInformation = body.itemInformation;\n        delete body.itemInformation;\n        const paymentInformation = body.paymentInformation;\n        delete body.paymentInformation;\n        const messagingInformation = body.messagingInformation || [];\n        delete body.messagingInformation;\n        const listingItemObjects = body.listingItemObjects || [];\n        delete body.listingItemObjects;\n\n        // If the request body was valid we will create the listingItemTemplate\n        const listingItemTemplate: any = await this.listingItemTemplateRepo.create(body);\n\n        // create related models\n        if (!_.isEmpty(itemInformation)) {\n            itemInformation.listing_item_template_id = listingItemTemplate.Id;\n            await this.itemInformationService.create(itemInformation as ItemInformationCreateRequest);\n            // this.log.debug('itemInformation, result:', JSON.stringify(result, null, 2));\n        }\n        if (!_.isEmpty(paymentInformation)) {\n            paymentInformation.listing_item_template_id = listingItemTemplate.Id;\n            await this.paymentInformationService.create(paymentInformation as PaymentInformationCreateRequest);\n            // this.log.debug('paymentInformation, result:', JSON.stringify(result, null, 2));\n        }\n\n        for (const msgInfo of messagingInformation) {\n            msgInfo.listing_item_template_id = listingItemTemplate.Id;\n            await this.messagingInformationService.create(msgInfo as MessagingInformationCreateRequest);\n            // this.log.debug('msgInfo, result:', JSON.stringify(result, null, 2));\n        }\n\n        for (const object of listingItemObjects) {\n            object.listing_item_template_id = listingItemTemplate.Id;\n            await this.listingItemObjectService.create(object as ListingItemObjectCreateRequest);\n            // this.log.debug('object, result:', JSON.stringify(result, null, 2));\n        }\n\n        const result = await this.findOne(listingItemTemplate.Id);\n        // this.log.debug('result:', JSON.stringify(result.toJSON(), null, 2));\n\n        // finally find and return the created listingItemTemplate\n        return result;\n\n    }\n\n    @validate()\n    public async update(id: number, @request(ListingItemTemplateUpdateRequest) data: ListingItemTemplateUpdateRequest): Promise<ListingItemTemplate> {\n        const body = JSON.parse(JSON.stringify(data));\n\n        body.hash = ObjectHash.getHash(body, HashableObjectType.LISTINGITEMTEMPLATE_CREATEREQUEST);\n\n        // find the existing one without related\n        const listingItemTemplate = await this.findOne(id, false);\n        // set new values\n        listingItemTemplate.Hash = body.hash;\n\n        // update listingItemTemplate record\n        const updatedListingItemTemplate = await this.listingItemTemplateRepo.update(id, listingItemTemplate.toJSON());\n\n        // if the related one exists allready, then update. if it doesnt exist, create. and if the related one is missing, then remove.\n        // Item-information\n        let itemInformation = updatedListingItemTemplate.related('ItemInformation').toJSON() || {};\n\n        if (!_.isEmpty(body.itemInformation)) {\n            if (!_.isEmpty(itemInformation)) {\n                const itemInformationId = itemInformation.id;\n                itemInformation = body.itemInformation;\n                itemInformation.listing_item_template_id = id;\n                await this.itemInformationService.update(itemInformationId, itemInformation as ItemInformationUpdateRequest);\n            } else {\n                itemInformation = body.itemInformation;\n                itemInformation.listing_item_template_id = id;\n                await this.itemInformationService.create(itemInformation as ItemInformationCreateRequest);\n            }\n        } else if (!_.isEmpty(itemInformation)) {\n            await this.itemInformationService.destroy(itemInformation.id);\n        }\n\n        // payment-information\n        let paymentInformation = updatedListingItemTemplate.related('PaymentInformation').toJSON() || {};\n\n        if (!_.isEmpty(body.paymentInformation)) {\n            if (!_.isEmpty(paymentInformation)) {\n                const paymentInformationId = paymentInformation.id;\n                paymentInformation = body.paymentInformation;\n                paymentInformation.listing_item_template_id = id;\n                await this.paymentInformationService.update(paymentInformationId, paymentInformation as PaymentInformationUpdateRequest);\n            } else {\n                paymentInformation = body.paymentInformation;\n                paymentInformation.listing_item_template_id = id;\n                await this.paymentInformationService.create(paymentInformation as PaymentInformationCreateRequest);\n            }\n        } else if (!_.isEmpty(paymentInformation)) {\n            await this.paymentInformationService.destroy(paymentInformation.id);\n        }\n\n        // find related record and delete it and recreate related data\n        const existintMessagingInformation = updatedListingItemTemplate.related('MessagingInformation').toJSON() || [];\n\n        const newMessagingInformation = body.messagingInformation || [];\n\n        // delete MessagingInformation if not exist with new params\n        for (const msgInfo of existintMessagingInformation) {\n            if (!await this.checkExistingObject(newMessagingInformation, 'id', msgInfo.id)) {\n                await this.messagingInformationService.destroy(msgInfo.id);\n            }\n        }\n\n        // update or create messaging itemInformation\n        for (const msgInfo of newMessagingInformation) {\n            msgInfo.listing_item_template_id = id;\n            const message = await this.checkExistingObject(existintMessagingInformation, 'id', msgInfo.id);\n            delete msgInfo.id;\n            if (message) {\n                message.protocol = msgInfo.protocol;\n                message.publicKey = msgInfo.publicKey;\n                await this.messagingInformationService.update(message.id, msgInfo as MessagingInformationUpdateRequest);\n            } else {\n                await this.messagingInformationService.create(msgInfo as MessagingInformationCreateRequest);\n            }\n        }\n\n        const newListingItemObjects = body.listingItemObjects || [];\n        // find related listingItemObjects\n        const existingListingItemObjects = updatedListingItemTemplate.related('ListingItemObjects').toJSON() || [];\n\n        // find highestOrderNumber\n        const highestOrderNumber = await this.findHighestOrderNumber(newListingItemObjects);\n\n        const objectsToBeUpdated = [] as any;\n        for (const object of existingListingItemObjects) {\n            // check if order number is greter than highestOrderNumber then delete\n            if (object.order > highestOrderNumber) {\n                await this.listingItemObjectService.destroy(object.id);\n            } else {\n                objectsToBeUpdated.push(object);\n            }\n        }\n\n        // create or update listingItemObjects\n        for (const object of newListingItemObjects) {\n            object.listing_item_template_id = id;\n            const itemObject = await this.checkExistingObject(objectsToBeUpdated, 'order', object.order);\n\n            if (itemObject) {\n                await this.listingItemObjectService.update(itemObject.id, object as ListingItemObjectUpdateRequest);\n            } else {\n                await this.listingItemObjectService.create(object as ListingItemObjectCreateRequest);\n            }\n        }\n\n        // finally find and return the updated listingItem\n        return await this.findOne(id);\n    }\n\n    public async destroy(id: number): Promise<void> {\n        const listingItemTemplateModel = await this.findOne(id);\n        if (!listingItemTemplateModel) {\n            throw new NotFoundException('ListingItemTemplate does not exist. id = ' + id);\n        }\n        const listingItemTemplate = listingItemTemplateModel.toJSON();\n        this.log.debug('delete listingItemTemplate:', listingItemTemplate.id);\n\n        if (_.isEmpty(listingItemTemplate.ListingItems)) {\n            await this.listingItemTemplateRepo.destroy(id);\n        } else {\n            throw new MessageException('ListingItemTemplate has ListingItems.');\n        }\n    }\n\n    // check if object is exist in a array\n    private async checkExistingObject(objectArray: string[], fieldName: string, value: string | number): Promise<any> {\n        return await _.find(objectArray, (object) => {\n            return (object[fieldName] === value);\n        });\n    }\n\n    // find highest order number from listingItemObjects\n    private async findHighestOrderNumber(listingItemObjects: string[]): Promise<any> {\n        const highestOrder = await _.maxBy(listingItemObjects, (itemObject) => {\n            return itemObject['order'];\n        });\n        return highestOrder ? highestOrder['order'] : 0;\n    }\n}\n"]}