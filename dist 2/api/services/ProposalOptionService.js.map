{"version":3,"file":"ProposalOptionService.js","sourceRoot":"","sources":["../../../src/api/services/ProposalOptionService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ProposalOptionRepository } from '../repositories/ProposalOptionRepository';\nimport { ProposalOption } from '../models/ProposalOption';\nimport { ProposalOptionCreateRequest } from '../requests/ProposalOptionCreateRequest';\nimport { ProposalOptionUpdateRequest } from '../requests/ProposalOptionUpdateRequest';\nimport { ObjectHash } from '../../core/helpers/ObjectHash';\nimport { HashableObjectType } from '../enums/HashableObjectType';\nimport { NotImplementedException } from '../exceptions/NotImplementedException';\n\n\nexport class ProposalOptionService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.ProposalOptionRepository) public proposalOptionRepo: ProposalOptionRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ProposalOption>> {\n        return this.proposalOptionRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ProposalOption> {\n        const proposalOption = await this.proposalOptionRepo.findOne(id, withRelated);\n        if (proposalOption === null) {\n            this.log.warn(`ProposalOption with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return proposalOption;\n    }\n\n    public async findOneByProposalAndOptionId(proposalId: number, optionId: number, withRelated: boolean = true): Promise<ProposalOption> {\n        const proposalOption = await this.proposalOptionRepo.findOneByProposalAndOptionId(proposalId, optionId, withRelated);\n        if (proposalOption === null) {\n            this.log.warn(`ProposalOption with the proposalId=${proposalId} and optionId=${optionId} was not found!`);\n            throw new NotFoundException(proposalId);\n        }\n        return proposalOption;\n    }\n\n    @validate()\n    public async create( @request(ProposalOptionCreateRequest) data: ProposalOptionCreateRequest): Promise<ProposalOption> {\n        const startTime = new Date().getTime();\n\n        const body = JSON.parse(JSON.stringify(data));\n        // this.log.debug('create ProposalOption, body: ', JSON.stringify(body, null, 2));\n\n        body.hash = ObjectHash.getHash(body, HashableObjectType.PROPOSALOPTION_CREATEREQUEST);\n\n        delete body.proposalHash;\n\n        // If the request body was valid we will create the proposalOption\n        const proposalOption = await this.proposalOptionRepo.create(body);\n\n        // finally find and return the created proposal\n        const result = await this.findOne(proposalOption.id, true);\n\n        // this.log.debug('ProposalOption.create, result:', JSON.stringify(result, null, 2));\n\n        this.log.debug('ProposalOptionService.create: ' + (new Date().getTime() - startTime) + 'ms');\n        return result;\n    }\n\n    @validate()\n    public async update(id: number, @request(ProposalOptionUpdateRequest) body: ProposalOptionUpdateRequest): Promise<ProposalOption> {\n        // update not needed\n        throw new NotImplementedException();\n\n/*\n        // find the existing one without related\n        const proposalOption = await this.findOne(id, false);\n\n        // set new values\n        proposalOption.OptionId = body.optionId;\n        proposalOption.Description = body.description;\n        proposalOption.Hash = body.hash;\n\n        // update proposalOption record\n        const updatedProposalOption = await this.proposalOptionRepo.update(id, proposalOption.toJSON());\n\n        // TODO: update the Proposal.hash\n        // const newProposalOption = await this.findOne(id);\n        // return newProposalOption;\n\n        return updatedProposalOption;\n*/\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.proposalOptionRepo.destroy(id);\n    }\n\n}\n"]}