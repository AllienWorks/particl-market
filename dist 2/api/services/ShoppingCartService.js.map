{"version":3,"file":"ShoppingCartService.js","sourceRoot":"","sources":["../../../src/api/services/ShoppingCartService.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAE1C,+CAAuD;AACvD,sDAA4D;AAC5D,uEAAoE;AACpE,mFAAgF;AAEhF,qFAAkF;AAClF,qFAAkF;AAGlF,IAAa,mBAAmB,GAAhC;IAII,YACuF,gBAAwC,EAC5E,MAAyB;QADW,qBAAgB,GAAhB,gBAAgB,CAAwB;QAC5E,WAAM,GAAN,MAAM,CAAmB;QAExE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAEY,OAAO;;YAChB,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;QAC3C,CAAC;KAAA;IAEY,kBAAkB,CAAC,SAAiB;;YAC7C,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;QAC/D,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU,EAAE,cAAuB,IAAI;;YACxD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YAC1E,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,4BAA4B,EAAE,iBAAiB,CAAC,CAAC;gBAC/D,MAAM,IAAI,qCAAiB,CAAC,EAAE,CAAC,CAAC;YACpC,CAAC;YACD,MAAM,CAAC,YAAY,CAAC;QACxB,CAAC;KAAA;IAGY,MAAM,CAAsC,IAAS;;YAE9D,gEAAgE;YAChE,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAE9D,mDAAmD;YACnD,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAC5D,MAAM,CAAC,eAAe,CAAC;QAC3B,CAAC;KAAA;IAGY,MAAM,CAAC,EAAU,EAAsC,IAAS;;YAEzE,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YACnD,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YAE9B,MAAM,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,EAAE,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;QACzE,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU;;YAC3B,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC5C,CAAC;KAAA;CAEJ,CAAA;AAvBG;IADC,mBAAQ,EAAE;IACW,mBAAA,kBAAO,CAAC,qDAAyB,CAAC,CAAA;;;;iDAQvD;AAGD;IADC,mBAAQ,EAAE;IACsB,mBAAA,kBAAO,CAAC,qDAAyB,CAAC,CAAA;;;;iDAMlE;AA9CQ,mBAAmB;IAKvB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,UAAU,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAA;IAC1E,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CAD8D,+CAAsB;GALtH,mBAAmB,CAoD/B;AApDY,kDAAmB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ShoppingCartRepository } from '../repositories/ShoppingCartRepository';\nimport { ShoppingCart } from '../models/ShoppingCart';\nimport { ShoppingCartCreateRequest } from '../requests/ShoppingCartCreateRequest';\nimport { ShoppingCartUpdateRequest } from '../requests/ShoppingCartUpdateRequest';\n\n\nexport class ShoppingCartService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.ShoppingCartRepository) public shoppingCartRepo: ShoppingCartRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ShoppingCart>> {\n        return this.shoppingCartRepo.findAll();\n    }\n\n    public async findAllByProfileId(profileId: number): Promise<Bookshelf.Collection<ShoppingCart>> {\n        return this.shoppingCartRepo.findAllByProfileId(profileId);\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ShoppingCart> {\n        const shoppingCart = await this.shoppingCartRepo.findOne(id, withRelated);\n        if (shoppingCart === null) {\n            this.log.warn(`ShoppingCart with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return shoppingCart;\n    }\n\n    @validate()\n    public async create( @request(ShoppingCartCreateRequest) body: any): Promise<ShoppingCart> {\n\n        // If the request body was valid we will create the shoppingCart\n        const shoppingCart = await this.shoppingCartRepo.create(body);\n\n        // finally find and return the created shoppingCart\n        const newShoppingCart = await this.findOne(shoppingCart.id);\n        return newShoppingCart;\n    }\n\n    @validate()\n    public async update(id: number, @request(ShoppingCartUpdateRequest) body: any): Promise<ShoppingCart> {\n\n        const shoppingCart = await this.findOne(id, false);\n        shoppingCart.Name = body.name;\n\n        return await this.shoppingCartRepo.update(id, shoppingCart.toJSON());\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.shoppingCartRepo.destroy(id);\n    }\n\n}\n"]}