{"version":3,"file":"MarketService.js","sourceRoot":"","sources":["../../../src/api/services/MarketService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { MarketRepository } from '../repositories/MarketRepository';\nimport { Market } from '../models/Market';\nimport { MarketCreateRequest } from '../requests/MarketCreateRequest';\nimport { MarketUpdateRequest } from '../requests/MarketUpdateRequest';\n\n\nexport class MarketService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.MarketRepository) public marketRepo: MarketRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async getDefault(withRelated: boolean = true): Promise<Market> {\n        const market = await this.marketRepo.getDefault(withRelated);\n        if (market === null) {\n            this.log.warn(`Default Market was not found!`);\n            throw new NotFoundException(process.env.DEFAULT_MARKETPLACE_NAME);\n        }\n        return market;\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<Market>> {\n        return this.marketRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Market> {\n        const market = await this.marketRepo.findOne(id, withRelated);\n        if (market === null) {\n            this.log.warn(`Market with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return market;\n    }\n\n    public async findByAddress(address: string, withRelated: boolean = true): Promise<Market> {\n        return await this.marketRepo.findOneByAddress(address, withRelated);\n    }\n\n    @validate()\n    public async create( @request(MarketCreateRequest) body: MarketCreateRequest): Promise<Market> {\n\n        // If the request body was valid we will create the market\n        const market = await this.marketRepo.create(body);\n\n        // finally find and return the created market\n        const newMarket = await this.findOne(market.Id);\n        return newMarket;\n    }\n\n    @validate()\n    public async update(id: number, @request(MarketUpdateRequest) body: MarketUpdateRequest): Promise<Market> {\n\n        // find the existing one without related\n        const market = await this.findOne(id, false);\n\n        // set new values\n        market.Name = body.name;\n        market.PrivateKey = body.private_key;\n        market.Address = body.address;\n        // update market record\n        const updatedMarket = await this.marketRepo.update(id, market.toJSON());\n\n        // return newMarket;\n        return updatedMarket;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.marketRepo.destroy(id);\n    }\n\n}\n"]}