{"version":3,"file":"ProposalActionService.js","sourceRoot":"","sources":["../../../src/api/services/ProposalActionService.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,4BAA4B;AAC5B,yCAAyC;AAEzC,+CAA+D;AAI/D,+CAA4C;AAE5C,mCAAsC;AAGtC,sEAAmE;AACnE,kEAA+D;AAC/D,uDAAoD;AACpD,mEAAgE;AAChE,+EAA4E;AAC5E,qDAAkD;AAClD,qEAAkE;AAElE,wDAAqD;AAErD,6DAA0D;AAC1D,0DAAuD;AACvD,kEAA+D;AAC/D,6DAA0D;AAC1D,+CAA4C;AAG5C,gDAA6C;AAC7C,6DAA0D;AAI1D,IAAa,qBAAqB,GAAlC;IAII,YAAmF,eAAgC,EAClC,cAA8B,EACjC,WAAwB,EACjB,kBAAsC,EACzC,eAAgC,EAC1B,qBAA4C,EACtC,2BAAwD,EAChE,kBAAsC,EAC7C,WAAwB,EACxB,WAAwB,EACjB,kBAAsC,EACjE,YAA0B,EAC1B,MAAyB;QAZD,oBAAe,GAAf,eAAe,CAAiB;QAClC,mBAAc,GAAd,cAAc,CAAgB;QACjC,gBAAW,GAAX,WAAW,CAAa;QACjB,uBAAkB,GAAlB,kBAAkB,CAAoB;QACzC,oBAAe,GAAf,eAAe,CAAiB;QAC1B,0BAAqB,GAArB,qBAAqB,CAAuB;QACtC,gCAA2B,GAA3B,2BAA2B,CAA6B;QAChE,uBAAkB,GAAlB,kBAAkB,CAAoB;QAC7C,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAa;QACjB,uBAAkB,GAAlB,kBAAkB,CAAoB;QACjE,iBAAY,GAAZ,YAAY,CAAc;QAC1B,WAAM,GAAN,MAAM,CAAmB;QAChF,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;QAClC,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACnC,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACU,IAAI,CAAC,aAAqB,EAAE,mBAA2B,EAClD,UAAkB,EAAE,QAAgB,EAAE,aAAqB,EAAE,OAAiB,EAC9E,aAAgC,EAAE,WAA6B,EAAE,WAA0B,IAAI,EAC/F,cAAuB,KAAK;;YAE1C,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,CACzD,yCAAmB,CAAC,eAAe,EACnC,aAAa,EACb,mBAAmB,EACnB,UAAU,EACV,QAAQ,EACR,OAAO,EACP,aAAa,EACb,QAAQ,CACX,CAAC;YAEF,MAAM,GAAG,GAAuB;gBAC5B,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,mBAAmB;gBACxC,QAAQ,EAAE,eAAe;aAC5B,CAAC;YAEF,MAAM,WAAW,GAAG,eAAe,CAAC,IAAI,KAAK,2BAAY,CAAC,WAAW,CAAC;YACtE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,EAAE,WAAW,CAAC,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,aAAa,EAAE,WAAW,CAAC,CAAC;QAC/H,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;OAiBG;IACU,4BAA4B,CAAC,KAAuB;;YAE7D,MAAM,WAAW,GAA0B,KAAK,CAAC,WAAW,CAAC;YAC7D,MAAM,kBAAkB,GAAuB,KAAK,CAAC,kBAAkB,CAAC;YACxE,MAAM,eAAe,GAAoB,kBAAkB,CAAC,QAA2B,CAAC;YAExF,MAAM,qBAAqB,GAA0B,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;YAEvH,IAAI,QAA4B,CAAC;YACjC,IAAI,IAAoB,CAAC;YAEzB,EAAE,CAAC,CAAC,qBAAqB,CAAC,IAAI,KAAK,2BAAY,CAAC,SAAS,CAAC,CAAC,CAAC;gBAExD,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,IAAI,CAAC;qBAC9E,IAAI,CAAC,CAAM,qBAAqB;oBAC7B,kBAAkB;oBAClB,MAAM,gBAAgB,GAAuB,qBAAqB,CAAC,MAAM,EAAE,CAAC;oBAC5E,EAAE,CAAC,CAAC,qBAAqB,CAAC,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAC7D,gFAAgF;wBAChF,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE,EAAE,qBAAqB,CAAC,CAAC;wBAC3G,MAAM,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC;oBACzC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,gBAAgB,CAAC;oBAC5B,CAAC;gBACL,CAAC,CAAA,CAAC;qBACD,KAAK,CAAC,CAAM,MAAM;oBACf,2CAA2C;oBAC3C,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;oBACtF,MAAM,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC;gBACzC,CAAC,CAAA,CAAC,CAAC;gBAEP,kEAAkE;gBAElE,sEAAsE;gBACtE,IAAI,cAAc,GAA6B,MAAM,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;gBACzG,IAAI,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,mBAAQ,CAAC,MAAM,CAAC,CAAC;gBACxD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;gBACtE,cAAc,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;gBAEhF,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;gBACvD,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAEzE,CAAC;YAAC,IAAI,CAAC,CAAC;gBAEJ,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;gBACtF,QAAQ,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC;gBAEzC,iCAAiC;gBACjC,MAAM,cAAc,GAA6B,MAAM,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;YAC/G,CAAC;YAGD,yEAAyE;YACzE,8EAA8E;YAE9E,MAAM,CAAC,qCAAiB,CAAC,SAAS,CAAC;QACvC,CAAC;KAAA;IAED;;;;OAIG;IACU,4BAA4B,CAAC,QAA4B;;YAClE,6EAA6E;YAE7E,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrF,MAAM,WAAW,GAA0B,gBAAgB,CAAC,MAAM,EAAE,CAAC;YAErE,MAAM,wBAAwB,GAAG;gBAC7B,eAAe,EAAE,WAAW,CAAC,EAAE;gBAC/B,WAAW,EAAE,QAAQ,CAAC,EAAE;gBACxB,MAAM,EAAE,QAAQ,CAAC,WAAW;aACH,CAAC;YAE9B,MAAM,gBAAgB,GAAgB,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC;YACrG,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;QACrC,CAAC;KAAA;IAED;;;;;OAKG;IACW,UAAU,CAAC,eAAmC,EAAE,QAAkB;;YAE5E,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;YAC/D,MAAM,cAAc,GAAG,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC,MAAgC;gBAC5F,MAAM,CAAC,MAAM,CAAC,WAAW,KAAK,QAAQ,CAAC;YAC3C,CAAC,CAAC,CAAC;YAEH,8EAA8E;YAE9E,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;gBACrE,MAAM,IAAI,mCAAgB,CAAC,qDAAqD,CAAC,CAAC;YACtF,CAAC;YAED,wBAAwB;YACxB,gCAAgC;YAChC,MAAM,WAAW,GAAsB;gBACnC,kBAAkB,EAAE,cAAc,CAAC,EAAE;gBACrC,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,KAAK,EAAE,YAAY;gBACnB,MAAM,EAAE,CAAC;aACS,CAAC;YAEvB,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YACpE,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;QACrC,CAAC;KAAA;IAEO,uBAAuB;QAC3B,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;QAE7C,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,kBAAM,CAAC,qBAAqB,EAAE,CAAO,KAAK;YAC3D,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAClE,MAAM,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC;iBACzC,IAAI,CAAC,CAAM,MAAM;gBACd,MAAM,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YACrF,CAAC,CAAA,CAAC;iBACD,KAAK,CAAC,CAAM,MAAM;gBACf,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;gBAC7C,MAAM,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,KAAK,CAAC,WAAW,EAAE,qCAAiB,CAAC,cAAc,CAAC,CAAC;YAC/G,CAAC,CAAA,CAAC,CAAC;QACX,CAAC,CAAA,CAAC,CAAC;IACP,CAAC;CAEJ,CAAA;AAhNY,qBAAqB;IAIjB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAA;IAC7D,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;IAC5D,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;IACzD,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;IAChE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAA;IAC7D,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAA;IACnE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAA;IACzE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;IAChE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;IACzD,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;IACzD,oBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,oBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;IAChE,oBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,oBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,oBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,oBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CAZiD,iCAAe;QAClB,+BAAc;QACpB,yBAAW;QACG,uCAAkB;QACxB,iCAAe;QACH,6CAAqB;QACT,yDAA2B;QAC5C,uCAAkB;QAChC,yBAAW;QACX,yBAAW;QACG,uCAAkB;QACnD,qBAAY;GAf5E,qBAAqB,CAgNjC;AAhNY,sDAAqB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport { inject, named} from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets, Events } from '../../constants';\nimport { ProposalCreateRequest } from '../requests/ProposalCreateRequest';\nimport { ProposalResultCreateRequest } from '../requests/ProposalResultCreateRequest';\nimport { ProposalOptionResultCreateRequest } from '../requests/ProposalOptionResultCreateRequest';\nimport { SmsgService } from './SmsgService';\nimport { MarketplaceMessage } from '../messages/MarketplaceMessage';\nimport { EventEmitter } from 'events';\nimport * as resources from 'resources';\nimport { MarketplaceEvent } from '../messages/MarketplaceEvent';\nimport { ProposalMessageType } from '../enums/ProposalMessageType';\nimport { ProposalFactory } from '../factories/ProposalFactory';\nimport { ProposalService } from './ProposalService';\nimport { ProposalResultService } from './ProposalResultService';\nimport { ProposalOptionResultService } from './ProposalOptionResultService';\nimport { CoreRpcService } from './CoreRpcService';\nimport { MessageException } from '../exceptions/MessageException';\nimport { SmsgSendResponse } from '../responses/SmsgSendResponse';\nimport { ProposalType } from '../enums/ProposalType';\nimport { ProposalMessage } from '../messages/ProposalMessage';\nimport { ListingItemService } from './ListingItemService';\nimport { VoteFactory } from '../factories/VoteFactory';\nimport { SmsgMessageStatus } from '../enums/SmsgMessageStatus';\nimport { SmsgMessageService } from './SmsgMessageService';\nimport { VoteService } from './VoteService';\nimport { VoteCreateRequest } from '../requests/VoteCreateRequest';\nimport { ProposalResult } from '../models/ProposalResult';\nimport { ItemVote } from '../enums/ItemVote';\nimport { FlaggedItemService } from './FlaggedItemService';\nimport { FlaggedItemCreateRequest } from '../requests/FlaggedItemCreateRequest';\nimport { FlaggedItem } from '../models/FlaggedItem';\n\nexport class ProposalActionService {\n\n    public log: LoggerType;\n\n    constructor(@inject(Types.Factory) @named(Targets.Factory.ProposalFactory) private proposalFactory: ProposalFactory,\n                @inject(Types.Service) @named(Targets.Service.CoreRpcService) public coreRpcService: CoreRpcService,\n                @inject(Types.Service) @named(Targets.Service.SmsgService) public smsgService: SmsgService,\n                @inject(Types.Service) @named(Targets.Service.ListingItemService) public listingItemService: ListingItemService,\n                @inject(Types.Service) @named(Targets.Service.ProposalService) public proposalService: ProposalService,\n                @inject(Types.Service) @named(Targets.Service.ProposalResultService) public proposalResultService: ProposalResultService,\n                @inject(Types.Service) @named(Targets.Service.ProposalOptionResultService) public proposalOptionResultService: ProposalOptionResultService,\n                @inject(Types.Service) @named(Targets.Service.SmsgMessageService) private smsgMessageService: SmsgMessageService,\n                @inject(Types.Factory) @named(Targets.Factory.VoteFactory) private voteFactory: VoteFactory,\n                @inject(Types.Service) @named(Targets.Service.VoteService) private voteService: VoteService,\n                @inject(Types.Service) @named(Targets.Service.FlaggedItemService) private flaggedItemService: FlaggedItemService,\n                @inject(Types.Core) @named(Core.Events) public eventEmitter: EventEmitter,\n                @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType) {\n        this.log = new Logger(__filename);\n        this.configureEventListeners();\n    }\n\n    /**\n     * create ProposalMessage (of type MP_PROPOSAL_ADD) and post it\n     *\n     * @param {ProposalType} proposalType\n     * @param {string} proposalTitle\n     * @param {string} proposalDescription\n     * @param {number} blockStart\n     * @param {number} blockEnd\n     * @param {number} daysRetention\n     * @param {string[]} options\n     * @param {\"resources\".Profile} senderProfile\n     * @param {\"resources\".Market} marketplace\n     * @param {string} itemHash\n     * @param {boolean} estimateFee\n     * @returns {Promise<SmsgSendResponse>}\n     */\n    public async send(proposalTitle: string, proposalDescription: string,\n                      blockStart: number, blockEnd: number, daysRetention: number, options: string[],\n                      senderProfile: resources.Profile, marketplace: resources.Market, itemHash: string | null = null,\n                      estimateFee: boolean = false): Promise<SmsgSendResponse> {\n\n        const proposalMessage = await this.proposalFactory.getMessage(\n            ProposalMessageType.MP_PROPOSAL_ADD,\n            proposalTitle,\n            proposalDescription,\n            blockStart,\n            blockEnd,\n            options,\n            senderProfile,\n            itemHash\n        );\n\n        const msg: MarketplaceMessage = {\n            version: process.env.MARKETPLACE_VERSION,\n            mpaction: proposalMessage\n        };\n\n        const paidMessage = proposalMessage.type === ProposalType.PUBLIC_VOTE;\n        return this.smsgService.smsgSend(senderProfile.address, marketplace.address, msg, paidMessage, daysRetention, estimateFee);\n    }\n\n    /**\n     * process received ProposalMessage:\n     *\n     *  if item_vote\n     *      if proposal exists\n     *          update to use the one that was sent first\n     *      else\n     *          create Proposal\n     *      add vote\n     *      if listingitem exists && no relation\n     *          add relation to listingitem\n     *  else (ProposalType.PUBLIC_VOTE)\n     *      create Proposal\n     *  create ProposalResult\n     *\n     * @param {MarketplaceEvent} event\n     * @returns {Promise<module:resources.Bid>}\n     */\n    public async processProposalReceivedEvent(event: MarketplaceEvent): Promise<SmsgMessageStatus> {\n\n        const smsgMessage: resources.SmsgMessage = event.smsgMessage;\n        const marketplaceMessage: MarketplaceMessage = event.marketplaceMessage;\n        const proposalMessage: ProposalMessage = marketplaceMessage.mpaction as ProposalMessage;\n\n        const proposalCreateRequest: ProposalCreateRequest = await this.proposalFactory.getModel(proposalMessage, smsgMessage);\n\n        let proposal: resources.Proposal;\n        let vote: resources.Vote;\n\n        if (proposalCreateRequest.type === ProposalType.ITEM_VOTE) {\n\n            proposal = await this.proposalService.findOneByItemHash(proposalCreateRequest.item)\n                .then(async existingProposalModel => {\n                    // proposal exists\n                    const existingProposal: resources.Proposal = existingProposalModel.toJSON();\n                    if (proposalCreateRequest.postedAt < existingProposal.postedAt) { // update to use the one that was sent first\n                        // incoming was posted before the existing -> update existing with incoming data\n                        const updatedProposalModel = await this.proposalService.update(existingProposal.id, proposalCreateRequest);\n                        return updatedProposalModel.toJSON();\n                    } else {\n                        return existingProposal;\n                    }\n                })\n                .catch(async reason => {\n                    // proposal doesnt exist -> create Proposal\n                    const createdProposalModel = await this.proposalService.create(proposalCreateRequest);\n                    return createdProposalModel.toJSON();\n                });\n\n            // this.log.debug('proposal:', JSON.stringify(proposal, null, 2));\n\n            // finally, create ProposalResult, vote and recalculate proposalresult\n            let proposalResult: resources.ProposalResult = await this.proposalService.createProposalResult(proposal);\n            vote = await this.createVote(proposal, ItemVote.REMOVE);\n            const flaggedItem = await this.createFlaggedItemForProposal(proposal);\n            proposalResult = await this.proposalService.recalculateProposalResult(proposal);\n\n            this.log.debug('vote:', JSON.stringify(vote, null, 2));\n            this.log.debug('flaggedItem:', JSON.stringify(flaggedItem, null, 2));\n\n        } else { // else (ProposalType.PUBLIC_VOTE)\n\n            const createdProposalModel = await this.proposalService.create(proposalCreateRequest);\n            proposal = createdProposalModel.toJSON();\n\n            // finally, create ProposalResult\n            const proposalResult: resources.ProposalResult = await this.proposalService.createProposalResult(proposal);\n        }\n\n\n        // this.log.debug('createdProposal:', JSON.stringify(proposal, null, 2));\n        // this.log.debug('proposalResult:', JSON.stringify(proposalResult, null, 2));\n\n        return SmsgMessageStatus.PROCESSED;\n    }\n\n    /**\n     *\n     * @param {module:resources.Proposal} proposal\n     * @returns {Promise<module:resources.FlaggedItem>}\n     */\n    public async createFlaggedItemForProposal(proposal: resources.Proposal): Promise<resources.FlaggedItem> {\n        // if listingitem exists && theres no relation -> add relation to listingitem\n\n        const listingItemModel = await this.listingItemService.findOneByHash(proposal.title);\n        const listingItem: resources.ListingItem = listingItemModel.toJSON();\n\n        const flaggedItemCreateRequest = {\n            listing_item_id: listingItem.id,\n            proposal_id: proposal.id,\n            reason: proposal.description\n        } as FlaggedItemCreateRequest;\n\n        const flaggedItemModel: FlaggedItem = await this.flaggedItemService.create(flaggedItemCreateRequest);\n        return flaggedItemModel.toJSON();\n    }\n\n    /**\n     *\n     * @param {module:resources.Proposal} createdProposal\n     * @param {ItemVote} itemVote\n     * @returns {Promise<module:resources.Vote>}\n     */\n    private async createVote(createdProposal: resources.Proposal, itemVote: ItemVote): Promise<resources.Vote> {\n\n        const currentBlock = await this.coreRpcService.getBlockCount();\n        const proposalOption = _.find(createdProposal.ProposalOptions, (option: resources.ProposalOption) => {\n            return option.description === itemVote;\n        });\n\n        // this.log.debug('proposalOption:', JSON.stringify(proposalOption, null, 2));\n\n        if (!proposalOption) {\n            this.log.warn('ItemVote received that doesn\\'t have REMOVE option.');\n            throw new MessageException('ItemVote received that doesn\\'t have REMOVE option.');\n        }\n\n        // TODO: use VoteFactory\n        // TODO: replace block with time\n        const voteRequest: VoteCreateRequest = {\n            proposal_option_id: proposalOption.id,\n            voter: createdProposal.submitter,\n            block: currentBlock,\n            weight: 1\n        } as VoteCreateRequest;\n\n        const createdVoteModel = await this.voteService.create(voteRequest);\n        return createdVoteModel.toJSON();\n    }\n\n    private configureEventListeners(): void {\n        this.log.info('Configuring EventListeners ');\n\n        this.eventEmitter.on(Events.ProposalReceivedEvent, async (event) => {\n            this.log.debug('Received event:', JSON.stringify(event, null, 2));\n            await this.processProposalReceivedEvent(event)\n                .then(async status => {\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, status);\n                })\n                .catch(async reason => {\n                    this.log.error('PROCESSING ERROR: ', reason);\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, SmsgMessageStatus.PARSING_FAILED);\n                });\n        });\n    }\n\n}\n"]}