{"version":3,"file":"DefaultProfileService.js","sourceRoot":"","sources":["../../../src/api/services/DefaultProfileService.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAE1C,+CAAuD;AAEvD,qDAAkD;AAClD,qDAAkD;AAIlD,IAAa,qBAAqB,GAAlC;IAII,YACyE,cAA8B,EAC9B,cAA8B,EACpD,MAAyB;QAFH,mBAAc,GAAd,cAAc,CAAgB;QAC9B,mBAAc,GAAd,cAAc,CAAgB;QACpD,WAAM,GAAN,MAAM,CAAmB;QAExE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED,2GAA2G;IAC9F,kBAAkB;;YAC3B,MAAM,cAAc,GAAG;gBACnB,IAAI,EAAE,SAAS;aACM,CAAC;YAE1B,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;YAEpE,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,mBAAmB,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAClF,MAAM,CAAC;QACX,CAAC;KAAA;IAEY,qBAAqB,CAAC,OAA6B;;YAE5D,oDAAoD;YACpD,MAAM,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC;iBACvD,IAAI,CAAC,CAAM,KAAK;gBACb,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;gBAClC,kBAAkB;gBAClB,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,KAAK,kBAAkB,CAAC,CAAC,CAAC;oBAC5C,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAC3C,UAAU,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;oBAC/D,MAAM,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;gBACpE,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;YACL,CAAC,CAAA,CAAC;iBACD,KAAK,CAAC,CAAM,MAAM;gBACf,oBAAoB;gBACpB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;gBAC/C,MAAM,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACrD,CAAC,CAAA,CAAC,CAAC;QACX,CAAC;KAAA;CACJ,CAAA;AA7CY,qBAAqB;IAKzB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;IAC5D,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;IAC5D,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CAF8C,+BAAc;QACd,+BAAc;GAN9F,qBAAqB,CA6CjC;AA7CY,sDAAqB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { Profile } from '../models/Profile';\nimport { ProfileService } from './ProfileService';\nimport { CoreRpcService } from './CoreRpcService';\nimport { ProfileCreateRequest } from '../requests/ProfileCreateRequest';\nimport {MessageException} from '../exceptions/MessageException';\n\nexport class DefaultProfileService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ProfileService) public profileService: ProfileService,\n        @inject(Types.Service) @named(Targets.Service.CoreRpcService) public coreRpcService: CoreRpcService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    // TODO: if something goes wrong here and default profile does not get created, the application should stop\n    public async seedDefaultProfile(): Promise<void> {\n        const defaultProfile = {\n            name: 'DEFAULT'\n        } as ProfileCreateRequest;\n\n        const newProfile = await this.insertOrUpdateProfile(defaultProfile);\n\n        this.log.debug('default Profile: ', JSON.stringify(newProfile.toJSON(), null, 2));\n        return;\n    }\n\n    public async insertOrUpdateProfile(profile: ProfileCreateRequest): Promise<Profile> {\n\n        // check if profile already exist for the given name\n        return await this.profileService.findOneByName(profile.name)\n            .then(async value => {\n                const newProfile = value.toJSON();\n                // it does, update\n                if (newProfile.address === 'ERROR_NO_ADDRESS') {\n                    this.log.debug('updating default profile');\n                    newProfile.address = await this.profileService.getNewAddress();\n                    return await this.profileService.update(newProfile.id, profile);\n                } else {\n                    return value;\n                }\n            })\n            .catch(async reason => {\n                // it doesnt, create\n                this.log.debug('creating new default profile');\n                return await this.profileService.create(profile);\n            });\n    }\n}\n"]}