{"version":3,"file":"OrderService.js","sourceRoot":"","sources":["../../../src/api/services/OrderService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { OrderRepository } from '../repositories/OrderRepository';\nimport { Order } from '../models/Order';\nimport { OrderCreateRequest } from '../requests/OrderCreateRequest';\nimport { OrderUpdateRequest } from '../requests/OrderUpdateRequest';\nimport { OrderSearchParams } from '../requests/OrderSearchParams';\nimport { HashableObjectType } from '../enums/HashableObjectType';\nimport { ObjectHash } from '../../core/helpers/ObjectHash';\nimport { MessageException } from '../exceptions/MessageException';\nimport { OrderItemService } from './OrderItemService';\nimport { AddressService } from './AddressService';\nimport { ListingItemService } from './ListingItemService';\nimport {AddressType} from '../enums/AddressType';\nimport {ProfileService} from './ProfileService';\nimport * as resources from 'resources';\n\n\nexport class OrderService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.AddressService) public addressService: AddressService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) public listingItemService: ListingItemService,\n        @inject(Types.Service) @named(Targets.Service.OrderItemService) public orderItemService: OrderItemService,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) public profileService: ProfileService,\n        @inject(Types.Repository) @named(Targets.Repository.OrderRepository) public orderRepo: OrderRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<Order>> {\n        return this.orderRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Order> {\n        const order = await this.orderRepo.findOne(id, withRelated);\n        if (order === null) {\n            this.log.warn(`Order with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return order;\n    }\n\n    /**\n     * search Order using given OrderSearchParams\n     *\n     * @param options\n     * @returns {Promise<Bookshelf.Collection<Bid>>}\n     */\n    @validate()\n    public async search(@request(OrderSearchParams) options: OrderSearchParams, withRelated: boolean = true): Promise<Bookshelf.Collection<Order>> {\n\n        // if item hash was given, set the item id\n        if (options.listingItemHash) {\n            const foundListing = await this.listingItemService.findOneByHash(options.listingItemHash, false);\n            options.listingItemId = foundListing.Id;\n        }\n        return await this.orderRepo.search(options, withRelated);\n    }\n\n    @validate()\n    public async create( @request(OrderCreateRequest) data: OrderCreateRequest): Promise<Order> {\n        const startTime = new Date().getTime();\n\n        const body = JSON.parse(JSON.stringify(data));\n        // this.log.debug('OrderCreateRequest: ', JSON.stringify(body, null, 2));\n\n        // you need at least one order item to create an order\n        body.hash = ObjectHash.getHash(body, HashableObjectType.ORDER_CREATEREQUEST);\n\n        const orderItemCreateRequests = body.orderItems || [];\n        delete body.orderItems;\n        const addressCreateRequest = body.address;\n        delete body.address;\n\n        // shipping address\n        if (_.isEmpty(addressCreateRequest)) {\n            this.log.error('Request body is not valid, address missing');\n            throw new MessageException('Order does not contain ShippingAddress');\n        }\n\n        // make sure the Orders shipping address has the correct type\n        addressCreateRequest.type = AddressType.SHIPPING_ORDER;\n\n        // this.log.debug('OrderCreateRequest body:', JSON.stringify(body, null, 2));\n        // this.log.debug('addressCreateRequest for ORDER: ', JSON.stringify(addressCreateRequest, null, 2));\n\n        // save shipping address\n        const addressModel = await this.addressService.create(addressCreateRequest);\n        const address = addressModel.toJSON();\n\n        // this.log.debug('created address: ', JSON.stringify(address, null, 2));\n\n        // set the address_id for order\n        body.address_id = address.id;\n\n        // this.log.debug('create Order, body: ', JSON.stringify(body, null, 2));\n\n        // If the request body was valid we will create the order\n        const orderModel = await this.orderRepo.create(body);\n        const order = orderModel.toJSON();\n\n        // this.log.debug('created order: ', JSON.stringify(order, null, 2));\n        // this.log.debug('orderItemCreateRequests: ', JSON.stringify(orderItemCreateRequests, null, 2));\n\n        // then create the OrderItems\n        for (const orderItemCreateRequest of orderItemCreateRequests) {\n            orderItemCreateRequest.order_id = order.id;\n            const orderItemModel = await this.orderItemService.create(orderItemCreateRequest);\n            const orderItem = orderItemModel.toJSON();\n            // this.log.debug('created orderItem: ', JSON.stringify(orderItem, null, 2));\n        }\n\n        // finally find and return the created order\n        const newOrder = await this.findOne(order.id);\n\n        this.log.debug('orderService.create: ' + (new Date().getTime() - startTime) + 'ms');\n\n        return newOrder;\n    }\n\n    @validate()\n    public async update(id: number, @request(OrderUpdateRequest) body: OrderUpdateRequest): Promise<Order> {\n\n        // find the existing one without related\n        const order = await this.findOne(id, false);\n\n        // set new values\n        order.Hash = body.hash;\n        order.Buyer = body.buyer;\n        order.Seller = body.seller;\n\n        // update order record\n        const updatedOrder = await this.orderRepo.update(id, order.toJSON());\n\n        // const newOrder = await this.findOne(id);\n        // return newOrder;\n\n        return updatedOrder;\n    }\n\n    public async destroy(id: number): Promise<void> {\n\n        const orderModel = await this.findOne(id);\n        const order = orderModel.toJSON();\n\n        // first remove the related address\n        await this.addressService.destroy(order.ShippingAddress.id);\n\n        // then remove the OrderItems\n        for (const orderItem of order.OrderItems) {\n            await this.orderItemService.destroy(orderItem.id);\n        }\n\n        this.log.debug('removing order:', id);\n        await this.orderRepo.destroy(id);\n    }\n\n}\n"]}