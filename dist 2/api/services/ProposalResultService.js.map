{"version":3,"file":"ProposalResultService.js","sourceRoot":"","sources":["../../../src/api/services/ProposalResultService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ProposalResultRepository } from '../repositories/ProposalResultRepository';\nimport { ProposalResult } from '../models/ProposalResult';\nimport { ProposalResultCreateRequest } from '../requests/ProposalResultCreateRequest';\nimport { ProposalResultUpdateRequest } from '../requests/ProposalResultUpdateRequest';\n// import { ProposalService } from '../services/ProposalService';\n\nexport class ProposalResultService {\n\n    public log: LoggerType;\n\n    constructor(\n        // @inject(Types.Service) @named(Targets.Service.ProposalService) public proposalService: ProposalService,\n        @inject(Types.Repository) @named(Targets.Repository.ProposalResultRepository) public proposalResultRepo: ProposalResultRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ProposalResult>> {\n        return this.proposalResultRepo.findAll();\n    }\n\n    public async findAllByProposalHash(hash: string, withRelated: boolean = true): Promise<Bookshelf.Collection<ProposalResult>> {\n        return await this.proposalResultRepo.findAllByProposalHash(hash, withRelated);\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ProposalResult> {\n        const proposalResult = await this.proposalResultRepo.findOne(id, withRelated);\n        if (proposalResult === null) {\n            this.log.warn(`ProposalResult with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return proposalResult;\n    }\n\n    public async findOneByProposalHash(hash: string, withRelated: boolean = true): Promise<ProposalResult> {\n        const proposalResult = await this.proposalResultRepo.findAllByProposalHash(hash, withRelated);\n        // this.log.debug('proposalResult:', JSON.stringify(proposalResult, null, 2));\n\n        if (proposalResult === null) {\n            this.log.warn(`ProposalResult with the hash=${hash} was not found!`);\n            throw new NotFoundException(hash);\n        }\n        return proposalResult.first();\n    }\n\n    @validate()\n    public async create( @request(ProposalResultCreateRequest) data: ProposalResultCreateRequest): Promise<ProposalResult> {\n\n        const body = JSON.parse(JSON.stringify(data));\n        // this.log.debug('create ProposalResult, body: ', JSON.stringify(body, null, 2));\n\n        // TODO: extract and remove related models from request\n        // const proposalResultRelated = body.related;\n        // delete body.related;\n\n        // If the request body was valid we will create the proposalResult\n        const proposalResult = await this.proposalResultRepo.create(body);\n\n        // TODO: create related models\n        // proposalResultRelated._id = proposalResult.Id;\n        // await this.proposalResultRelatedService.create(proposalResultRelated);\n\n        // finally find and return the created proposalResult\n        const newProposalResult = await this.findOne(proposalResult.id);\n        return newProposalResult;\n    }\n\n    @validate()\n    public async update(id: number, @request(ProposalResultUpdateRequest) body: ProposalResultUpdateRequest): Promise<ProposalResult> {\n\n        // find the existing one without related\n        const proposalResult: any = await this.findOne(id, false);\n        // proposalResult = proposalResult.toJSON();\n\n        // set new values\n        proposalResult.Block = body.block;\n\n        // update proposalResult record\n        const updatedProposalResult = await this.proposalResultRepo.update(id, proposalResult.toJSON());\n\n        // const newProposalResult = await this.findOne(id);\n        // return newProposalResult;\n\n        return updatedProposalResult;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.proposalResultRepo.destroy(id);\n    }\n\n}\n"]}