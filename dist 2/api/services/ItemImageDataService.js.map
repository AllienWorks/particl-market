{"version":3,"file":"ItemImageDataService.js","sourceRoot":"","sources":["../../../src/api/services/ItemImageDataService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ValidationException } from '../exceptions/ValidationException';\nimport { ItemImageDataRepository } from '../repositories/ItemImageDataRepository';\nimport { ItemImageData } from '../models/ItemImageData';\nimport { ItemImageDataCreateRequest } from '../requests/ItemImageDataCreateRequest';\nimport { ItemImageDataUpdateRequest } from '../requests/ItemImageDataUpdateRequest';\nimport { ItemImageDataContentCreateRequest } from '../requests/ItemImageDataContentCreateRequest';\nimport { ItemImageDataContentService } from './ItemImageDataContentService';\n\nexport class ItemImageDataService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.ItemImageDataRepository) public itemImageDataRepo: ItemImageDataRepository,\n        @inject(Types.Service) @named(Targets.Service.ItemImageDataContentService) public itemImageDataContentService: ItemImageDataContentService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ItemImageData>> {\n        return this.itemImageDataRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ItemImageData> {\n        const itemImageData = await this.itemImageDataRepo.findOne(id, withRelated);\n        if (itemImageData === null) {\n            this.log.warn(`ItemImageData with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return itemImageData;\n    }\n\n    @validate()\n    public async create( @request(ItemImageDataCreateRequest) body: ItemImageDataCreateRequest): Promise<ItemImageData> {\n        const startTime = new Date().getTime();\n\n        if (body.dataId == null && body.protocol == null && body.encoding == null && body.data == null ) {\n            throw new ValidationException('Request body is not valid', ['dataId, protocol, encoding and data cannot all be null']);\n        }\n\n        const imageContent = body.data;\n        delete body.data;\n\n        const itemImageData = await this.itemImageDataRepo.create(body);\n\n        const itemImageDataContent = {\n            item_image_data_id: itemImageData.id,\n            data: imageContent\n        } as ItemImageDataContentCreateRequest;\n        await this.itemImageDataContentService.create(itemImageDataContent);\n\n        // finally find and return the created itemImageData\n        const newItemImageData = await this.findOne(itemImageData.Id);\n        this.log.debug('itemImageDataService.create: ' + (new Date().getTime() - startTime) + 'ms');\n        return newItemImageData;\n    }\n\n    @validate()\n    public async update(id: number, @request(ItemImageDataUpdateRequest) body: ItemImageDataCreateRequest): Promise<ItemImageData> {\n\n        // todo: data will not be required later\n        if (body.dataId == null && body.protocol == null && body.encoding == null && body.data == null ) {\n            throw new ValidationException('Request body is not valid', ['dataId, protocol, encoding and data cannot all be null']);\n        }\n\n        if (body.encoding !== 'BASE64') {\n            this.log.warn('Unsupported image encoding. Only supports BASE64.');\n        }\n\n        // find the existing one without related\n        const itemImageData = await this.findOne(id, true);\n\n        // todo: update\n        if ( itemImageData.ItemImageDataContent ) {\n            const oldContent = itemImageData.toJSON();\n            await this.itemImageDataContentService.destroy(oldContent.ItemImageDataContent.id);\n        }\n\n        // set new values\n        if ( body.dataId ) {\n            itemImageData.DataId = body.dataId;\n        }\n        if ( body.protocol ) {\n            itemImageData.Protocol = body.protocol;\n        }\n        if ( body.imageVersion ) {\n            itemImageData.ImageVersion = body.imageVersion;\n        }\n        if ( body.encoding ) {\n            itemImageData.Encoding = body.encoding;\n        }\n        if ( body.data ) {\n            const itemImageDataContent = {\n                item_image_data_id: itemImageData.id,\n                data: body.data\n            } as ItemImageDataContentCreateRequest;\n            await this.itemImageDataContentService.create(itemImageDataContent);\n        }\n        if ( body.originalMime ) {\n            itemImageData.OriginalMime = body.originalMime;\n        }\n        if ( body.originalName ) {\n            itemImageData.OriginalName = body.originalName;\n        }\n\n        // update itemImageData record\n        const updatedItemImageData = await this.itemImageDataRepo.update(id, itemImageData.toJSON());\n        return updatedItemImageData;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.itemImageDataRepo.destroy(id);\n    }\n\n}\n"]}