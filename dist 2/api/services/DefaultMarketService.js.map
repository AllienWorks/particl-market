{"version":3,"file":"DefaultMarketService.js","sourceRoot":"","sources":["../../../src/api/services/DefaultMarketService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { Market } from '../models/Market';\nimport { MarketService } from './MarketService';\nimport { MarketCreateRequest } from '../requests/MarketCreateRequest';\nimport { MarketUpdateRequest } from '../requests/MarketUpdateRequest';\nimport { CoreRpcService } from './CoreRpcService';\nimport { SmsgService } from './SmsgService';\nimport { InternalServerException } from '../exceptions/InternalServerException';\n\n\nexport class DefaultMarketService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.MarketService) public marketService: MarketService,\n        @inject(Types.Service) @named(Targets.Service.CoreRpcService) public coreRpcService: CoreRpcService,\n        @inject(Types.Service) @named(Targets.Service.SmsgService) public smsgService: SmsgService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    // TODO: if something goes wrong here and default profile does not get created, the application should stop\n\n    public async seedDefaultMarket(): Promise<void> {\n\n        const MARKETPLACE_NAME          = process.env.DEFAULT_MARKETPLACE_NAME\n                                            ? process.env.DEFAULT_MARKETPLACE_NAME\n                                            : 'DEFAULT';\n        const MARKETPLACE_PRIVATE_KEY   = process.env.DEFAULT_MARKETPLACE_PRIVATE_KEY\n                                            ? process.env.DEFAULT_MARKETPLACE_PRIVATE_KEY\n                                            : '2Zc2pc9jSx2qF5tpu25DCZEr1Dwj8JBoVL5WP4H1drJsX9sP4ek';\n        const MARKETPLACE_ADDRESS       = process.env.DEFAULT_MARKETPLACE_ADDRESS\n                                            ? process.env.DEFAULT_MARKETPLACE_ADDRESS\n                                            : 'pmktyVZshdMAQ6DPbbRXEFNGuzMbTMkqAA';\n\n        const defaultMarket = {\n            name: MARKETPLACE_NAME,\n            private_key: MARKETPLACE_PRIVATE_KEY,\n            address: MARKETPLACE_ADDRESS\n        } as MarketCreateRequest;\n        await this.insertOrUpdateMarket(defaultMarket);\n        return;\n    }\n\n    public async insertOrUpdateMarket(market: MarketCreateRequest): Promise<Market> {\n        let newMarketModel = await this.marketService.findByAddress(market.address);\n        if (newMarketModel === null) {\n            newMarketModel = await this.marketService.create(market);\n            this.log.debug('created new default Market: ', JSON.stringify(newMarketModel, null, 2));\n        } else {\n            newMarketModel = await this.marketService.update(newMarketModel.Id, market as MarketUpdateRequest);\n            this.log.debug('updated new default Market: ', JSON.stringify(newMarketModel, null, 2));\n        }\n        const newMarket = newMarketModel.toJSON();\n\n        // import market private key\n        if ( await this.smsgService.smsgImportPrivKey(newMarket.privateKey) ) {\n            // get market public key\n            const publicKey = await this.getPublicKeyForAddress(newMarket.address);\n            this.log.debug('default Market publicKey: ', publicKey);\n            // add market address\n            if (publicKey) {\n                await this.smsgService.smsgAddAddress(newMarket.address, publicKey);\n            } else {\n                throw new InternalServerException('Error while adding public key to db.');\n            }\n        } else {\n            this.log.error('Error while importing market private key to db.');\n            // todo: throw exception, and do not allow market to run before its properly set up\n        }\n        return newMarket;\n    }\n\n    private async getPublicKeyForAddress(address: string): Promise<string|null> {\n        return await this.smsgService.smsgLocalKeys()\n            .then(localKeys => {\n                for (const smsgKey of localKeys.smsg_keys) {\n                    if (smsgKey.address === address) {\n                        return smsgKey.public_key;\n                    }\n                }\n                return null;\n            })\n            .catch(error => null);\n    }\n}\n"]}