{"version":3,"file":"ProposalOptionResultService.js","sourceRoot":"","sources":["../../../src/api/services/ProposalOptionResultService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ProposalOptionResultRepository } from '../repositories/ProposalOptionResultRepository';\nimport { ProposalOptionResult } from '../models/ProposalOptionResult';\nimport { ProposalOptionResultCreateRequest } from '../requests/ProposalOptionResultCreateRequest';\nimport { ProposalOptionResultUpdateRequest } from '../requests/ProposalOptionResultUpdateRequest';\n\n\nexport class ProposalOptionResultService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.ProposalOptionResultRepository) public proposalOptionResultRepo: ProposalOptionResultRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ProposalOptionResult>> {\n        return this.proposalOptionResultRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ProposalOptionResult> {\n        const proposalOptionResult = await this.proposalOptionResultRepo.findOne(id, withRelated);\n        if (proposalOptionResult === null) {\n            this.log.warn(`ProposalOptionResult with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return proposalOptionResult;\n    }\n\n    @validate()\n    public async create( @request(ProposalOptionResultCreateRequest) data: ProposalOptionResultCreateRequest): Promise<ProposalOptionResult> {\n\n        const body = JSON.parse(JSON.stringify(data));\n        // this.log.debug('create ProposalOptionResult, body: ', JSON.stringify(body, null, 2));\n\n        // TODO: extract and remove related models from request\n        // const proposalOptionResultRelated = body.related;\n        // delete body.related;\n\n        // If the request body was valid we will create the proposalOptionResult\n        const proposalOptionResult = await this.proposalOptionResultRepo.create(body);\n\n        // TODO: create related models\n        // proposalOptionResultRelated._id = proposalOptionResult.Id;\n        // await this.proposalOptionResultRelatedService.create(proposalOptionResultRelated);\n\n        // finally find and return the created proposalOptionResult\n        const newProposalOptionResult = await this.findOne(proposalOptionResult.id);\n        return newProposalOptionResult;\n    }\n\n    @validate()\n    public async update(id: number, @request(ProposalOptionResultUpdateRequest) body: ProposalOptionResultUpdateRequest): Promise<ProposalOptionResult> {\n\n        // find the existing one without related\n        const proposalOptionResult = await this.findOne(id, false);\n\n        // set new values\n        // proposalOptionResult.ProposalResultId = body.proposalResultId;\n        // proposalOptionResult.ProposalOptionId = body.proposalOptionId;\n        proposalOptionResult.Weight = body.weight;\n        proposalOptionResult.Voters = body.voters;\n\n        // update proposalOptionResult record\n        const updatedProposalOptionResult = await this.proposalOptionResultRepo.update(id, proposalOptionResult.toJSON());\n\n        // const newProposalOptionResult = await this.findOne(id);\n        // return newProposalOptionResult;\n\n        return updatedProposalOptionResult;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.proposalOptionResultRepo.destroy(id);\n    }\n\n}\n"]}