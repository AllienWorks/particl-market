{"version":3,"file":"LocationMarkerService.js","sourceRoot":"","sources":["../../../src/api/services/LocationMarkerService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { LocationMarkerRepository } from '../repositories/LocationMarkerRepository';\nimport { LocationMarker } from '../models/LocationMarker';\nimport { LocationMarkerCreateRequest } from '../requests/LocationMarkerCreateRequest';\nimport { LocationMarkerUpdateRequest } from '../requests/LocationMarkerUpdateRequest';\nimport { RpcRequest } from '../requests/RpcRequest';\n\n\nexport class LocationMarkerService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.LocationMarkerRepository) public locationMarkerRepo: LocationMarkerRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<LocationMarker>> {\n        return this.locationMarkerRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<LocationMarker> {\n        const locationMarker = await this.locationMarkerRepo.findOne(id, withRelated);\n        if (locationMarker === null) {\n            this.log.warn(`LocationMarker with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return locationMarker;\n    }\n\n    @validate()\n    public async create( @request(LocationMarkerCreateRequest) body: LocationMarkerCreateRequest): Promise<LocationMarker> {\n        const startTime = new Date().getTime();\n\n        // If the request body was valid we will create the locationMarker\n        const locationMarker = await this.locationMarkerRepo.create(body);\n\n        // finally find and return the created locationMarker\n        const result = await this.findOne(locationMarker.Id);\n\n        // this.log.debug('locationMarkerService.create: ' + (new Date().getTime() - startTime) + 'ms');\n        return result;\n    }\n\n    @validate()\n    public async update(id: number, @request(LocationMarkerUpdateRequest) body: LocationMarkerUpdateRequest): Promise<LocationMarker> {\n\n        // find the existing one without related\n        const locationMarker = await this.findOne(id, false);\n\n        // set new values\n        locationMarker.MarkerTitle = body.markerTitle;\n        locationMarker.MarkerText = body.markerText;\n        locationMarker.Lat = body.lat;\n        locationMarker.Lng = body.lng;\n\n        // update locationMarker record\n        const updatedLocationMarker = await this.locationMarkerRepo.update(id, locationMarker.toJSON());\n        return updatedLocationMarker;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.locationMarkerRepo.destroy(id);\n    }\n}\n"]}