{"version":3,"file":"PriceTickerService.js","sourceRoot":"","sources":["../../../src/api/services/PriceTickerService.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAE1C,+CAAuD;AACvD,sDAA4D;AAC5D,uEAAoE;AACpE,iFAA8E;AAE9E,mFAAgF;AAChF,mFAAgF;AAChF,mCAAmC;AAEnC,qEAAkE;AAElE,IAAa,kBAAkB,GAA/B;IAII,YACsF,eAAsC,EACzE,MAAyB,EAC3B,UAA0B;QAFW,oBAAe,GAAf,eAAe,CAAuB;QACzE,WAAM,GAAN,MAAM,CAAmB;QAC3B,eAAU,GAAV,UAAU,CAAgB;QAEvE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAEY,OAAO;;YAChB,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;QAC1C,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU,EAAE,cAAuB,IAAI;;YACxD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YACxE,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,2BAA2B,EAAE,iBAAiB,CAAC,CAAC;gBAC9D,MAAM,IAAI,qCAAiB,CAAC,EAAE,CAAC,CAAC;YACpC,CAAC;YACD,MAAM,CAAC,WAAW,CAAC;QACvB,CAAC;KAAA;IAGY,MAAM,CAAqC,IAA8B;;YAClF,+DAA+D;YAC/D,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAE5D,kDAAkD;YAClD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAC1D,MAAM,CAAC,cAAc,CAAC;QAC1B,CAAC;KAAA;IAGY,MAAM,CAAC,EAAU,EAAqC,IAA8B;;YAC7F,wCAAwC;YACxC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAElD,iBAAiB;YACjB,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;YACtC,WAAW,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;YAC1C,gEAAgE;YAEhE,WAAW,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;YAC1C,WAAW,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;YAC9C,WAAW,CAAC,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC;YACnD,WAAW,CAAC,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAEnD,WAAW,CAAC,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC;YAC5D,WAAW,CAAC,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC;YAC5D,WAAW,CAAC,qBAAqB,GAAG,IAAI,CAAC,uBAAuB,CAAC;YAEjE,WAAW,CAAC,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YACzD,WAAW,CAAC,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC;YACrD,WAAW,CAAC,qBAAqB,GAAG,IAAI,CAAC,wBAAwB,CAAC;YAElE,WAAW,CAAC,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC;YACpE,WAAW,CAAC,qBAAqB,GAAG,IAAI,CAAC,wBAAwB,CAAC;YAClE,WAAW,CAAC,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAEzD,WAAW,CAAC,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC;YACnD,WAAW,CAAC,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC;YAC5D,WAAW,CAAC,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC;YAE5D,4BAA4B;YAC5B,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,EAAE,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;YAEvF,MAAM,CAAC,kBAAkB,CAAC;QAC9B,CAAC;KAAA;IAED;;;;;OAKG;IAEU,cAAc,CAAC,QAAgB;;YACxC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QACzD,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU;;YAC3B,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC3C,CAAC;KAAA;IAED;;;;OAIG;IACU,eAAe,CAAC,UAAoB;;YAC7C,MAAM,UAAU,GAAQ,EAAE,CAAC;YAC3B,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,UAAU,CAAC,CAAC,CAAC;gBAC9B,IAAI,WAAW,CAAC;gBAChB,QAAQ,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC,uBAAuB;gBAC1D,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBACvD,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;oBACb,mBAAmB;oBACnB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;oBAC7D,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;wBACjB,cAAc;wBACd,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;oBACzC,CAAC;gBACL,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,sBAAsB;oBACtB,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;gBACzC,CAAC;gBACD,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBAClD,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;YAC1C,CAAC;YACD,MAAM,CAAC,UAAU,CAAC;QACtB,CAAC;KAAA;IAED;;;;OAIG;IACW,uBAAuB;;YACjC,WAAW;YACX,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAC9C,GAAG,CAAC,CAAC,MAAM,IAAI,IAAI,UAAU,CAAC,CAAC,CAAC;gBAC5B,MAAM,UAAU,GAAQ,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC/D,MAAM,UAAU,GAAG;oBACf,SAAS,EAAE,IAAI,CAAC,EAAE;oBAClB,WAAW,EAAE,IAAI,CAAC,IAAI;oBACtB,aAAa,EAAE,IAAI,CAAC,MAAM;oBAC1B,WAAW,EAAE,IAAI,CAAC,IAAI;oBACtB,gBAAgB,EAAE,IAAI,CAAC,SAAS;oBAChC,gBAAgB,EAAE,IAAI,CAAC,SAAS;oBAChC,qBAAqB,EAAE,IAAI,CAAC,gBAAgB,CAAC;oBAC7C,qBAAqB,EAAE,IAAI,CAAC,cAAc;oBAC1C,uBAAuB,EAAE,IAAI,CAAC,gBAAgB;oBAC9C,mBAAmB,EAAE,IAAI,CAAC,YAAY;oBACtC,iBAAiB,EAAE,IAAI,CAAC,UAAU;oBAClC,wBAAwB,EAAE,IAAI,CAAC,iBAAiB;oBAChD,yBAAyB,EAAE,IAAI,CAAC,kBAAkB;oBAClD,wBAAwB,EAAE,IAAI,CAAC,iBAAiB;oBAChD,mBAAmB,EAAE,IAAI,CAAC,YAAY;oBACtC,gBAAgB,EAAE,IAAI,CAAC,WAAW,CAAC;oBACnC,qBAAqB,EAAE,IAAI,CAAC,gBAAgB,CAAC;oBAC7C,qBAAqB,EAAE,IAAI,CAAC,gBAAgB,CAAC;iBAChD,CAAC;gBACF,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;oBACb,gBAAgB;oBAChB,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,EAAE,UAAsC,CAAC,CAAC;gBACxG,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,SAAS;oBACT,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAsC,CAAC,CAAC;gBACzF,CAAC;YACL,CAAC;YACD,MAAM,CAAC;QACX,CAAC;KAAA;IAED;;;;;OAKG;IACW,cAAc,CAAC,WAAwB;;YACjD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YACpE,MAAM,CAAC,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC;QAC5E,CAAC;KAAA;IAED;;;;OAIG;IACW,aAAa;;YACvB,IAAI,CAAC;gBACD,MAAM,CAAC,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM;oBACpC,OAAO,CAAC,gEAAgE,EAAE,CAAO,KAAK,EAAE,QAAQ,EAAE,IAAI;wBAClG,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACR,MAAM,CAAC,KAAK,CAAC,CAAC;wBAClB,CAAC;wBACD,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC9B,CAAC,CAAA,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC,KAAK,CAAC;oBACL,MAAM,IAAI,mCAAgB,CAAC,kBAAkB,CAAC,CAAC;gBACnD,CAAC,CAAC,CAAC;YACP,CAAC;YAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACX,MAAM,IAAI,mCAAgB,CAAC,WAAW,GAAG,EAAE,CAAC,CAAC;YACjD,CAAC;QACL,CAAC;KAAA;IAED;;;;;OAKG;IACW,gBAAgB,CAAC,SAAe;;YAC1C,MAAM,OAAO,GAAQ,IAAI,IAAI,EAAE,CAAC;YAChC,MAAM,MAAM,GAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;YACxC,MAAM,CAAC,CAAC,OAAO,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC;QACrC,CAAC;KAAA;CACJ,CAAA;AA9KG;IADC,mBAAQ,EAAE;IACW,mBAAA,kBAAO,CAAC,mDAAwB,CAAC,CAAA;;6CAAO,mDAAwB;;gDAOrF;AAGD;IADC,mBAAQ,EAAE;IACsB,mBAAA,kBAAO,CAAC,mDAAwB,CAAC,CAAA;;qDAAO,mDAAwB;;gDAkChG;AASD;IADC,mBAAQ,EAAE;;;;wDAGV;AAjFQ,kBAAkB;IAKtB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,UAAU,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAA;IACzE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;IACtC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,GAAG,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,SAAS,CAAC,CAAA;6CAF+D,6CAAqB;GALnH,kBAAkB,CAwM9B;AAxMY,gDAAkB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { PriceTickerRepository } from '../repositories/PriceTickerRepository';\nimport { PriceTicker } from '../models/PriceTicker';\nimport { PriceTickerCreateRequest } from '../requests/PriceTickerCreateRequest';\nimport { PriceTickerUpdateRequest } from '../requests/PriceTickerUpdateRequest';\nimport * as Request from 'request';\n\nimport { MessageException } from '../exceptions/MessageException';\n\nexport class PriceTickerService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.PriceTickerRepository) public priceTickerRepo: PriceTickerRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Lib) @named('request') private requestApi: typeof Request\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<PriceTicker>> {\n        return this.priceTickerRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<PriceTicker> {\n        const priceTicker = await this.priceTickerRepo.findOne(id, withRelated);\n        if (priceTicker === null) {\n            this.log.warn(`PriceTicker with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return priceTicker;\n    }\n\n    @validate()\n    public async create( @request(PriceTickerCreateRequest) body: PriceTickerCreateRequest): Promise<PriceTicker> {\n        // If the request body was valid we will create the priceTicker\n        const priceTicker = await this.priceTickerRepo.create(body);\n\n        // finally find and return the created priceTicker\n        const newPriceTicker = await this.findOne(priceTicker.id);\n        return newPriceTicker;\n    }\n\n    @validate()\n    public async update(id: number, @request(PriceTickerUpdateRequest) body: PriceTickerUpdateRequest): Promise<PriceTicker> {\n        // find the existing one without related\n        const priceTicker = await this.findOne(id, false);\n\n        // set new values\n        priceTicker.CryptoId = body.crypto_id;\n        priceTicker.CryptoName = body.crypto_name;\n        // priceTicker.CryptoPriceCurrency = body.crypto_price_currency;\n\n        priceTicker.CryptoRank = body.crypto_rank;\n        priceTicker.CryptoSymbol = body.crypto_symbol;\n        priceTicker.CryptoPriceUsd = body.crypto_price_usd;\n        priceTicker.CryptoPriceBtc = body.crypto_price_btc;\n\n        priceTicker.Crypto24HVolumeUsd = body.crypto_24h_volume_usd;\n        priceTicker.CryptoMarketCapUsd = body.crypto_market_cap_usd;\n        priceTicker.CryptoAvailableSupply = body.crypto_available_supply;\n\n        priceTicker.CryptoTotalSupply = body.crypto_total_supply;\n        priceTicker.CryptoMaxSupply = body.crypto_max_supply;\n        priceTicker.CryptoPercentChange1H = body.crypto_percent_change_1h;\n\n        priceTicker.CryptoPercentChange24H = body.crypto_percent_change_24h;\n        priceTicker.CryptoPercentChange7D = body.crypto_percent_change_7d;\n        priceTicker.CryptoLastUpdated = body.crypto_last_updated;\n\n        priceTicker.CryptoPriceEur = body.crypto_price_eur;\n        priceTicker.Crypto24HVolumeEur = body.crypto_24h_volume_eur;\n        priceTicker.CryptoMarketCapEur = body.crypto_market_cap_eur;\n\n        // update priceTicker record\n        const updatedPriceTicker = await this.priceTickerRepo.update(id, priceTicker.toJSON());\n\n        return updatedPriceTicker;\n    }\n\n    /**\n     * find data by symbol\n     *\n     * @param currency like BTC\n     * @returns {Promise<PriceTicker>}\n     */\n    @validate()\n    public async getOneBySymbol(currency: string): Promise<PriceTicker> {\n        return this.priceTickerRepo.getOneBySymbol(currency);\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.priceTickerRepo.destroy(id);\n    }\n\n    /**\n     * check if currency doesnt exist in db or the update timestamp is old, then fetch the updated tickers\n     *\n     * @returns {Promise<PriceTicker[]>}\n     */\n    public async getPriceTickers(currencies: string[]): Promise<PriceTicker[]> {\n        const returnData: any = [];\n        for (let currency of currencies) { // ETH, BTC, XRP\n            let priceTicker;\n            currency = currency.toUpperCase(); // convert to UPPERCASE\n            const symbolData = await this.getOneBySymbol(currency);\n            if (symbolData) {\n                // check and update\n                const needToBeUpdate = await this.needTobeUpdate(symbolData);\n                if (needToBeUpdate) {\n                    // calling api\n                    await this.checkUpdateCreateRecord();\n                }\n            } else {\n                // call api and create\n                await this.checkUpdateCreateRecord();\n            }\n            priceTicker = await this.getOneBySymbol(currency);\n            returnData.push(priceTicker.toJSON());\n        }\n        return returnData;\n    }\n\n    /**\n     * check if currency doesnt exist in db, so call the api update existing record and insert new record as well.\n     *\n     * @returns {Promise<void>}\n     */\n    private async checkUpdateCreateRecord(): Promise<void> {\n        // call api\n        const latestData = await this.getLatestData();\n        for (const data of latestData) {\n            const symbolData: any = await this.getOneBySymbol(data.symbol);\n            const cryptoData = {\n                crypto_id: data.id,\n                crypto_name: data.name,\n                crypto_symbol: data.symbol,\n                crypto_rank: data.rank,\n                crypto_price_usd: data.price_usd,\n                crypto_price_btc: data.price_btc,\n                crypto_24h_volume_usd: data['24h_volume_usd'],\n                crypto_market_cap_usd: data.market_cap_usd,\n                crypto_available_supply: data.available_supply,\n                crypto_total_supply: data.total_supply,\n                crypto_max_supply: data.max_supply,\n                crypto_percent_change_1h: data.percent_change_1h,\n                crypto_percent_change_24h: data.percent_change_24h,\n                crypto_percent_change_7d: data.percent_change_7d,\n                crypto_last_updated: data.last_updated,\n                crypto_price_eur: data[`price_eur`],\n                crypto_24h_volume_eur: data[`24h_volume_eur`],\n                crypto_market_cap_eur: data[`market_cap_eur`]\n            };\n            if (symbolData) {\n                // update record\n                const updateSymbolRecord = await this.update(symbolData.id, cryptoData as PriceTickerUpdateRequest);\n            } else {\n                // insert\n                const createdPriceTicker = await this.create(cryptoData as PriceTickerCreateRequest);\n            }\n        }\n        return;\n    }\n\n    /**\n     * check updated in more than process.env.DATA_CHECK_DELAY ago\n     *\n     * @param currency\n     * @returns {Promise<boolean>}\n     */\n    private async needTobeUpdate(priceTicker: PriceTicker): Promise<boolean> {\n        const diffMint = await this.checkDiffBtwDate(priceTicker.UpdatedAt);\n        return (diffMint > Number(process.env.DATA_CHECK_DELAY)) ? true : false;\n    }\n\n    /**\n     * call api for getting latest data to update\n     *\n     * @returns {<any>}\n     */\n    private async getLatestData(): Promise<any> {\n        try {\n            return new Promise<any>((resolve, reject) => {\n                Request(`https://api.coinmarketcap.com/v1/ticker/?convert=EUR&limit=200`, async (error, response, body) => {\n                    if (error) {\n                        reject(error);\n                    }\n                    resolve(JSON.parse(body));\n                });\n            }).catch(() => {\n                throw new MessageException(`Invalid currency`);\n            });\n        } catch (err) {\n            throw new MessageException(`Error : ${err}`);\n        }\n    }\n\n    /**\n     * return diffrence between passing timestamp and current timestamp in SECONDS\n     *\n     * @param date : timestamp\n     * @returns {<number>} timeDiff in seconds\n     */\n    private async checkDiffBtwDate(timestamp: Date): Promise<number> {\n        const current: any = new Date();\n        const ticker: any = new Date(timestamp);\n        return (current - ticker) / 1000;\n    }\n}\n"]}