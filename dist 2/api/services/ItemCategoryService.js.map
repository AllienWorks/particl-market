{"version":3,"file":"ItemCategoryService.js","sourceRoot":"","sources":["../../../src/api/services/ItemCategoryService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { MessageException } from '../exceptions/MessageException';\nimport { ItemCategoryRepository } from '../repositories/ItemCategoryRepository';\nimport { ItemCategory } from '../models/ItemCategory';\nimport { ItemCategoryCreateRequest } from '../requests/ItemCategoryCreateRequest';\nimport { ItemCategoryUpdateRequest } from '../requests/ItemCategoryUpdateRequest';\nimport { RpcRequest } from '../requests/RpcRequest';\nimport * as resources from 'resources';\n\n\nexport class ItemCategoryService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.ItemCategoryRepository) public itemCategoryRepo: ItemCategoryRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ItemCategory>> {\n        return this.itemCategoryRepo.findAll();\n    }\n\n    public async findOneByKey(key: string, withRelated: boolean = true): Promise<ItemCategory> {\n        const itemCategory = await this.itemCategoryRepo.findOneByKey(key, withRelated);\n        return itemCategory;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ItemCategory> {\n        const itemCategory = await this.itemCategoryRepo.findOne(id, withRelated);\n        if (itemCategory === null) {\n            this.log.warn(`ItemCategory with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return itemCategory;\n    }\n\n    public async findRoot(): Promise<ItemCategory> {\n        return await this.itemCategoryRepo.findRoot();\n    }\n\n    public async findByName(name: string, withRelated: boolean = true): Promise<Bookshelf.Collection<ItemCategory>> {\n        return await this.itemCategoryRepo.findByName(name, withRelated);\n    }\n\n    // todo: rename as categoryExists\n    // find by name and parent_item_category_id\n    public async isCategoryExists(categoryName: string, parentCategory: ItemCategory): Promise<ItemCategory> {\n        let parentCategoryId = null;\n        if (!_.isEmpty(parentCategory)) {\n            parentCategoryId = parentCategory.id;\n        }\n        return await this.itemCategoryRepo.isCategoryExists(categoryName, parentCategoryId);\n    }\n\n    @validate()\n    public async create( @request(ItemCategoryCreateRequest) body: ItemCategoryCreateRequest): Promise<ItemCategory> {\n\n        if (body.parent_item_category_id === 0) {\n            delete body.parent_item_category_id;\n        }\n        // If the request body was valid we will create the itemCategory\n        const itemCategory = await this.itemCategoryRepo.create(body);\n\n        // finally find and return the created itemCategory\n        const newItemCategory = await this.findOne(itemCategory.Id);\n        return newItemCategory;\n    }\n\n    @validate()\n    public async update(id: number, @request(ItemCategoryUpdateRequest) body: ItemCategoryUpdateRequest, patching: boolean = true): Promise<ItemCategory> {\n        // find the existing one without related\n        const itemCategory = await this.findOne(id, false);\n\n        // set new values\n        itemCategory.Name = body.name;\n        itemCategory.Description = body.description;\n\n        if (body.parent_item_category_id) {\n            itemCategory.set('parentItemCategoryId', body.parent_item_category_id);\n        }\n\n        // update itemCategory record\n        const updatedItemCategory = await this.itemCategoryRepo.update(id, itemCategory.toJSON(), patching);\n        return updatedItemCategory;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.itemCategoryRepo.destroy(id);\n    }\n\n    /**\n     * create categories from array and will return last category <ItemCategory> Model\n     *\n     * @param categoryArray : string[]\n     * @returns {Promise<ItemCategory>}\n     */\n    public async createCategoriesFromArray(categoryArray: string[]): Promise<resources.ItemCategory> {\n\n        const rootCategoryWithRelatedModel: any = await this.findRoot();\n        let rootCategoryToSearchFrom = rootCategoryWithRelatedModel.toJSON();\n\n        // this.log.debug('categoryArray', categoryArray);\n        for (const categoryKeyOrName of categoryArray) { // [cat0, cat1, cat2, cat3, cat4]\n\n            let existingCategory = await this.findChildCategoryByKeyOrName(rootCategoryToSearchFrom, categoryKeyOrName);\n\n            if (!existingCategory) {\n\n                // category did not exist, so we need to create it\n                const categoryCreateRequest = {\n                    name: categoryKeyOrName,\n                    parent_item_category_id: rootCategoryToSearchFrom.id\n                } as ItemCategoryCreateRequest;\n\n                // create and assign it as existingCategoru\n                const newCategory = await this.create(categoryCreateRequest);\n                existingCategory = newCategory.toJSON();\n\n            } else {\n                // category exists, fetch it\n                const existingCategoryModel = await this.findOneByKey(categoryKeyOrName);\n                existingCategory = existingCategoryModel.toJSON();\n            }\n            rootCategoryToSearchFrom = existingCategory;\n        }\n\n        // return the last category\n        return rootCategoryToSearchFrom;\n    }\n\n    /**\n     * return the ChildCategory having the given key or name\n     *\n     * @param {\"resources\".ItemCategory} rootCategory\n     * @param {string} keyOrName\n     * @returns {Promise<\"resources\".ItemCategory>}\n     */\n    public async findChildCategoryByKeyOrName(rootCategory: resources.ItemCategory, keyOrName: string): Promise<resources.ItemCategory> {\n\n        if (rootCategory.key === keyOrName) {\n            // root case\n            return rootCategory;\n        } else {\n            // search the children for a match\n            const childCategories = rootCategory.ChildItemCategories;\n            const found = _.find(childCategories, (childCategory) => {\n                return (childCategory['key'] === keyOrName || childCategory['name'] === keyOrName);\n            });\n            if (found) {\n                return found;\n            } else {\n                throw new NotFoundException(keyOrName);\n            }\n        }\n    }\n\n    /**\n     * function to return category id\n     *\n     * @param data\n     * @returns {Promise<number>}\n     */\n    public async getCategoryIdByKey(parentItemCategory: any): Promise<number> {\n        let parentItemCategoryId;\n        if (typeof parentItemCategory === 'number') {\n            parentItemCategoryId = parentItemCategory;\n        } else { // get category id by key\n            parentItemCategory = await this.findOneByKey(parentItemCategory);\n            parentItemCategoryId = parentItemCategory.id;\n        }\n        return parentItemCategoryId;\n    }\n}\n"]}