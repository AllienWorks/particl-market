{"version":3,"file":"VoteActionService.js","sourceRoot":"","sources":["../../../src/api/services/VoteActionService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets, Events } from '../../constants';\nimport { Vote } from '../models/Vote';\nimport { VoteCreateRequest } from '../requests/VoteCreateRequest';\nimport { SmsgService } from './SmsgService';\nimport { MarketplaceMessage } from '../messages/MarketplaceMessage';\nimport { EventEmitter } from 'events';\nimport * as resources from 'resources';\nimport { MarketplaceEvent } from '../messages/MarketplaceEvent';\nimport { VoteFactory } from '../factories/VoteFactory';\nimport { VoteService } from './VoteService';\nimport { SmsgSendResponse } from '../responses/SmsgSendResponse';\nimport { VoteMessageType } from '../enums/VoteMessageType';\nimport { CoreRpcService } from './CoreRpcService';\nimport { MessageException } from '../exceptions/MessageException';\nimport { VoteMessage } from '../messages/VoteMessage';\nimport { ProposalService } from './ProposalService';\nimport { VoteUpdateRequest } from '../requests/VoteUpdateRequest';\nimport { ProposalResultService } from './ProposalResultService';\nimport { ProposalResultUpdateRequest } from '../requests/ProposalResultUpdateRequest';\nimport { ProposalOptionResultUpdateRequest } from '../requests/ProposalOptionResultUpdateRequest';\nimport { ProposalOptionService } from './ProposalOptionService';\nimport { ProposalOptionResultService } from './ProposalOptionResultService';\nimport { ProposalType } from '../enums/ProposalType';\nimport { ProposalOptionResult } from '../models/ProposalOptionResult';\nimport { ListingItemService } from './ListingItemService';\nimport { SmsgMessageService } from './SmsgMessageService';\nimport { SmsgMessageStatus } from '../enums/SmsgMessageStatus';\n\nexport class VoteActionService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Factory) @named(Targets.Factory.VoteFactory) private voteFactory: VoteFactory,\n        @inject(Types.Service) @named(Targets.Service.SmsgService) public smsgService: SmsgService,\n        @inject(Types.Service) @named(Targets.Service.CoreRpcService) public coreRpcService: CoreRpcService,\n        @inject(Types.Service) @named(Targets.Service.ProposalService) public proposalService: ProposalService,\n        @inject(Types.Service) @named(Targets.Service.ProposalOptionService) public proposalOptionService: ProposalOptionService,\n        @inject(Types.Service) @named(Targets.Service.ProposalResultService) public proposalResultService: ProposalResultService,\n        @inject(Types.Service) @named(Targets.Service.ProposalOptionResultService) public proposalOptionResultService: ProposalOptionResultService,\n        @inject(Types.Service) @named(Targets.Service.VoteService) public voteService: VoteService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) public listingItemService: ListingItemService,\n        @inject(Types.Service) @named(Targets.Service.SmsgMessageService) private smsgMessageService: SmsgMessageService,\n        @inject(Types.Core) @named(Core.Events) public eventEmitter: EventEmitter,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n        this.configureEventListeners();\n    }\n\n    /**\n     *\n     * @param {\"resources\".Proposal} proposal\n     * @param {\"resources\".ProposalOption} proposalOption\n     * @param {\"resources\".Profile} senderProfile\n     * @param {\"resources\".Market} marketplace\n     * @returns {Promise<SmsgSendResponse>}\n     */\n    public async send( proposal: resources.Proposal, proposalOption: resources.ProposalOption,\n                       senderProfile: resources.Profile, marketplace: resources.Market): Promise<SmsgSendResponse> {\n\n        const currentBlock: number = await this.coreRpcService.getBlockCount();\n        const voteMessage = await this.voteFactory.getMessage(VoteMessageType.MP_VOTE, proposal, proposalOption,\n            senderProfile, currentBlock);\n\n        const msg: MarketplaceMessage = {\n            version: process.env.MARKETPLACE_VERSION,\n            mpaction: voteMessage\n        };\n\n        return this.smsgService.smsgSend(senderProfile.address, marketplace.address, msg, false);\n    }\n\n    /**\n     * process received VoteMessage\n     * - save ActionMessage\n     * - create Proposal\n     *\n     * @param {MarketplaceEvent} event\n     * @returns {Promise<module:resources.Bid>}\n     */\n    public async processVoteReceivedEvent(event: MarketplaceEvent): Promise<SmsgMessageStatus> {\n\n        const message = event.marketplaceMessage;\n        if (!message.mpaction) {   // ACTIONEVENT\n            throw new MessageException('Missing mpaction.');\n        }\n\n        const voteMessage: VoteMessage = event.marketplaceMessage.mpaction as VoteMessage;\n        if (voteMessage.voter !== event.smsgMessage.from) {\n            throw new MessageException('Voter does not match with sender.');\n        }\n\n        // get proposal and ignore vote if we're past the final block of the proposal\n        return await this.proposalService.findOneByHash(voteMessage.proposalHash)\n            .then(async proposalModel => {\n\n                const proposal: resources.Proposal = proposalModel.toJSON();\n\n                // just make sure we have one\n                if (_.isEmpty(proposal.ProposalResults)) {\n                    throw new MessageException('ProposalResult should not be empty!');\n                }\n\n                const currentBlock: number = await this.coreRpcService.getBlockCount();\n                // this.log.debug('before update, proposal:', JSON.stringify(proposal, null, 2));\n\n                if (voteMessage && proposal.blockEnd >= currentBlock) {\n                    const createdVote = await this.createOrUpdateVote(voteMessage, proposal, currentBlock, 1);\n                    this.log.debug('created/updated Vote:', JSON.stringify(createdVote, null, 2));\n\n                    const proposalResult: resources.ProposalResult = await this.proposalService.recalculateProposalResult(proposal);\n\n                    // todo: extract method\n                    if (proposal.type === ProposalType.ITEM_VOTE\n                        && await this.shouldRemoveListingItem(proposalResult)) {\n\n                        // remove the ListingItem from the marketplace (unless user has Bid/Order related to it).\n                        const listingItemId = await this.listingItemService.findOne(proposal.ListingItem.id, false)\n                            .then(value => {\n                                return value.Id;\n                            }).catch(reason => {\n                                // ignore\n                                return null;\n                            });\n                        if (listingItemId) {\n                            await this.listingItemService.destroy(listingItemId);\n                        }\n                    }\n                    // TODO: do whatever else needs to be done\n\n                    return SmsgMessageStatus.PROCESSED;\n                } else {\n                    throw new MessageException('Missing VoteMessage');\n                }\n            })\n            .catch(reason => {\n                return SmsgMessageStatus.WAITING;\n            });\n\n    }\n\n    /**\n     * todo: move to listingItemService\n     *\n     * @param {\"resources\".ProposalResult} proposalResult\n     * @returns {Promise<boolean>}\n     */\n    private async shouldRemoveListingItem(proposalResult: resources.ProposalResult): Promise<boolean> {\n        const okOptionResult = _.find(proposalResult.ProposalOptionResults, (proposalOptionResult: resources.ProposalOptionResult) => {\n            return proposalOptionResult.ProposalOption.optionId === 0;\n        });\n        const removeOptionResult = _.find(proposalResult.ProposalOptionResults, (proposalOptionResult: resources.ProposalOptionResult) => {\n            return proposalOptionResult.ProposalOption.optionId === 1; // 1 === REMOVE\n        });\n\n        // Requirements to remove the ListingItem from the testnet marketplace, these should also be configurable:\n        // at minimum, a total of 10 votes\n        // at minimum, 30% of votes saying remove\n\n        if (removeOptionResult && okOptionResult && removeOptionResult.weight > 10\n            && (removeOptionResult.weight / (removeOptionResult.weight + okOptionResult.weight) > 0.3)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     *\n     * @param {VoteMessage} voteMessage\n     * @param {\"resources\".Proposal} proposal\n     * @param {number} currentBlock\n     * @param {number} weight\n     * @returns {Promise<\"resources\".Vote>}\n     */\n    private async createOrUpdateVote(voteMessage: VoteMessage, proposal: resources.Proposal, currentBlock: number,\n                                     weight: number): Promise<resources.Vote> {\n\n        let lastVote: any;\n        try {\n            const lastVoteModel = await this.voteService.findOneByVoterAndProposalId(voteMessage.voter, proposal.id);\n            lastVote = lastVoteModel.toJSON();\n        } catch (ex) {\n            lastVote = null;\n        }\n        const create: boolean = lastVote == null;\n\n        // create a vote\n        const voteRequest = await this.voteFactory.getModel(voteMessage, proposal, currentBlock, weight, create);\n\n        let voteModel;\n        if (create) {\n            // this.log.debug('Creating vote request = ' + JSON.stringify(voteRequest, null, 2));\n            voteModel = await this.voteService.create(voteRequest);\n        } else {\n            // this.log.debug(`Updating vote with id = ${lastVote.id}, vote request = ` + JSON.stringify(voteRequest, null, 2));\n            voteModel = await this.voteService.update(lastVote.id, voteRequest as VoteUpdateRequest);\n            // this.voteService.destroy(lastVote.id);\n            // voteModel = await this.voteService.create(voteRequest as VoteCreateRequest);\n        }\n        if (!voteModel) {\n            this.log.error('VoteActionService.createOrUpdateVote(): Vote wasn\\'t saved or updated properly. Return val is empty.');\n            throw new MessageException('Vote wasn\\'t saved or updated properly. Return val is empty.');\n        }\n        const vote = voteModel.toJSON();\n        return vote;\n    }\n\n    private configureEventListeners(): void {\n        this.log.info('Configuring EventListeners ');\n\n        this.eventEmitter.on(Events.VoteReceivedEvent, async (event) => {\n            this.log.debug('Received event:', JSON.stringify(event, null, 2));\n            await this.processVoteReceivedEvent(event)\n                .then(async status => {\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, status);\n                })\n                .catch(async reason => {\n                    this.log.error('PROCESSING ERROR: ', reason);\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, SmsgMessageStatus.PARSING_FAILED);\n                });\n        });\n    }\n}\n"]}