{"version":3,"file":"ListingItemActionService.js","sourceRoot":"","sources":["../../../src/api/services/ListingItemActionService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets, Events } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { ListingItem } from '../models/ListingItem';\nimport { MessagingInformationService } from './MessagingInformationService';\nimport { PaymentInformationService } from './PaymentInformationService';\nimport { ItemInformationService } from './ItemInformationService';\nimport { ItemCategoryService } from './ItemCategoryService';\nimport { ListingItemTemplatePostRequest } from '../requests/ListingItemTemplatePostRequest';\nimport { ListingItemUpdatePostRequest } from '../requests/ListingItemUpdatePostRequest';\nimport { ListingItemTemplateService } from './ListingItemTemplateService';\nimport { ListingItemFactory } from '../factories/ListingItemFactory';\nimport { SmsgService } from './SmsgService';\nimport { ListingItemObjectService } from './ListingItemObjectService';\nimport { NotImplementedException } from '../exceptions/NotImplementedException';\nimport * as resources from 'resources';\nimport { EventEmitter } from 'events';\nimport { MarketplaceMessage } from '../messages/MarketplaceMessage';\nimport { SmsgSendResponse } from '../responses/SmsgSendResponse';\nimport { MessageException } from '../exceptions/MessageException';\nimport { MarketplaceEvent } from '../messages/MarketplaceEvent';\nimport { ListingItemService } from './ListingItemService';\nimport { ActionMessageService } from './ActionMessageService';\nimport { ImageProcessing } from '../../core/helpers/ImageProcessing';\nimport { CoreRpcService } from './CoreRpcService';\nimport { ProposalMessage } from '../messages/ProposalMessage';\nimport { ProposalService } from './ProposalService';\nimport { ListingItemMessage } from '../messages/ListingItemMessage';\nimport { ProfileService } from './ProfileService';\nimport { MarketService } from './MarketService';\nimport { SmsgMessageStatus } from '../enums/SmsgMessageStatus';\nimport { SmsgMessageService } from './SmsgMessageService';\nimport { FlaggedItemCreateRequest } from '../requests/FlaggedItemCreateRequest';\nimport { FlaggedItem } from '../models/FlaggedItem';\nimport { FlaggedItemService } from './FlaggedItemService';\nimport { ImageVersions } from '../../core/helpers/ImageVersionEnumType';\n\nexport class ListingItemActionService {\n    private static FRACTION_TO_COMPRESS_BY = 0.6;\n    private static FRACTION_TO_RESIZE_IMAGE_BY = 0.6;\n    private static MAX_SMSG_SIZE = 400000; // TODO: Give these more accurate values\n    private static OVERHEAD_PER_SMSG = 0;\n    private static OVERHEAD_PER_IMAGE = 0;\n    private static MAX_RESIZES = 20;\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ItemInformationService) public itemInformationService: ItemInformationService,\n        @inject(Types.Service) @named(Targets.Service.ItemCategoryService) public itemCategoryService: ItemCategoryService,\n        @inject(Types.Service) @named(Targets.Service.PaymentInformationService) public paymentInformationService: PaymentInformationService,\n        @inject(Types.Service) @named(Targets.Service.MessagingInformationService) public messagingInformationService: MessagingInformationService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemTemplateService) public listingItemTemplateService: ListingItemTemplateService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemService) public listingItemService: ListingItemService,\n        @inject(Types.Service) @named(Targets.Service.ListingItemObjectService) public listingItemObjectService: ListingItemObjectService,\n        @inject(Types.Service) @named(Targets.Service.SmsgService) public smsgService: SmsgService,\n        @inject(Types.Service) @named(Targets.Service.ActionMessageService) public actionMessageService: ActionMessageService,\n        @inject(Types.Service) @named(Targets.Service.SmsgMessageService) public smsgMessageService: SmsgMessageService,\n        @inject(Types.Service) @named(Targets.Service.CoreRpcService) public coreRpcService: CoreRpcService,\n        @inject(Types.Service) @named(Targets.Service.ProposalService) public proposalService: ProposalService,\n        @inject(Types.Service) @named(Targets.Service.ProfileService) public profileService: ProfileService,\n        @inject(Types.Service) @named(Targets.Service.MarketService) public marketService: MarketService,\n        @inject(Types.Service) @named(Targets.Service.FlaggedItemService) private flaggedItemService: FlaggedItemService,\n        @inject(Types.Factory) @named(Targets.Factory.ListingItemFactory) private listingItemFactory: ListingItemFactory,\n        @inject(Types.Core) @named(Core.Events) public eventEmitter: EventEmitter,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n        this.configureEventListeners();\n    }\n\n    /**\n     * post a ListingItem based on a given ListingItem as ListingItemMessage\n     *\n     * @param data\n     * @returns {Promise<SmsgSendResponse>}\n     */\n    @validate()\n    public async post( @request(ListingItemTemplatePostRequest) data: ListingItemTemplatePostRequest): Promise<SmsgSendResponse> {\n\n        // fetch the listingItemTemplate\n        const itemTemplateModel = await this.listingItemTemplateService.findOne(data.listingItemTemplateId, true);\n        let itemTemplate = itemTemplateModel.toJSON();\n\n        // TODO: should validate that the template has the required info\n        // TODO: recalculate the template.hash in case the related data has changed\n\n        itemTemplate = await this.resizeTemplateImages(itemTemplate);\n        this.log.debug('images resized');\n\n        // this.log.debug('post template: ', JSON.stringify(itemTemplate, null, 2));\n        // get the templates profile address\n        const profileAddress = itemTemplate.Profile.address;\n\n        let marketModel;\n        if (!data.marketId) {\n            // fetch the market, will be used later with the broadcast\n            marketModel = await this.marketService.getDefault();\n        } else {\n            marketModel = await this.marketService.findOne(data.marketId);\n        }\n        const market: resources.Market = marketModel.toJSON();\n        this.log.debug('market:', market.id);\n\n        // todo: reason for this? to throw an exception unless category exists?!\n        // find itemCategory with related\n        const itemCategoryModel = await this.itemCategoryService.findOneByKey(itemTemplate.ItemInformation.ItemCategory.key, true);\n        const itemCategory = itemCategoryModel.toJSON();\n        // this.log.debug('itemCategory: ', JSON.stringify(itemCategory, null, 2));\n\n        // create and post the itemmessage\n        const listingItemMessage = await this.listingItemFactory.getMessage(itemTemplate);\n        const marketPlaceMessage = {\n            version: process.env.MARKETPLACE_VERSION,\n            item: listingItemMessage\n        } as MarketplaceMessage;\n\n        return await this.smsgService.smsgSend(profileAddress, market.address, marketPlaceMessage, true, data.daysRetention);\n    }\n\n    /**\n     * update a ListingItem based on a given ListingItem as ListingItemUpdateMessage\n     *\n     * @param data\n     * @returns {Promise<void>}\n     */\n    @validate()\n    public async updatePostItem( @request(ListingItemUpdatePostRequest) data: ListingItemUpdatePostRequest): Promise<void> {\n\n        // TODO: update not implemented/supported yet\n        throw new NotImplementedException();\n    }\n\n    /**\n     * processes received ListingItemMessage\n     *\n     * @param {MarketplaceEvent} event\n     * @returns {Promise<\"resources\".ListingItem>}\n     */\n    public async processListingItemReceivedEvent(event: MarketplaceEvent): Promise<SmsgMessageStatus> {\n\n        const smsgMessage: resources.SmsgMessage = event.smsgMessage;\n        const marketplaceMessage: MarketplaceMessage = event.marketplaceMessage;\n        const listingItemMessage: ListingItemMessage = marketplaceMessage.item as ListingItemMessage;\n\n        if (marketplaceMessage.market && marketplaceMessage.item) {\n\n            // get market\n            const marketModel = await this.marketService.findByAddress(marketplaceMessage.market);\n            const market = marketModel.toJSON();\n\n            // create the new custom categories in case there are some\n            const itemCategory: resources.ItemCategory = await this.itemCategoryService.createCategoriesFromArray(listingItemMessage.information.category);\n\n            // find the categories/get the root category with related\n            const rootCategoryWithRelatedModel: any = await this.itemCategoryService.findRoot();\n            const rootCategory = rootCategoryWithRelatedModel.toJSON();\n\n            const listingItemCreateRequest = await this.listingItemFactory.getModel(listingItemMessage, smsgMessage, market.id, rootCategory);\n            // this.log.debug('process(), listingItemCreateRequest:', JSON.stringify(listingItemCreateRequest, null, 2));\n\n            let listingItemModel = await this.listingItemService.create(listingItemCreateRequest);\n            let listingItem = listingItemModel.toJSON();\n\n            const proposal = await this.proposalService.findOneByItemHash(listingItem.hash)\n                .then(async proposalModel => {\n                    return proposalModel.toJSON();\n                })\n                .catch(reason => {\n                    return null;\n                });\n\n            if (proposal) {\n                // if proposal for the listingitem is found, create flaggeditem\n                const flaggedItem = await this.createFlaggedItemForProposal(proposal);\n                // this.log.debug('flaggedItem:', JSON.stringify(flaggedItem, null, 2));\n            }\n\n            // todo: there should be no need for these two updates, set the relations up in the createRequest\n            // update the template relation\n            await this.listingItemService.updateListingItemTemplateRelation(listingItem.id);\n\n            // todo: we could propably get rid of these actionmessages\n            const actionMessageModel = await this.actionMessageService.createFromMarketplaceEvent(event, listingItem);\n            const actionMessage = actionMessageModel.toJSON();\n            // this.log.debug('created actionMessage:', JSON.stringify(actionMessage, null, 2));\n\n            // this.log.debug('new ListingItem received: ' + JSON.stringify(listingItem));\n            listingItemModel = await this.listingItemService.findOne(listingItem.id);\n            listingItem = listingItemModel.toJSON();\n\n            this.log.debug('==> PROCESSED LISTINGITEM: ', listingItem.hash);\n            return SmsgMessageStatus.PROCESSED;\n\n        } else {\n            throw new MessageException('Marketplace message missing market.');\n        }\n    }\n\n    /**\n     *\n     * @param {module:resources.Proposal} proposal\n     * @returns {Promise<module:resources.FlaggedItem>}\n     */\n    public async createFlaggedItemForProposal(proposal: resources.Proposal): Promise<resources.FlaggedItem> {\n        // if listingitem exists && theres no relation -> add relation to listingitem\n\n        const listingItemModel = await this.listingItemService.findOneByHash(proposal.title);\n        const listingItem: resources.ListingItem = listingItemModel.toJSON();\n\n        const flaggedItemCreateRequest = {\n            listing_item_id: listingItem.id,\n            proposal_id: proposal.id,\n            reason: proposal.description\n        } as FlaggedItemCreateRequest;\n\n        const flaggedItemModel: FlaggedItem = await this.flaggedItemService.create(flaggedItemCreateRequest);\n        return flaggedItemModel.toJSON();\n    }\n\n    /**\n     *\n     * @param {\"resources\".ProposalResult} proposalResult\n     * @returns {Promise<boolean>}\n     */\n    private async shouldAddListingItem(proposalResult: resources.ProposalResult): Promise<boolean> {\n        const okOptionResult = _.find(proposalResult.ProposalOptionResults, (proposalOptionResult: resources.ProposalOptionResult) => {\n            return proposalOptionResult.ProposalOption.optionId === 0;\n        });\n        const removeOptionResult = _.find(proposalResult.ProposalOptionResults, (proposalOptionResult: resources.ProposalOptionResult) => {\n            return proposalOptionResult.ProposalOption.optionId === 1; // 1 === REMOVE\n        });\n\n        // Requirements to remove the ListingItem from the testnet marketplace, these should also be configurable:\n        // at minimum, a total of 10 votes\n        // at minimum, 30% of votes saying remove\n\n        if (removeOptionResult && okOptionResult && removeOptionResult.weight > 10\n            && (removeOptionResult.weight / (removeOptionResult.weight + okOptionResult.weight) > 0.3)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     *\n     * @param {\"resources\".ListingItemTemplate} itemTemplate\n     * @returns {Promise<\"resources\".ListingItemTemplate>}\n     */\n    private async resizeTemplateImages(itemTemplate: resources.ListingItemTemplate): Promise<resources.ListingItemTemplate> {\n\n        const itemImages = itemTemplate.ItemInformation.ItemImages;\n        // ItemInformation has ItemImages, which is an array.\n        // Each element in ItemImages has an array ItemImageDatas.\n        const sizePerImage = (ListingItemActionService.MAX_SMSG_SIZE - ListingItemActionService.OVERHEAD_PER_SMSG)\n            / itemImages.length - ListingItemActionService.OVERHEAD_PER_IMAGE;\n        for (const tmpIndexOfImages in itemImages) {\n            if (tmpIndexOfImages) {\n                let resizedImage;\n                let indexOfData;\n                {\n                    let foundOriginal = false;\n                    const itemImage = itemImages[tmpIndexOfImages];\n                    for (const tmpIndexOfData in itemImage.ItemImageDatas) {\n                        if (tmpIndexOfData\n                            && itemImage.ItemImageDatas[tmpIndexOfData].imageVersion === ImageVersions.ORIGINAL.propName) {\n                            resizedImage = itemImage.ItemImageDatas[tmpIndexOfData].ItemImageDataContent.data;\n                            foundOriginal = true;\n                            indexOfData = tmpIndexOfData;\n                            // this.log.error('Found original. Continuing...');\n                            break;\n                        }\n                    }\n                    if (!foundOriginal) {\n                        // this.log.error('Couldn\\'t find original. Skipping...');\n                        continue;\n                    }\n                }\n                let compressedImage = resizedImage;\n                for (let numResizings = 0; ;) {\n                    if (compressedImage.length <= sizePerImage) {\n                        break;\n                    }\n                    const compressedImage2 = await ImageProcessing.downgradeQuality(compressedImage, ListingItemActionService.FRACTION_TO_COMPRESS_BY);\n                    if (compressedImage.length !== compressedImage2.length) {\n                        /* We have not yet reached the limit of compression. */\n                        compressedImage = compressedImage2;\n                        continue;\n                    } else {\n                        ++numResizings;\n                        if (numResizings >= ListingItemActionService.MAX_RESIZES) {\n                            /* A generous number of resizes has happened but we haven't found a solution yet. Exit incase this is an infinite loop. */\n                            throw new MessageException('After ${numResizings} resizes we still didn\\'t compress the image enough.'\n                                + ' Image size = ${compressedImage.length}.');\n                        }\n                        /* we've reached the limit of compression. We need to resize the image for further size losses. */\n                        resizedImage = await ImageProcessing.resizeImageToFraction(resizedImage, ListingItemActionService.FRACTION_TO_RESIZE_IMAGE_BY);\n                        compressedImage = resizedImage;\n                        break;\n                    }\n                }\n                itemTemplate.ItemInformation.ItemImages[tmpIndexOfImages].ItemImageDatas[indexOfData].ItemImageDataContent.data = compressedImage;\n            }\n        }\n\n        return itemTemplate;\n    }\n\n    private configureEventListeners(): void {\n        this.log.info('Configuring EventListeners ');\n\n        this.eventEmitter.on(Events.ListingItemReceivedEvent, async (event) => {\n            this.log.debug('Received event, message type: ' + event.smsgMessage.type + ', msgid: ' + event.smsgMessage.msgid);\n            await this.processListingItemReceivedEvent(event)\n                .then(async status => {\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, status);\n                })\n                .catch(async reason => {\n                    this.log.debug('ERRORED event: ', JSON.stringify(event, null, 2));\n                    this.log.error('ERROR: ListingItemMessage processing failed.', reason);\n                    await this.smsgMessageService.updateSmsgMessageStatus(event.smsgMessage, SmsgMessageStatus.PROCESSING_FAILED);\n                });\n        });\n\n    }\n\n}\n"]}