{"version":3,"file":"EscrowService.js","sourceRoot":"","sources":["../../../src/api/services/EscrowService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Escrow } from '../models/Escrow';\nimport { EscrowRepository } from '../repositories/EscrowRepository';\nimport { EscrowCreateRequest } from '../requests/EscrowCreateRequest';\nimport { EscrowUpdateRequest } from '../requests/EscrowUpdateRequest';\nimport { EscrowRatioService } from '../services/EscrowRatioService';\nimport { AddressService } from '../services/AddressService';\n\nexport class EscrowService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.EscrowRepository) public escrowRepo: EscrowRepository,\n        @inject(Types.Service) @named(Targets.Service.EscrowRatioService) public escrowRatioService: EscrowRatioService,\n        @inject(Types.Service) @named(Targets.Service.AddressService) public addressService: AddressService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<Escrow>> {\n        return this.escrowRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Escrow> {\n        const escrow = await this.escrowRepo.findOne(id, withRelated);\n        if (escrow === null) {\n            this.log.warn(`Escrow with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return escrow;\n    }\n\n    @validate()\n    public async create( @request(EscrowCreateRequest) data: EscrowCreateRequest): Promise<Escrow> {\n\n        const body = JSON.parse(JSON.stringify(data));\n\n        const escrowRatio = body.ratio;\n        delete body.ratio;\n\n        // If the request body was valid we will create the escrow\n        const escrow = await this.escrowRepo.create(body);\n\n        // create related models, escrowRatio\n        if (!_.isEmpty(escrowRatio)) {\n            escrowRatio.escrow_id = escrow.Id;\n            await this.escrowRatioService.create(escrowRatio);\n        }\n\n        // finally find and return the created escrow\n        return await this.findOne(escrow.Id);\n    }\n\n    @validate()\n    public async update(id: number, @request(EscrowUpdateRequest) data: EscrowUpdateRequest): Promise<Escrow> {\n\n        const body = JSON.parse(JSON.stringify(data));\n\n        // find the existing one without related\n        const escrow = await this.findOne(id, false);\n\n        // set new values\n        escrow.Type = body.type;\n\n        // update escrow record\n        const updatedEscrow = await this.escrowRepo.update(id, escrow.toJSON());\n\n        // find related escrowratio\n        let relatedRatio = updatedEscrow.related('Ratio').toJSON();\n\n        // delete it\n        await this.escrowRatioService.destroy(relatedRatio.id);\n\n        // and create new related data\n        relatedRatio = body.ratio;\n        relatedRatio.escrow_id = id;\n        await this.escrowRatioService.create(relatedRatio);\n\n        // finally find and return the updated escrow\n        const newEscrow = await this.findOne(id);\n        return newEscrow;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.escrowRepo.destroy(id);\n    }\n\n}\n"]}