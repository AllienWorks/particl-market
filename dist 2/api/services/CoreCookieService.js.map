{"version":3,"file":"CoreCookieService.js","sourceRoot":"","sources":["../../../src/api/services/CoreCookieService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\n\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { Environment } from '../../core/helpers/Environment';\n\nimport * as os from 'os';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\n\n/**\n * Deals with Authentication.\n * particl-core: read the cookie file in a loop (singleton!)\n */\nexport class CoreCookieService {\n\n    public log: LoggerType;\n\n    private DEFAULT_CORE_USER = 'test';\n    private DEFAULT_CORE_PASSWORD = 'test';\n\n    private PATH_TO_COOKIE: string;\n\n    constructor(@inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType) {\n        this.log = new Logger(__filename);\n        this.getCookieLoop();\n    }\n\n    /**\n     * Returns either the default username or the one grabbed from the cookie file.\n     * Note: cookie username is basically always \"__cookie__\"\n     */\n    public getCoreRpcUsername(): string {\n        return this.DEFAULT_CORE_USER;\n    }\n\n    /**\n     * Returns either the default password or the one grabbed from the cookie file.\n     */\n    public getCoreRpcPassword(): string {\n        return this.DEFAULT_CORE_PASSWORD;\n    }\n\n    private getCookieLoop(): void {\n        try {\n            const cookie = this.getPathToCookie();\n\n            // we might not be running the particld locally so the cookie might not exists\n            if (cookie) {\n                fs.access(cookie, (error) => {\n                    if (!error) {\n                        // TODO: maybe add a silly level to the logger?\n                        // this.log.debug('cookie file exists!');\n                        fs.readFile(cookie, (err, data) => {\n                            if (err) {\n                                throw err;\n                            }\n                            // this.log.debug('cookie=', data.toString());\n                            const usernameAndPassword = data.toString().split(':', 2);\n\n                            // set username and password to cookie values\n                            this.DEFAULT_CORE_USER = usernameAndPassword[0];\n                            this.DEFAULT_CORE_PASSWORD = usernameAndPassword[1];\n                        });\n                    } else {\n                        // this.log.debug('cookie not found!', err);\n                    }\n                    return;\n                });\n\n                // grab the cookie every second\n                // cookie updates everytime that the daemon restarts\n                // so we need to keep on checking this due to\n                // wallet encryption procedure (will reboot the daemon)\n                const self = this;\n                setTimeout(() => {\n                    self.getCookieLoop();\n                }, 1000);\n            }\n\n        } catch ( ex ) {\n            this.log.debug('cookie error: ', ex);\n        }\n    }\n\n    private getPathToCookie(): string | null {\n        // Use the stored path instead..\n        if (this.PATH_TO_COOKIE) {\n            return this.PATH_TO_COOKIE;\n        }\n\n        const homeDir: string = os.homedir ? os.homedir() : process.env['HOME'];\n\n        let dir = '';\n        const appName = 'Particl';\n\n        switch (process.platform) {\n          case 'linux': {\n            dir = path.join(homeDir, '.' + appName.toLowerCase());\n            break;\n          }\n\n          case 'darwin': {\n            dir = path.join(homeDir, 'Library', 'Application Support', appName);\n            break;\n          }\n\n          case 'win32': {\n            const temp = path.join(process.env['APPDATA'], appName);\n            if (this.checkIfExists(temp)) {\n                dir = temp;\n            } else {\n                dir = path.join(homeDir, 'AppData', 'Roaming', appName);\n            }\n            break;\n          }\n        }\n\n        // just check if it exist so it logs an error just in case\n        if (this.checkIfExists(dir)) {\n            // return path to cookie\n            const cookiePath = path.join(dir, (Environment.isRegtest() ? 'regtest' : ( Environment.isTestnet() ? 'testnet' : '') ), '.cookie');\n            this.PATH_TO_COOKIE = cookiePath;\n            return cookiePath;\n        }\n\n        return null;\n    }\n\n    private checkIfExists(dir: string): boolean {\n        try {\n            fs.accessSync(dir, fs.constants.R_OK);\n            this.log.info('Found particl-core path', dir);\n            return true;\n        } catch (err) {\n            this.log.error('Could not find particl-core path!', dir);\n        }\n        return false;\n    }\n}\n"]}