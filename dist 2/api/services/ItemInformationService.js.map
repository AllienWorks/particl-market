{"version":3,"file":"ItemInformationService.js","sourceRoot":"","sources":["../../../src/api/services/ItemInformationService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ValidationException } from '../exceptions/ValidationException';\nimport { MessageException } from '../exceptions/MessageException';\n\nimport { ItemInformationRepository } from '../repositories/ItemInformationRepository';\nimport { ItemInformation } from '../models/ItemInformation';\nimport { ItemInformationCreateRequest } from '../requests/ItemInformationCreateRequest';\nimport { ItemInformationUpdateRequest } from '../requests/ItemInformationUpdateRequest';\nimport { ItemLocationService } from './ItemLocationService';\nimport { ItemImageService } from './ItemImageService';\nimport { ShippingDestinationService } from './ShippingDestinationService';\nimport { ListingItemTemplateRepository } from '../repositories/ListingItemTemplateRepository';\nimport { ItemCategoryService } from './ItemCategoryService';\nimport { ItemCategoryUpdateRequest } from '../requests/ItemCategoryUpdateRequest';\nimport { ItemCategory } from '../models/ItemCategory';\n\nexport class ItemInformationService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ItemCategoryService) public itemCategoryService: ItemCategoryService,\n        @inject(Types.Service) @named(Targets.Service.ItemImageService) public itemImageService: ItemImageService,\n        @inject(Types.Service) @named(Targets.Service.ShippingDestinationService) public shippingDestinationService: ShippingDestinationService,\n        @inject(Types.Service) @named(Targets.Service.ItemLocationService) public itemLocationService: ItemLocationService,\n        @inject(Types.Repository) @named(Targets.Repository.ItemInformationRepository) public itemInformationRepo: ItemInformationRepository,\n        @inject(Types.Repository) @named(Targets.Repository.ListingItemTemplateRepository) public listingItemTemplateRepository: ListingItemTemplateRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ItemInformation>> {\n        return this.itemInformationRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ItemInformation> {\n        const itemInformation = await this.itemInformationRepo.findOne(id, withRelated);\n        if (itemInformation === null) {\n            this.log.warn(`ItemInformation with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return itemInformation;\n    }\n\n    public async findByItemTemplateId(listingItemTemplateId: number, withRelated: boolean = true): Promise<ItemInformation> {\n        const itemInformation = await this.itemInformationRepo.findByItemTemplateId(listingItemTemplateId, withRelated);\n        if (itemInformation === null) {\n            this.log.warn(`ItemInformation with the listingItemTemplateId=${listingItemTemplateId} was not found!`);\n            throw new NotFoundException(listingItemTemplateId);\n        }\n        return itemInformation;\n    }\n\n    @validate()\n    public async create( @request(ItemInformationCreateRequest) data: ItemInformationCreateRequest): Promise<ItemInformation> {\n        const startTime = new Date().getTime();\n\n        const body = JSON.parse(JSON.stringify(data));\n\n        // this.log.debug('body: ', JSON.stringify(body, null, 2));\n\n        // ItemInformation needs to be related to either one\n        if (body.listing_item_id == null && body.listing_item_template_id == null) {\n            throw new ValidationException('Request body is not valid', ['listing_item_id or listing_item_template_id missing']);\n        }\n\n        // extract and remove related models from request\n        const itemCategory = body.itemCategory;\n        const itemLocation = body.itemLocation;\n        const shippingDestinations = body.shippingDestinations || [];\n        const itemImages = body.itemImages || [];\n        delete body.itemCategory;\n        delete body.itemLocation;\n        delete body.shippingDestinations;\n        delete body.itemImages;\n\n        // get existing item category or create new one\n        const existingItemCategory = await this.getOrCreateItemCategory(itemCategory);\n        body.item_category_id = existingItemCategory.Id;\n\n        // ready to save, if the request body was valid, create the itemInformation\n        const itemInformation = await this.itemInformationRepo.create(body);\n\n        // create related models\n        if (!_.isEmpty(itemLocation)) {\n            itemLocation.item_information_id = itemInformation.Id;\n            await this.itemLocationService.create(itemLocation);\n        }\n\n        for (const shippingDestination of shippingDestinations) {\n            shippingDestination.item_information_id = itemInformation.Id;\n            await this.shippingDestinationService.create(shippingDestination);\n        }\n\n        for (const itemImage of itemImages) {\n            itemImage.item_information_id = itemInformation.Id;\n            await this.itemImageService.create(itemImage);\n        }\n\n        // finally find and return the created itemInformation\n        const result = await this.findOne(itemInformation.Id);\n        // this.log.debug('itemInformationService.create: ' + (new Date().getTime() - startTime) + 'ms');\n\n        return result;\n    }\n\n    public async updateWithCheckListingTemplate(@request(ItemInformationUpdateRequest) body: ItemInformationUpdateRequest): Promise<ItemInformation> {\n        const listingItemTemplateId = body.listing_item_template_id;\n        const listingItemTemplate = await this.listingItemTemplateRepository.findOne(listingItemTemplateId);\n        const itemInformation = listingItemTemplate.related('ItemInformation').toJSON() || {};\n        if (_.isEmpty(itemInformation)) {\n            this.log.warn(`ItemInformation with the id=${listingItemTemplateId} not related with any listing-item-template!`);\n            throw new MessageException(`ItemInformation with the id=${listingItemTemplateId} not related with any listing-item-template!`);\n        }\n        return this.update(itemInformation.id, body);\n    }\n\n    @validate()\n    public async update(id: number, @request(ItemInformationUpdateRequest) data: ItemInformationUpdateRequest): Promise<ItemInformation> {\n\n        const body = JSON.parse(JSON.stringify(data));\n        // this.log.debug('updating ItemInformation, body: ', JSON.stringify(body, null, 2));\n\n        if (body.listing_item_id == null && body.listing_item_template_id == null) {\n            throw new ValidationException('Request body is not valid', ['listing_item_id or listing_item_template_id missing']);\n        }\n\n        // find the existing one without related\n        const itemInformation = await this.findOne(id, false);\n\n        // set new values\n        itemInformation.Title = body.title;\n        itemInformation.ShortDescription = body.shortDescription;\n        itemInformation.LongDescription = body.longDescription;\n        const itemInfoToSave = itemInformation.toJSON();\n\n        // get existing item category or create new one\n        const existingItemCategory = await this.getOrCreateItemCategory(body.itemCategory);\n        itemInfoToSave.item_category_id = existingItemCategory.Id;\n\n        // update itemInformation record\n        const updatedItemInformation = await this.itemInformationRepo.update(id, itemInfoToSave);\n\n        if (body.itemLocation) {\n            // find related record and delete it\n            let itemLocation = updatedItemInformation.related('ItemLocation').toJSON();\n            await this.itemLocationService.destroy(itemLocation.id);\n            // recreate related data\n            itemLocation = body.itemLocation;\n            itemLocation.item_information_id = id;\n            await this.itemLocationService.create(itemLocation);\n        }\n\n        // todo: instead of delete and create, update\n\n        // find related record and delete it\n        let shippingDestinations = updatedItemInformation.related('ShippingDestinations').toJSON();\n        for (const shippingDestination of shippingDestinations) {\n            await this.shippingDestinationService.destroy(shippingDestination.id);\n        }\n\n        // recreate related data\n        shippingDestinations = body.shippingDestinations || [];\n        for (const shippingDestination of shippingDestinations) {\n            shippingDestination.item_information_id = id;\n            await this.shippingDestinationService.create(shippingDestination);\n        }\n\n        // find related record and delete it\n        let itemImages = updatedItemInformation.related('ItemImages').toJSON() || [];\n        for (const itemImage of itemImages) {\n            await this.itemImageService.destroy(itemImage.id);\n        }\n\n        // recreate related data\n        itemImages = body.itemImages || [];\n        for (const itemImage of itemImages) {\n            itemImage.item_information_id = id;\n            await this.itemImageService.create(itemImage);\n        }\n\n        // finally find and return the updated itemInformation\n        const newItemInformation = await this.findOne(id);\n        return newItemInformation;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.itemInformationRepo.destroy(id);\n    }\n\n    /**\n     * fetch or create the given ItemCategory from db\n     * @param itemCategory\n     * @returns {Promise<ItemCategory>}\n     */\n    private async getOrCreateItemCategory(itemCategory: ItemCategoryUpdateRequest): Promise<ItemCategory> {\n        let result;\n        if (itemCategory.key) {\n            result = await this.itemCategoryService.findOneByKey(itemCategory.key);\n        } else if (itemCategory.id) {\n            result = await this.itemCategoryService.findOne(itemCategory.id);\n        } else {\n            result = await this.itemCategoryService.create(itemCategory);\n        }\n\n        return result;\n    }\n\n}\n"]}