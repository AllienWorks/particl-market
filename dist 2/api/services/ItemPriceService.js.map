{"version":3,"file":"ItemPriceService.js","sourceRoot":"","sources":["../../../src/api/services/ItemPriceService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ItemPriceRepository } from '../repositories/ItemPriceRepository';\nimport { ItemPrice } from '../models/ItemPrice';\nimport { ItemPriceCreateRequest } from '../requests/ItemPriceCreateRequest';\nimport { ItemPriceUpdateRequest } from '../requests/ItemPriceUpdateRequest';\nimport { ShippingPriceService } from './ShippingPriceService';\nimport { CryptocurrencyAddressService } from './CryptocurrencyAddressService';\nimport { CryptocurrencyAddressCreateRequest } from '../requests/CryptocurrencyAddressCreateRequest';\nimport { CryptocurrencyAddressUpdateRequest } from '../requests/CryptocurrencyAddressUpdateRequest';\nimport { ShippingPriceCreateRequest } from '../requests/ShippingPriceCreateRequest';\nimport { ShippingPriceUpdateRequest } from '../requests/ShippingPriceUpdateRequest';\n\nexport class ItemPriceService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.CryptocurrencyAddressService) private cryptocurrencyAddressService: CryptocurrencyAddressService,\n        @inject(Types.Service) @named(Targets.Service.ShippingPriceService) private shippingpriceService: ShippingPriceService,\n        @inject(Types.Repository) @named(Targets.Repository.ItemPriceRepository) public itemPriceRepo: ItemPriceRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ItemPrice>> {\n        return this.itemPriceRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ItemPrice> {\n        const itemPrice = await this.itemPriceRepo.findOne(id, withRelated);\n        if (itemPrice === null) {\n            this.log.warn(`ItemPrice with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return itemPrice;\n    }\n\n    @validate()\n    public async create( @request(ItemPriceCreateRequest) data: ItemPriceCreateRequest): Promise<ItemPrice> {\n\n        const body = JSON.parse(JSON.stringify(data));\n        const shippingPrice = body.shippingPrice || {};\n        const cryptocurrencyAddress = body.cryptocurrencyAddress || {};\n\n        delete body.shippingPrice;\n        delete body.cryptocurrencyAddress;\n\n        // create related models, cryptocurrencyAddress\n        if (!_.isEmpty(cryptocurrencyAddress)) {\n            if (cryptocurrencyAddress.id) {\n                body.cryptocurrency_address_id = cryptocurrencyAddress.id;\n            } else {\n                const relatedCryAddress = await this.cryptocurrencyAddressService.create(cryptocurrencyAddress as CryptocurrencyAddressCreateRequest);\n                body.cryptocurrency_address_id = relatedCryAddress.Id;\n            }\n        }\n\n        // create the itemPrice\n        const itemPrice = await this.itemPriceRepo.create(body);\n\n        // then create shippingPrice\n        if (!_.isEmpty(shippingPrice)) {\n            shippingPrice.item_price_id = itemPrice.Id;\n            await this.shippingpriceService.create(shippingPrice as ShippingPriceCreateRequest);\n        }\n        // finally find and return the created itemPrice\n        return await this.findOne(itemPrice.Id);\n    }\n\n    @validate()\n    public async update(id: number, @request(ItemPriceUpdateRequest) data: ItemPriceUpdateRequest): Promise<ItemPrice> {\n\n        const body = JSON.parse(JSON.stringify(data));\n\n        // find the existing one without related\n        const itemPrice = await this.findOne(id, false);\n\n        // set new values\n        itemPrice.Currency = body.currency;\n        itemPrice.BasePrice = body.basePrice;\n\n        // update itemPrice record\n        const updatedItemPrice = await this.itemPriceRepo.update(id, itemPrice.toJSON());\n\n        // find related ShippingPrice\n        let relatedShippingPrice = updatedItemPrice.related('ShippingPrice').toJSON() || {};\n        if (!_.isEmpty(relatedShippingPrice)) {\n            const shippingPriceId = relatedShippingPrice.id;\n            relatedShippingPrice = body.shippingPrice;\n            relatedShippingPrice.item_price_id = id;\n            await this.shippingpriceService.update(shippingPriceId, relatedShippingPrice as ShippingPriceUpdateRequest);\n        } else {\n            relatedShippingPrice = body.shippingPrice;\n            relatedShippingPrice.item_price_id = id;\n            await this.shippingpriceService.create(relatedShippingPrice as ShippingPriceCreateRequest);\n        }\n\n        // find related CryptocurrencyAddress\n        let relatedCryptocurrencyAddress = updatedItemPrice.related('CryptocurrencyAddress').toJSON() || {};\n\n        if (!_.isEmpty(relatedCryptocurrencyAddress)) {\n            const cryptocurrencyAddressId = relatedCryptocurrencyAddress.id;\n            relatedCryptocurrencyAddress = body.cryptocurrencyAddress;\n            relatedCryptocurrencyAddress.item_price_id = id;\n            await this.cryptocurrencyAddressService.update(cryptocurrencyAddressId, relatedCryptocurrencyAddress as CryptocurrencyAddressUpdateRequest);\n        } else {\n            relatedCryptocurrencyAddress = body.cryptocurrencyAddress;\n            relatedCryptocurrencyAddress.item_price_id = id;\n            await this.cryptocurrencyAddressService.create(relatedCryptocurrencyAddress as CryptocurrencyAddressCreateRequest);\n        }\n        // finally find and return the updated item price\n        const newItemPrice = await this.findOne(id);\n        return newItemPrice;\n    }\n\n    public async destroy(id: number): Promise<void> {\n\n        const itemPrice = await this.findOne(id);\n        const relatedCryptocurrencyAddress = itemPrice.related('CryptocurrencyAddress').toJSON();\n\n        await this.itemPriceRepo.destroy(id);\n        if (!_.isEmpty(relatedCryptocurrencyAddress.Profile)) {\n            await this.cryptocurrencyAddressService.destroy(relatedCryptocurrencyAddress.Id);\n        }\n    }\n}\n"]}