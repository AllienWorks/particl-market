{"version":3,"file":"ProfileService.js","sourceRoot":"","sources":["../../../src/api/services/ProfileService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ProfileRepository } from '../repositories/ProfileRepository';\nimport { Profile } from '../models/Profile';\nimport { ProfileCreateRequest } from '../requests/ProfileCreateRequest';\nimport { ProfileUpdateRequest } from '../requests/ProfileUpdateRequest';\nimport { AddressService } from './AddressService';\nimport { CryptocurrencyAddressService } from './CryptocurrencyAddressService';\nimport { CoreRpcService } from './CoreRpcService';\nimport { ShoppingCartService } from './ShoppingCartService';\nimport { AddressCreateRequest } from '../requests/AddressCreateRequest';\nimport { CryptocurrencyAddressCreateRequest } from '../requests/CryptocurrencyAddressCreateRequest';\nimport { CryptocurrencyAddressUpdateRequest } from '../requests/CryptocurrencyAddressUpdateRequest';\nimport { ShoppingCartCreateRequest } from '../requests/ShoppingCartCreateRequest';\nimport { SettingCreateRequest } from '../requests/SettingCreateRequest';\nimport { SettingService } from './SettingService';\n\nexport class ProfileService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.AddressService) public addressService: AddressService,\n        @inject(Types.Service) @named(Targets.Service.CryptocurrencyAddressService) public cryptocurrencyAddressService: CryptocurrencyAddressService,\n        @inject(Types.Service) @named(Targets.Service.ShoppingCartService) public shoppingCartService: ShoppingCartService,\n        @inject(Types.Service) @named(Targets.Service.SettingService) public settingService: SettingService,\n        @inject(Types.Service) @named(Targets.Service.CoreRpcService) public coreRpcService: CoreRpcService,\n        @inject(Types.Repository) @named(Targets.Repository.ProfileRepository) public profileRepo: ProfileRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async getDefault(withRelated: boolean = true): Promise<Profile> {\n        const profile = await this.profileRepo.getDefault(withRelated);\n        if (profile === null) {\n            this.log.warn(`Default Profile was not found!`);\n            throw new NotFoundException('DEFAULT');\n        }\n        return profile;\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<Profile>> {\n        return this.profileRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Profile> {\n        const profile = await this.profileRepo.findOne(id, withRelated);\n        if (profile === null) {\n            this.log.warn(`Profile with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return profile;\n    }\n\n    public async findOneByName(name: string, withRelated: boolean = true): Promise<Profile> {\n        const profile = await this.profileRepo.findOneByName(name, withRelated);\n        if (profile === null) {\n            this.log.warn(`Profile with the name=${name} was not found!`);\n            throw new NotFoundException(name);\n        }\n        return profile;\n    }\n\n    public async findOneByAddress(address: string, withRelated: boolean = true): Promise<Profile> {\n        const profile = await this.profileRepo.findOneByAddress(address, withRelated);\n        if (profile === null) {\n            this.log.warn(`Profile with the address=${address} was not found!`);\n            throw new NotFoundException(address);\n        }\n        return profile;\n    }\n\n    @validate()\n    public async create( @request(ProfileCreateRequest) data: ProfileCreateRequest): Promise<Profile> {\n        const body = JSON.parse(JSON.stringify(data));\n\n        if ( !body.address ) {\n            body.address = await this.getNewAddress();\n        }\n\n        // extract and remove related models from request\n        const shippingAddresses = body.shippingAddresses || [];\n        delete body.shippingAddresses;\n        const cryptocurrencyAddresses = body.cryptocurrencyAddresses || [];\n        delete body.cryptocurrencyAddresses;\n        const settings = body.settings || [];\n        delete body.settings;\n\n        // If the request body was valid we will create the profile\n        const profile = await this.profileRepo.create(body);\n        // then create related models\n        for (const address of shippingAddresses) {\n            address.profile_id = profile.Id;\n            await this.addressService.create(address as AddressCreateRequest);\n        }\n\n        for (const cryptoAddress of cryptocurrencyAddresses) {\n            cryptoAddress.profile_id = profile.Id;\n            await this.cryptocurrencyAddressService.create(cryptoAddress as CryptocurrencyAddressCreateRequest);\n        }\n\n        for (const setting of settings) {\n            setting.profile_id = profile.Id;\n            await this.settingService.create(setting as SettingCreateRequest);\n        }\n\n        const shoppingCartData = {\n            name: 'DEFAULT',\n            profile_id: profile.Id\n        };\n\n        // create default shoppingCart\n        const defaultShoppingCart = await this.shoppingCartService.create(shoppingCartData as ShoppingCartCreateRequest);\n        // finally find and return the created profileId\n        const newProfile = await this.findOne(profile.Id);\n        return newProfile;\n    }\n\n    public async getNewAddress(): Promise<string> {\n        const newAddress = await this.coreRpcService.getNewAddress()\n            .then( async (res) => {\n                this.log.info('Successfully created new address for profile: ' + res);\n                return res;\n            })\n            .catch(async (reason) => {\n                this.log.warn('Could not create new address for profile: ' + reason);\n                return 'ERROR_NO_ADDRESS';\n            });\n        this.log.debug('new address: ', newAddress );\n        return newAddress;\n    }\n\n    @validate()\n    public async update(id: number, @request(ProfileUpdateRequest) data: any): Promise<Profile> {\n\n        const body = JSON.parse(JSON.stringify(data));\n\n        // find the existing one without related\n        const profile = await this.findOne(id, false);\n\n        // set new values\n        profile.Name = body.name;\n\n        // update address only if its set\n        if (body.address) {\n            profile.Address = body.address;\n        }\n\n        // update profile\n        const updatedProfile = await this.profileRepo.update(id, profile.toJSON());\n        this.log.debug('updatedProfile: ', updatedProfile.toJSON());\n\n        // remove existing addresses\n        const addressesToDelete = profile.toJSON().ShippingAddresses || [];\n        for (const address of addressesToDelete) {\n            await this.addressService.destroy(address.id);\n        }\n\n        // update related data\n        const shippingAddresses = body.shippingAddresses || [];\n\n        // add new addresses\n        for (const address of shippingAddresses) {\n            address.profile_id = id;\n            await this.addressService.create(address as AddressCreateRequest);\n        }\n\n        const cryptocurrencyAddresses = body.cryptocurrencyAddresses || [];\n        for (const cryptoAddress of cryptocurrencyAddresses) {\n            if (cryptoAddress.profile_id) {\n                await this.cryptocurrencyAddressService.update(cryptoAddress.id, cryptoAddress as CryptocurrencyAddressUpdateRequest);\n            } else {\n                cryptoAddress.profile_id = id;\n                await this.cryptocurrencyAddressService.create(cryptoAddress as CryptocurrencyAddressCreateRequest);\n            }\n        }\n\n        // finally find and return the updated itemInformation\n        const newProfile = await this.findOne(id);\n        return newProfile;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.profileRepo.destroy(id);\n    }\n\n}\n"]}