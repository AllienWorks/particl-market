{"version":3,"file":"VoteService.js","sourceRoot":"","sources":["../../../src/api/services/VoteService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { VoteRepository } from '../repositories/VoteRepository';\nimport { Vote } from '../models/Vote';\nimport { VoteCreateRequest } from '../requests/VoteCreateRequest';\nimport { VoteUpdateRequest } from '../requests/VoteUpdateRequest';\n\nexport class VoteService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.VoteRepository) public voteRepo: VoteRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<Vote>> {\n        return this.voteRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Vote> {\n        const vote = await this.voteRepo.findOne(id, withRelated);\n        if (vote === null) {\n            this.log.warn(`Vote with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return vote;\n    }\n\n    public async findOneByVoterAndProposalId(voter: string, proposalId: number, withRelated: boolean = true): Promise<Vote> {\n        const vote = await this.voteRepo.findOneByVoterAndProposalId(voter, proposalId, withRelated);\n        if (!vote) {\n            this.log.warn(`Vote with the voter=${voter} and proposalId=${proposalId} was not found!`);\n            throw new NotFoundException(proposalId);\n        }\n        return vote;\n    }\n\n    @validate()\n    public async create( @request(VoteCreateRequest) data: VoteCreateRequest): Promise<Vote> {\n\n        const body = JSON.parse(JSON.stringify(data));\n        // this.log.debug('create Vote, body: ', JSON.stringify(body, null, 2));\n\n        const vote = await this.voteRepo.create(body);\n\n        // finally find and return the created vote\n        const newVote = await this.findOne(vote.id);\n        return newVote;\n    }\n\n    @validate()\n    public async update(id: number, @request(VoteUpdateRequest) body: VoteUpdateRequest): Promise<Vote> {\n\n        // find the existing one without related\n        const vote = await this.findOne(id, false);\n\n        // set new values\n        vote.set('voter', body.voter);\n        vote.set('block', body.block);\n        vote.set('weight', body.weight);\n        vote.set('proposalOptionId', body.proposal_option_id);\n\n        // update vote record\n        const updatedVote = await this.voteRepo.update(id, vote.toJSON());\n        return updatedVote;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.voteRepo.destroy(id);\n    }\n\n}\n"]}