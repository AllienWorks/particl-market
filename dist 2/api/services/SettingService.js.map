{"version":3,"file":"SettingService.js","sourceRoot":"","sources":["../../../src/api/services/SettingService.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAE1C,+CAAuD;AACvD,sDAA4D;AAC5D,uEAAoE;AACpE,yEAAsE;AAEtE,2EAAwE;AACxE,2EAAwE;AAGxE,IAAa,cAAc,GAA3B;IAII,YACkF,WAA8B,EAC7D,MAAyB;QADM,gBAAW,GAAX,WAAW,CAAmB;QAC7D,WAAM,GAAN,MAAM,CAAmB;QAExE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAEY,OAAO;;YAChB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;QACtC,CAAC;KAAA;IAEY,kBAAkB,CAAC,SAAiB,EAAE,cAAuB,IAAI;;YAC1E,MAAM,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAC7E,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU,EAAE,cAAuB,IAAI;;YACxD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YAChE,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,uBAAuB,EAAE,iBAAiB,CAAC,CAAC;gBAC1D,MAAM,IAAI,qCAAiB,CAAC,EAAE,CAAC,CAAC;YACpC,CAAC;YACD,MAAM,CAAC,OAAO,CAAC;QACnB,CAAC;KAAA;IAEY,wBAAwB,CAAC,GAAW,EAAE,SAAiB,EAAE,cAAuB,IAAI;;YAC7F,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,wBAAwB,CAAC,GAAG,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;YAC7F,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,wBAAwB,GAAG,kBAAkB,SAAS,iBAAiB,CAAC,CAAC;gBACvF,MAAM,IAAI,qCAAiB,CAAC,GAAG,GAAG,OAAO,GAAG,SAAS,CAAC,CAAC;YAC3D,CAAC;YACD,MAAM,CAAC,OAAO,CAAC;QACnB,CAAC;KAAA;IAGY,MAAM,CAAiC,IAA0B;;YAE1E,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAE9C,2DAA2D;YAC3D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAEpD,8CAA8C;YAC9C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,UAAU,CAAC;QACtB,CAAC;KAAA;IAGY,MAAM,CAAC,EAAU,EAAiC,IAA0B;;YAErF,wCAAwC;YACxC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAE9C,iBAAiB;YACjB,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;YACvB,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YAE3B,wBAAwB;YACxB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;YAE3E,MAAM,CAAC,cAAc,CAAC;QAC1B,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU;;YAC3B,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACvC,CAAC;KAAA;IAEY,wBAAwB,CAAC,GAAW,EAAE,SAAiB;;YAChE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;YACpE,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACnC,CAAC;KAAA;CACJ,CAAA;AApCG;IADC,mBAAQ,EAAE;IACW,mBAAA,kBAAO,CAAC,2CAAoB,CAAC,CAAA;;6CAAO,2CAAoB;;4CAU7E;AAGD;IADC,mBAAQ,EAAE;IACsB,mBAAA,kBAAO,CAAC,2CAAoB,CAAC,CAAA;;qDAAO,2CAAoB;;4CAaxF;AAhEQ,cAAc;IAKlB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,UAAU,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAA;IACrE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CADoD,qCAAiB;GALvG,cAAc,CA0E1B;AA1EY,wCAAc","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { SettingRepository } from '../repositories/SettingRepository';\nimport { Setting } from '../models/Setting';\nimport { SettingCreateRequest } from '../requests/SettingCreateRequest';\nimport { SettingUpdateRequest } from '../requests/SettingUpdateRequest';\n\n\nexport class SettingService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.SettingRepository) public settingRepo: SettingRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<Setting>> {\n        return this.settingRepo.findAll();\n    }\n\n    public async findAllByProfileId(profileId: number, withRelated: boolean = true): Promise<Bookshelf.Collection<Setting>> {\n        return await this.settingRepo.findAllByProfileId(profileId, withRelated);\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Setting> {\n        const setting = await this.settingRepo.findOne(id, withRelated);\n        if (setting === null) {\n            this.log.warn(`Setting with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return setting;\n    }\n\n    public async findOneByKeyAndProfileId(key: string, profileId: number, withRelated: boolean = true): Promise<Setting> {\n        const setting = await this.settingRepo.findOneByKeyAndProfileId(key, profileId, withRelated);\n        if (setting === null) {\n            this.log.warn(`Setting with the key=${key} and profileId ${profileId} was not found!`);\n            throw new NotFoundException(key + ' and ' + profileId);\n        }\n        return setting;\n    }\n\n    @validate()\n    public async create( @request(SettingCreateRequest) data: SettingCreateRequest): Promise<Setting> {\n\n        const body = JSON.parse(JSON.stringify(data));\n\n        // If the request body was valid we will create the setting\n        const setting = await this.settingRepo.create(body);\n\n        // finally find and return the created setting\n        const newSetting = await this.findOne(setting.id);\n        return newSetting;\n    }\n\n    @validate()\n    public async update(id: number, @request(SettingUpdateRequest) body: SettingUpdateRequest): Promise<Setting> {\n\n        // find the existing one without related\n        const setting = await this.findOne(id, false);\n\n        // set new values\n        setting.Key = body.key;\n        setting.Value = body.value;\n\n        // update setting record\n        const updatedSetting = await this.settingRepo.update(id, setting.toJSON());\n\n        return updatedSetting;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.settingRepo.destroy(id);\n    }\n\n    public async destroyByKeyAndProfileId(key: string, profileId: number): Promise<void> {\n        const setting = await this.findOneByKeyAndProfileId(key, profileId);\n        await this.destroy(setting.id);\n    }\n}\n"]}