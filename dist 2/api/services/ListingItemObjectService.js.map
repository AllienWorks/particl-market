{"version":3,"file":"ListingItemObjectService.js","sourceRoot":"","sources":["../../../src/api/services/ListingItemObjectService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ValidationException } from '../exceptions/ValidationException';\nimport { ListingItemObjectRepository } from '../repositories/ListingItemObjectRepository';\nimport { ListingItemObject } from '../models/ListingItemObject';\nimport { ListingItemObjectData } from '../models/ListingItemObjectData';\nimport { ListingItemObjectCreateRequest } from '../requests/ListingItemObjectCreateRequest';\nimport { ListingItemObjectDataCreateRequest } from '../requests/ListingItemObjectDataCreateRequest';\nimport { ListingItemObjectUpdateRequest } from '../requests/ListingItemObjectUpdateRequest';\nimport { RpcRequest } from '../requests/RpcRequest';\nimport { ListingItemObjectSearchParams } from '../requests/ListingItemObjectSearchParams';\n\nimport { ListingItemObjectDataService } from './ListingItemObjectDataService';\n\nexport class ListingItemObjectService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ListingItemObjectDataService) private listingItemObjectDataService: ListingItemObjectDataService,\n        @inject(Types.Repository) @named(Targets.Repository.ListingItemObjectRepository) public listingItemObjectRepo: ListingItemObjectRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ListingItemObject>> {\n        return this.listingItemObjectRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ListingItemObject> {\n        const listingItemObject = await this.listingItemObjectRepo.findOne(id, withRelated);\n        if (listingItemObject === null) {\n            this.log.warn(`ListingItemObject with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return listingItemObject;\n    }\n\n    /**\n     * search ListingItemObject using given ListingItemObjectSearchParams\n     *\n     * @param options\n     * @returns {Promise<Bookshelf.Collection<ListingItemObject>>}\n     */\n    @validate()\n    public async search(\n        @request(ListingItemObjectSearchParams) options: ListingItemObjectSearchParams): Promise<Bookshelf.Collection<ListingItemObject>> {\n        return this.listingItemObjectRepo.search(options);\n    }\n\n    @validate()\n    public async create( @request(ListingItemObjectCreateRequest) data: ListingItemObjectCreateRequest): Promise<ListingItemObject> {\n        const startTime = new Date().getTime();\n\n        const body = JSON.parse(JSON.stringify(data));\n        // todo: could this be annotated in ListingItemObjectCreateRequest?\n        if (body.listing_item_id == null && body.listing_item_template_id == null) {\n            throw new ValidationException('Request body is not valid', ['listing_item_id or listing_item_template_id missing']);\n        }\n\n        // extract and remove related models from request\n        const listingItemObjectDatas = body.listingItemObjectDatas || [];\n        delete body.listingItemObjectDatas;\n\n        // If the request body was valid we will create the listingItemObject\n        const listingItemObject = await this.listingItemObjectRepo.create(body);\n\n        for (const objectData of listingItemObjectDatas) {\n            objectData.listing_item_object_id = listingItemObject.Id;\n            await this.listingItemObjectDataService.create(objectData as ListingItemObjectDataCreateRequest);\n        }\n\n        // finally find and return the created listingItemObject\n        const newListingItemObject = await this.findOne(listingItemObject.id);\n\n        this.log.debug('listingItemObjectService.create: ' + (new Date().getTime() - startTime) + 'ms');\n        return newListingItemObject;\n    }\n\n    @validate()\n    public async update(id: number, @request(ListingItemObjectUpdateRequest) data: ListingItemObjectUpdateRequest): Promise<ListingItemObject> {\n\n        const body = JSON.parse(JSON.stringify(data));\n\n        // todo: messy\n        if (body.listing_item_id == null && body.listing_item_template_id == null) {\n            throw new ValidationException('Request body is not valid', ['listing_item_id or listing_item_template_id missing']);\n        }\n\n        // find the existing one without relatedb\n        const listingItemObject = await this.findOne(id, false);\n\n        // set new values\n        listingItemObject.Type = body.type;\n        listingItemObject.Description = body.description;\n        listingItemObject.Order = body.order;\n\n        // update listingItemObjectDatas\n        const listingItemObjectJSON = listingItemObject.toJSON();\n        const listingItemObjectDatasOld = listingItemObjectJSON.ListingItemObjectDatas || [];\n        const objectDataIds: number[] = [];\n\n        for (const objectData of listingItemObjectDatasOld) {\n            objectDataIds.push(objectData.id);\n        }\n\n        for (const objectDataId of objectDataIds) {\n            await this.listingItemObjectDataService.destroy(objectDataId);\n        }\n\n        const listingItemObjectDatas = body.listingItemObjectDatas || [];\n\n        for (const objectData of listingItemObjectDatas) {\n            objectData.listing_item_object_id = listingItemObject.Id;\n            await this.listingItemObjectDataService.create(objectData as ListingItemObjectDataCreateRequest);\n        }\n\n        // update listingItemObject record\n        const updatedListingItemObject = await this.listingItemObjectRepo.update(id, listingItemObject.toJSON());\n\n        return updatedListingItemObject;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.listingItemObjectRepo.destroy(id);\n    }\n}\n\n"]}