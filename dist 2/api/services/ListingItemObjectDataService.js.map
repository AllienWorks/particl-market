{"version":3,"file":"ListingItemObjectDataService.js","sourceRoot":"","sources":["../../../src/api/services/ListingItemObjectDataService.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAE1C,+CAAuD;AACvD,sDAA4D;AAC5D,uEAAoE;AACpE,qGAAkG;AAElG,uGAAoG;AACpG,uGAAoG;AAGpG,IAAa,4BAA4B,GAAzC;IAII,YACgG,yBAA0D,EACvG,MAAyB;QADoB,8BAAyB,GAAzB,yBAAyB,CAAiC;QACvG,WAAM,GAAN,MAAM,CAAmB;QAExE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAEY,OAAO;;YAChB,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,OAAO,EAAE,CAAC;QACpD,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU,EAAE,cAAuB,IAAI;;YACxD,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YAC5F,EAAE,CAAC,CAAC,qBAAqB,KAAK,IAAI,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,qCAAqC,EAAE,iBAAiB,CAAC,CAAC;gBACxE,MAAM,IAAI,qCAAiB,CAAC,EAAE,CAAC,CAAC;YACpC,CAAC;YACD,MAAM,CAAC,qBAAqB,CAAC;QACjC,CAAC;KAAA;IAGY,MAAM,CAA+C,IAAwC;;YAEtG,yEAAyE;YACzE,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAEhF,MAAM,wBAAwB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;YAC9E,MAAM,CAAC,wBAAwB,CAAC;QACpC,CAAC;KAAA;IAGY,MAAM,CAAC,EAAU,EAA+C,IAAwC;;YAEjH,wCAAwC;YACxC,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAE5D,iBAAiB;YACjB,qBAAqB,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;YACrC,qBAAqB,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YAEzC,sCAAsC;YACtC,MAAM,4BAA4B,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,EAAE,EAAE,qBAAqB,CAAC,MAAM,EAAE,CAAC,CAAC;YAErH,MAAM,CAAC,4BAA4B,CAAC;QACxC,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU;;YAC3B,MAAM,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACrD,CAAC;KAAA;CAEJ,CAAA;AA7BG;IADC,mBAAQ,EAAE;IACW,mBAAA,kBAAO,CAAC,uEAAkC,CAAC,CAAA;;6CAAO,uEAAkC;;0DAOzG;AAGD;IADC,mBAAQ,EAAE;IACsB,mBAAA,kBAAO,CAAC,uEAAkC,CAAC,CAAA;;qDAAO,uEAAkC;;0DAapH;AAhDQ,4BAA4B;IAKhC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,UAAU,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAA;IACnF,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CADgF,iEAA+B;GALjJ,4BAA4B,CAsDxC;AAtDY,oEAA4B","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { ListingItemObjectDataRepository } from '../repositories/ListingItemObjectDataRepository';\nimport { ListingItemObjectData } from '../models/ListingItemObjectData';\nimport { ListingItemObjectDataCreateRequest } from '../requests/ListingItemObjectDataCreateRequest';\nimport { ListingItemObjectDataUpdateRequest } from '../requests/ListingItemObjectDataUpdateRequest';\n\n\nexport class ListingItemObjectDataService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.ListingItemObjectDataRepository) public listingItemObjectDataRepo: ListingItemObjectDataRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ListingItemObjectData>> {\n        return this.listingItemObjectDataRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ListingItemObjectData> {\n        const listingItemObjectData = await this.listingItemObjectDataRepo.findOne(id, withRelated);\n        if (listingItemObjectData === null) {\n            this.log.warn(`ListingItemObjectData with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return listingItemObjectData;\n    }\n\n    @validate()\n    public async create( @request(ListingItemObjectDataCreateRequest) body: ListingItemObjectDataCreateRequest): Promise<ListingItemObjectData> {\n\n        // If the request body was valid we will create the listingItemObjectData\n        const listingItemObjectData = await this.listingItemObjectDataRepo.create(body);\n\n        const newListingItemObjectData = await this.findOne(listingItemObjectData.id);\n        return newListingItemObjectData;\n    }\n\n    @validate()\n    public async update(id: number, @request(ListingItemObjectDataUpdateRequest) body: ListingItemObjectDataUpdateRequest): Promise<ListingItemObjectData> {\n\n        // find the existing one without related\n        const listingItemObjectData = await this.findOne(id, false);\n\n        // set new values\n        listingItemObjectData.Key = body.key;\n        listingItemObjectData.Value = body.value;\n\n        // update listingItemObjectData record\n        const updatedListingItemObjectData = await this.listingItemObjectDataRepo.update(id, listingItemObjectData.toJSON());\n\n        return updatedListingItemObjectData;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.listingItemObjectDataRepo.destroy(id);\n    }\n\n}\n"]}