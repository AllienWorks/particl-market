{"version":3,"file":"ShoppingCartItemService.js","sourceRoot":"","sources":["../../../src/api/services/ShoppingCartItemService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { validate, request } from '../../core/api/Validate';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { MessageException } from '../exceptions/MessageException';\nimport { ShoppingCartItemRepository } from '../repositories/ShoppingCartItemRepository';\nimport { ShoppingCartItem } from '../models/ShoppingCartItem';\nimport { ShoppingCartItemCreateRequest } from '../requests/ShoppingCartItemCreateRequest';\nimport { ShoppingCartItemUpdateRequest } from '../requests/ShoppingCartItemUpdateRequest';\n\n\nexport class ShoppingCartItemService {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Repository) @named(Targets.Repository.ShoppingCartItemRepository) public shoppingCartItemRepo: ShoppingCartItemRepository,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ShoppingCartItem>> {\n        return this.shoppingCartItemRepo.findAll();\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ShoppingCartItem> {\n        const shoppingCartItem = await this.shoppingCartItemRepo.findOne(id, withRelated);\n        if (shoppingCartItem === null) {\n            this.log.warn(`ShoppingCartItem with the id=${id} was not found!`);\n            throw new NotFoundException(id);\n        }\n        return shoppingCartItem;\n    }\n\n    public async findOneByCartIdAndListingItemId(cartId: number, listingItemId: number): Promise<ShoppingCartItem> {\n        return await this.shoppingCartItemRepo.findOneByCartIdAndListingItemId(cartId, listingItemId);\n    }\n\n    public async findAllByCartId(cartId: number): Promise<Bookshelf.Collection<ShoppingCartItem>> {\n        return await this.shoppingCartItemRepo.findAllByCartId(cartId);\n    }\n\n    @validate()\n    public async create( @request(ShoppingCartItemCreateRequest) body: any): Promise<ShoppingCartItem> {\n\n        // check that listingItems already added or not\n        const isItemExistOnCart = await this.findOneByCartIdAndListingItemId(body.shopping_cart_id, body.listing_item_id);\n\n        if (isItemExistOnCart !== null) {\n            this.log.warn(`ListingItem already exist in ShoppingCart`);\n            throw new MessageException(`ListingItem already exist in ShoppingCart`);\n        }\n\n        // If the request body was valid we will create the shoppingCartItem\n        const shoppingCartItem = await this.shoppingCartItemRepo.create(body);\n\n        // finally find and return the created shoppingCartItem\n        const newShoppingCartItem = await this.findOne(shoppingCartItem.id);\n        return newShoppingCartItem;\n    }\n\n    @validate()\n    public async update(id: number, @request(ShoppingCartItemUpdateRequest) body: any): Promise<ShoppingCartItem> {\n\n        // find the existing one without related\n        const shoppingCartItem = await this.findOne(id, false);\n\n        // set new values\n\n        // update shoppingCartItem record\n        const updatedShoppingCartItem = await this.shoppingCartItemRepo.update(id, shoppingCartItem.toJSON());\n\n        // return newShoppingCartItem;\n\n        return updatedShoppingCartItem;\n    }\n\n    public async destroy(id: number): Promise<void> {\n        await this.shoppingCartItemRepo.destroy(id);\n    }\n\n    // TODO: rename to destroyByCartId and add clearCart method to ShoppingCartService, it doesn't make sense to look\n    // TODO: for a method called clearCart in ShoppingCartItemService.\n    public async clearCart(cartId: number): Promise<void> {\n        await this.shoppingCartItemRepo.clearCart(cartId);\n    }\n\n}\n"]}