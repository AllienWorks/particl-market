{"version":3,"file":"ProposalFactory.js","sourceRoot":"","sources":["../../../src/api/factories/ProposalFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { ProposalMessage } from '../messages/ProposalMessage';\nimport { ProposalMessageType } from '../enums/ProposalMessageType';\nimport * as resources from 'resources';\nimport {ProposalType} from '../enums/ProposalType';\nimport {ObjectHash} from '../../core/helpers/ObjectHash';\nimport {HashableObjectType} from '../enums/HashableObjectType';\nimport {ProposalCreateRequest} from '../requests/ProposalCreateRequest';\nimport {ProposalOptionCreateRequest} from '../requests/ProposalOptionCreateRequest';\nimport {MessageException} from '../exceptions/MessageException';\n\nexport class ProposalFactory {\n\n    public log: LoggerType;\n\n    constructor(@inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType) {\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     *\n     * @param {BidMessageType} bidMessageType\n     * @param {string} itemHash\n     * @param {IdValuePair[]} idValuePairObjects\n     * @returns {Promise<BidMessage>}\n     */\n    public async getMessage(proposalMessageType: ProposalMessageType, proposalTitle: string,\n                            proposalDescription: string, blockStart: number, blockEnd: number, options: string[],\n                            senderProfile: resources.Profile, itemHash: string | null = null): Promise<ProposalMessage> {\n\n        const submitter = senderProfile.address;\n\n        const optionsList: any[] = [];\n        let optionId = 0;\n\n        for (const description of options) {\n            const option = {\n                optionId,\n                description\n            };\n            optionsList.push(option);\n            optionId++;\n        }\n\n        let proposalType = ProposalType.PUBLIC_VOTE;\n        if (itemHash) {\n            proposalType = ProposalType.ITEM_VOTE;\n        }\n\n        const message: ProposalMessage = {\n            action: proposalMessageType,\n            submitter,\n            blockStart,\n            blockEnd,\n            title: proposalTitle,\n            description: proposalDescription,\n            options: optionsList,\n            type: proposalType,\n            item: itemHash\n        } as ProposalMessage;\n\n        message.hash = ObjectHash.getHash(message, HashableObjectType.PROPOSAL_MESSAGE);\n\n        // add hashes for the options too\n        for (const option of message.options) {\n            option.proposalHash = message.hash;\n            option.hash = ObjectHash.getHash(option, HashableObjectType.PROPOSALOPTION_CREATEREQUEST);\n        }\n        return message;\n    }\n\n    /**\n     *\n     * @param {ProposalMessage} proposalMessage\n     * @returns {Promise<ProposalCreateRequest>}\n     */\n    public async getModel(proposalMessage: ProposalMessage, smsgMessage: resources.SmsgMessage): Promise<ProposalCreateRequest> {\n\n        const proposalCreateRequest = {\n            submitter: proposalMessage.submitter,\n            blockStart: proposalMessage.blockStart,\n            blockEnd: proposalMessage.blockEnd,\n            hash: proposalMessage.hash,\n            type: proposalMessage.type,\n            title: proposalMessage.title,\n            description: proposalMessage.description,\n            item: proposalMessage.item,\n            expiryTime: smsgMessage.daysretention,\n            postedAt: smsgMessage.sent,\n            expiredAt: smsgMessage.expiration,\n            receivedAt: smsgMessage.received,\n            options: proposalMessage.options as ProposalOptionCreateRequest[]\n        } as ProposalCreateRequest;\n\n        const correctHash = ObjectHash.getHash(proposalCreateRequest, HashableObjectType.PROPOSAL_CREATEREQUEST);\n        if (correctHash !== proposalCreateRequest.hash) {\n            throw new MessageException(`Received proposal hash <${proposalCreateRequest.hash}> doesn't match actual hash <${correctHash}>.`);\n        }\n\n        return proposalCreateRequest;\n    }\n\n}\n"]}