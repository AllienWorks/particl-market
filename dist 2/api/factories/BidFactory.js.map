{"version":3,"file":"BidFactory.js","sourceRoot":"","sources":["../../../src/api/factories/BidFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { BidMessage } from '../messages/BidMessage';\nimport { BidMessageType } from '../enums/BidMessageType';\nimport { MessageException } from '../exceptions/MessageException';\nimport { BidCreateRequest } from '../requests/BidCreateRequest';\nimport * as resources from 'resources';\nimport { AddressCreateRequest } from '../requests/AddressCreateRequest';\nimport { BidDataCreateRequest } from '../requests/BidDataCreateRequest';\nimport { IdValuePair } from '../services/BidActionService';\n\nexport class BidFactory {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     *\n     * @param {BidMessageType} bidMessageType\n     * @param {string} itemHash\n     * @param {IdValuePair[]} idValuePairObjects\n     * @returns {Promise<BidMessage>}\n     */\n    public async getMessage(bidMessageType: BidMessageType, itemHash: string, idValuePairObjects?: IdValuePair[]): Promise<BidMessage> {\n\n        const message = {\n            action: bidMessageType,\n            item: itemHash,\n            objects: idValuePairObjects\n        } as BidMessage;\n\n        return message;\n    }\n\n    /**\n     * create a BidCreateRequest\n     *\n     * @param {BidMessage} bidMessage\n     * @param {number} listingItemId\n     * @param {string} bidder\n     * @param {\"resources\".Bid} latestBid\n     * @returns {Promise<BidCreateRequest>}\n     */\n    public async getModel(bidMessage: BidMessage, listingItemId: number, bidder: string, latestBid?: resources.Bid): Promise<BidCreateRequest> {\n\n        if (!listingItemId) {\n            throw new MessageException('Invalid listingItemId.');\n        }\n\n        // todo: implement part address validator and validate\n        if (!bidder && typeof bidder !== 'string') {\n            throw new MessageException('Invalid bidder.');\n        }\n\n        // check that the bidAction is valid, throw if not\n        if (this.checkBidMessageActionValidity(bidMessage, latestBid)) {\n            const bidDataValues = {};\n\n            // copy the existing key-value pairs from latestBid.BidDatas\n            if (latestBid && latestBid.BidDatas) {\n                for (const bidData of latestBid.BidDatas) {\n                    bidDataValues[bidData.dataId] = bidData.dataValue;\n                }\n            }\n\n            // copy the new key-value pairs from bidMessage overriding the old if some exist\n            if (bidMessage.objects) {\n                for (const bidData of bidMessage.objects) {\n                    bidDataValues[bidData.id] = bidData.value;\n                }\n            }\n\n            // create bidDataCreateRequests\n            const bidDatas = Object.keys(bidDataValues).map( (key) => {\n                return {\n                    dataId: key,\n                    dataValue: bidDataValues[key]\n                } as BidDataCreateRequest;\n            });\n\n            // this.log.debug('bidDatas:', JSON.stringify(bidDatas, null, 2));\n\n            let address;\n            if (bidMessage.action === BidMessageType.MPA_BID) {\n                const firstName = this.getValueFromBidDatas('ship.firstName', bidDatas);\n                const lastName = this.getValueFromBidDatas('ship.lastName', bidDatas);\n                const addressLine1 = this.getValueFromBidDatas('ship.addressLine1', bidDatas);\n                const addressLine2 = this.getValueFromBidDatas('ship.addressLine2', bidDatas);\n                const city = this.getValueFromBidDatas('ship.city', bidDatas);\n                const state = this.getValueFromBidDatas('ship.state', bidDatas);\n                const zipCode = this.getValueFromBidDatas('ship.zipCode', bidDatas);\n                const country = this.getValueFromBidDatas('ship.country', bidDatas);\n\n                address = {\n                    firstName, lastName, addressLine1, addressLine2, city, state, zipCode, country\n                } as AddressCreateRequest;\n            }\n\n            // create and return the request that can be used to create the bid\n            const bidCreateRequest = {\n                address,\n                listing_item_id: listingItemId,\n                action: bidMessage.action,\n                bidder,\n                bidDatas\n            } as BidCreateRequest;\n\n            return bidCreateRequest;\n\n        } else {\n            throw new MessageException('Invalid BidMessageType.');\n        }\n    }\n\n    /**\n     * Checks if the action in the given BidMessage is valid for the latest bid\n     *\n     * @param bidMessage\n     * @param latestBid\n     * @returns {boolean}\n     */\n    private checkBidMessageActionValidity(bidMessage: BidMessage, latestBid?: resources.Bid): boolean {\n        if (latestBid) {\n            switch (latestBid.action) {\n                case BidMessageType.MPA_BID.toString():\n                    // if the latest bid was allready bidded on, then the message needs to be something else\n                    return bidMessage.action !== BidMessageType.MPA_BID.toString();\n                case BidMessageType.MPA_ACCEPT.toString():\n                    // latest bid was allready accepted, any bid is invalid\n                    return false;\n                case BidMessageType.MPA_CANCEL.toString():\n                    // latest bid was cancelled, so we allow only new bids\n                    return bidMessage.action === BidMessageType.MPA_BID.toString();\n                case BidMessageType.MPA_REJECT.toString():\n                    // latest bid was rejected, so we allow only new bids\n                    return bidMessage.action === BidMessageType.MPA_BID.toString();\n            }\n        } else if (bidMessage.action === BidMessageType.MPA_BID.toString()) {\n            // if no existing bid and message is MPA_BID -> true\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * todo: refactor duplicate code\n     * @param {string} key\n     * @param {\"resources\".BidData[]} bidDatas\n     * @returns {any}\n     */\n    private getValueFromBidDatas(key: string, bidDatas: BidDataCreateRequest[]): string {\n        const value = bidDatas.find(kv => kv.dataId === key);\n        if ( value ) {\n            return value.dataValue;\n        } else {\n            this.log.error('Missing BidData value for key: ' + key);\n            throw new MessageException('Missing BidData value for key: ' + key);\n        }\n    }\n}\n"]}