{"version":3,"file":"ImageFactory.js","sourceRoot":"","sources":["../../../src/api/factories/ImageFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { ItemCategoryFactory } from './ItemCategoryFactory';\nimport { ImageProcessing } from '../../core/helpers/ImageProcessing';\nimport { ImageVersion } from '../../core/helpers/ImageVersion';\nimport { ItemImageDataCreateRequest } from '../requests/ItemImageDataCreateRequest';\nimport { ImageVersions } from '../../core/helpers/ImageVersionEnumType';\nimport { MessageException } from '../exceptions/MessageException';\nimport * as _ from 'lodash';\n\nexport class ImageFactory {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType,\n        @inject(Types.Factory) @named(Targets.Factory.ItemCategoryFactory) private itemCategoryFactory: ItemCategoryFactory\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * creates ItemImageDataCreateRequests for the required image versions from the original image data\n     *\n     * @param {number} itemImageId\n     * @param {ItemImageDataCreateRequest} originalImageData\n     * @param {ImageVersion[]} toVersions\n     * @returns {Promise<ItemImageDataCreateRequest[]>}\n     */\n    public async getImageDatas(\n        itemImageId: number,\n        originalImageData: ItemImageDataCreateRequest,\n        toVersions: ImageVersion[]\n    ): Promise<ItemImageDataCreateRequest[]> {\n\n        if ( !originalImageData.data ) {\n            throw new MessageException('image data was empty.');\n        }\n        let originalData: string;\n        let startTime = new Date().getTime();\n        try {\n            originalData = await ImageProcessing.convertToJPEG(originalImageData.data);\n            this.log.debug('ImageProcessing.convertToJPEG: ' + (new Date().getTime() - startTime) + 'ms');\n        } catch ( ex ) {\n            throw ex;\n        }\n        // this.log.debug('originalData: ', originalData);\n        startTime = new Date().getTime();\n        const resizedDatas: Map<string, string> = await ImageProcessing.resizeImageData(originalData, toVersions);\n        this.log.debug('ImageProcessing.resizeImageData: ' + (new Date().getTime() - startTime) + 'ms');\n\n        // this.log.debug('resizedDatas: ', resizedDatas);\n\n        const imageDatas: ItemImageDataCreateRequest[] = [];\n\n        // first create the original\n        const imageDataForOriginal = {\n            item_image_id: itemImageId,\n            dataId: this.getImageUrl(itemImageId, ImageVersions.ORIGINAL.propName),\n            protocol: originalImageData.protocol,\n            imageVersion: ImageVersions.ORIGINAL.propName,\n            encoding: originalImageData.encoding,\n            originalMime: originalImageData.originalMime,\n            originalName: originalImageData.originalName,\n            data: originalData\n        } as ItemImageDataCreateRequest;\n        imageDatas.push(imageDataForOriginal);\n\n        for (const version of toVersions) {\n            const imageData = {\n                item_image_id: itemImageId,\n                dataId: this.getImageUrl(itemImageId, version.propName),\n                protocol: originalImageData.protocol,\n                imageVersion: version.propName,\n                encoding: originalImageData.encoding,\n                originalMime: originalImageData.originalMime,\n                originalName: originalImageData.originalName,\n                data: resizedDatas.get(version.propName)\n            } as ItemImageDataCreateRequest;\n            imageDatas.push(imageData);\n        }\n        return imageDatas;\n    }\n\n    public getImageUrl(itemImageId: number, version: string): string {\n        return process.env.APP_HOST\n            + (process.env.APP_PORT ? ':' + process.env.APP_PORT : '')\n            + '/api/item-images/' + itemImageId + '/' + version;\n    }\n\n}\n"]}