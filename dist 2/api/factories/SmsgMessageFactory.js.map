{"version":3,"file":"SmsgMessageFactory.js","sourceRoot":"","sources":["../../../src/api/factories/SmsgMessageFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport * as resources from 'resources';\nimport { SmsgMessageCreateRequest } from '../requests/SmsgMessageCreateRequest';\nimport { MarketplaceMessage } from '../messages/MarketplaceMessage';\nimport { MessageException } from '../exceptions/MessageException';\nimport { EscrowMessageType } from '../enums/EscrowMessageType';\nimport { BidMessageType } from '../enums/BidMessageType';\nimport { VoteMessageType } from '../enums/VoteMessageType';\nimport { ListingItemMessageType } from '../enums/ListingItemMessageType';\nimport { ProposalMessageType } from '../enums/ProposalMessageType';\nimport { SmsgMessageStatus } from '../enums/SmsgMessageStatus';\nimport { IncomingSmsgMessage } from '../messages/IncomingSmsgMessage';\n\ntype AllowedMessageTypes = EscrowMessageType | BidMessageType | ListingItemMessageType | ProposalMessageType | VoteMessageType | string;\n\nexport class SmsgMessageFactory {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async get(message: IncomingSmsgMessage): Promise<SmsgMessageCreateRequest> {\n\n        return await this.parseJSONSafe(message.text)\n            .then( marketplaceMessage => {\n\n                const type = this.getType(marketplaceMessage);\n                const status = SmsgMessageStatus.NEW;\n\n                const createRequest = {\n                    type,\n                    status,\n                    msgid: message.msgid,\n                    version: message.version,\n                    read: message.read,\n                    paid: message.paid,\n                    payloadsize: message.payloadsize,\n                    received: message.received * 1000,\n                    sent: message.sent * 1000,\n                    expiration: message.expiration * 1000,\n                    daysretention: message.daysretention,\n                    from: message.from,\n                    to: message.to,\n                    text: message.text\n                } as SmsgMessageCreateRequest;\n\n                return createRequest;\n            })\n            .catch(reason => {\n                const type = 'UNKNOWN';\n                const status = SmsgMessageStatus.PARSING_FAILED;\n\n                const createRequest = {\n                    type,\n                    status,\n                    msgid: message.msgid,\n                    version: message.version,\n                    read: message.read,\n                    paid: message.paid,\n                    payloadsize: message.payloadsize,\n                    received: message.received * 1000,\n                    sent: message.sent * 1000,\n                    expiration: message.expiration * 1000,\n                    daysretention: message.daysretention,\n                    from: message.from,\n                    to: message.to,\n                    text: message.text\n                } as SmsgMessageCreateRequest;\n\n                return createRequest;\n            });\n    }\n\n    public async getMarketplaceMessage(message: resources.SmsgMessage): Promise<MarketplaceMessage | null> {\n\n        return await this.parseJSONSafe(message.text)\n            .then( marketplaceMessage => {\n                return marketplaceMessage;\n            })\n            .catch(reason => {\n                return null;\n            });\n    }\n\n    private async parseJSONSafe(json: string): Promise<MarketplaceMessage> {\n        let parsed: MarketplaceMessage;\n        try {\n            // this.log.debug('json to parse:', json);\n            parsed = JSON.parse(json);\n        } catch (e) {\n            this.log.error('parseJSONSafe, invalid JSON:', json);\n            throw new MessageException('Could not parse the incoming message.');\n        }\n        return parsed;\n    }\n\n    private getType(marketplaceMessage: MarketplaceMessage): AllowedMessageTypes {\n\n        if (marketplaceMessage.item) {\n            // in case of ListingItemMessage\n            // todo: later we need to add support for other ListingItemMessageTypes\n            // todo: actually the structure of ListingItemMessage should be the same as others\n            return ListingItemMessageType.MP_ITEM_ADD;\n        } else if (marketplaceMessage.mpaction) {\n            // in case of ActionMessage\n            return marketplaceMessage.mpaction.action;\n        } else {\n            // json object, but not something that we're expecting\n            this.log.warn('Unexpected message, unable to get MessageType: ', JSON.stringify(marketplaceMessage, null, 2));\n            throw new MessageException('Could not get the message type.');\n        }\n    }\n\n}\n"]}