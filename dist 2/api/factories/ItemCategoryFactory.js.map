{"version":3,"file":"ItemCategoryFactory.js","sourceRoot":"","sources":["../../../src/api/factories/ItemCategoryFactory.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF,yCAA0C;AAE1C,4BAA4B;AAE5B,+CAAuD;AAKvD,uEAAkE;AAElE,IAAa,mBAAmB,GAAhC;IAKI,YACmD,MAAyB;QAAzB,WAAM,GAAN,MAAM,CAAmB;QAExE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;OAOG;IACU,QAAQ,CAAC,QAAgC;;YAClD,MAAM,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC9C,CAAC;KAAA;IAED;;;;;OAKG;IACU,QAAQ,CAAC,aAAuB,EAAE,YAAoC;;YAC/E,GAAG,CAAC,CAAC,MAAM,iBAAiB,IAAI,aAAa,CAAC,CAAC,CAAC;gBAC5C,YAAY,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC;YAC5E,CAAC;YACD,MAAM,CAAC;gBACH,uBAAuB,EAAE,YAAY,CAAC,oBAAoB;gBAC1D,GAAG,EAAE,YAAY,CAAC,GAAG;gBACrB,IAAI,EAAE,YAAY,CAAC,IAAI;gBACvB,WAAW,EAAE,YAAY,CAAC,WAAW;aACX,CAAC;QACnC,CAAC;KAAA;IAED;;;;;;OAMG;IACW,YAAY,CAAC,YAAoC,EAAE,SAAiB;;YAE9E,EAAE,CAAC,CAAC,YAAY,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;gBACjC,YAAY;gBACZ,MAAM,CAAC,YAAY,CAAC;YACxB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,kCAAkC;gBAClC,MAAM,eAAe,GAAG,YAAY,CAAC,mBAAmB,CAAC;gBACzD,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,aAAa;oBAChD,MAAM,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,SAAS,IAAI,aAAa,CAAC,MAAM,CAAC,KAAK,SAAS,CAAC,CAAC;gBACvF,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,IAAI,qCAAiB,CAAC,SAAS,CAAC,CAAC;gBAC3C,CAAC;YACL,CAAC;QACL,CAAC;KAAA;IAED;;;;;OAKG;IACW,aAAa,CAAC,QAAgC,EAAE,gBAA0B,EAAE;;YAEtF,6CAA6C;YAC7C,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAEpC,4DAA4D;YAC5D,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;gBAC1C,MAAM,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC;YAChF,CAAC;YACD,MAAM,CAAC,aAAa,CAAC;QACzB,CAAC;KAAA;CACJ,CAAA;AApFY,mBAAmB;IAMvB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;;GANlC,mBAAmB,CAoF/B;AApFY,kDAAmB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport * as crypto from 'crypto-js';\nimport * as _ from 'lodash';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { ItemCategory } from '../models/ItemCategory';\nimport { MessageException } from '../exceptions/MessageException';\nimport { ItemCategoryCreateRequest } from '../requests/ItemCategoryCreateRequest';\nimport * as resources from 'resources';\nimport {NotFoundException} from '../exceptions/NotFoundException';\n\nexport class ItemCategoryFactory {\n\n    public log: LoggerType;\n    private isFound: boolean;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     * Converts a category to an array of category keys\n     * ['rootcatkey', 'subcatkey', ..., 'catkey']\n     *\n     * @param category : resources.ItemCategory\n     * @param rootCategoryWithRelated : resources.ItemCategory\n     * @returns {Promise<string[]>}\n     */\n    public async getArray(category: resources.ItemCategory): Promise<string[]> {\n        return await this.getArrayInner(category);\n    }\n\n    /**\n     *\n     * @param {string[]} categoryArray\n     * @param {\"resources\".ItemCategory} rootCategory\n     * @returns {Promise<\"resources\".ItemCategory>}\n     */\n    public async getModel(categoryArray: string[], rootCategory: resources.ItemCategory): Promise<ItemCategoryCreateRequest> {\n        for (const categoryKeyOrName of categoryArray) {\n            rootCategory = await this.findCategory(rootCategory, categoryKeyOrName);\n        }\n        return {\n            parent_item_category_id: rootCategory.parentItemCategoryId,\n            key: rootCategory.key,\n            name: rootCategory.name,\n            description: rootCategory.description\n        } as ItemCategoryCreateRequest;\n    }\n\n    /**\n     * return the ChildCategory having the given key or name\n     *\n     * @param {\"resources\".ItemCategory} rootCategory\n     * @param {string} keyOrName\n     * @returns {Promise<\"resources\".ItemCategory>}\n     */\n    private async findCategory(rootCategory: resources.ItemCategory, keyOrName: string): Promise<resources.ItemCategory> {\n\n        if (rootCategory.key === keyOrName) {\n            // root case\n            return rootCategory;\n        } else {\n            // search the children for a match\n            const childCategories = rootCategory.ChildItemCategories;\n            const found = _.find(childCategories, (childCategory) => {\n                return (childCategory['key'] === keyOrName || childCategory['name'] === keyOrName);\n            });\n            if (found) {\n                return found;\n            } else {\n                throw new NotFoundException(keyOrName);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {\"resources\".ItemCategory} category\n     * @param {string[]} categoryArray\n     * @returns {Promise<string[]>}\n     */\n    private async getArrayInner(category: resources.ItemCategory, categoryArray: string[] = []): Promise<string[]> {\n\n        // add category key to beginning of the array\n        categoryArray.unshift(category.key);\n\n        // if category has ParentItemCategory, add it's key to array\n        if (!_.isEmpty(category.ParentItemCategory)) {\n            return await this.getArrayInner(category.ParentItemCategory, categoryArray);\n        }\n        return categoryArray;\n    }\n}\n"]}