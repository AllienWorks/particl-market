{"version":3,"file":"EscrowFactory.js","sourceRoot":"","sources":["../../../src/api/factories/EscrowFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { EscrowMessage } from '../messages/EscrowMessage';\nimport { EscrowMessageType } from '../enums/EscrowMessageType';\nimport * as resources from 'resources';\nimport { EscrowRequest } from '../requests/EscrowRequest';\nimport { NotImplementedException } from '../exceptions/NotImplementedException';\n\nexport class EscrowFactory {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n\n    /**\n     * Factory which will create an EscrowMessage\n     *\n     * @param request, EscrowLockRequest | EscrowRefundRequest | EscrowReleaseRequest\n     * @param escrow\n     * @param address\n     *\n     * @returns {EscrowMessage}\n     */\n    public async getMessage(request: EscrowRequest, rawtx: string): Promise<EscrowMessage> {\n\n        // TODO: validity check\n        // this.checkEscrowActionValidity(request.action, escrow);\n\n        switch (request.action) {\n            case EscrowMessageType.MPA_LOCK:\n                return await this.getLockMessage(request, rawtx);\n\n            case EscrowMessageType.MPA_RELEASE:\n                return await this.getReleaseMessage(request, rawtx);\n\n            case EscrowMessageType.MPA_REFUND:\n                return await this.getRefundMessage(request, rawtx);\n\n            default:\n                throw new NotImplementedException();\n        }\n    }\n\n    /**\n     * Factory will return model based on the message\n     *\n     * @param data\n     * @returns {Escrow}\n     */\n    public getModel(data: EscrowMessage): resources.Escrow {\n\n        // TODO:\n        return {} as resources.Escrow;\n    }\n\n    /**\n     * creates the EscrowMessage for EscrowLockRequest\n     *\n     * @param lockRequest\n     * @param escrow\n     * @returns {EscrowMessage}\n     */\n    private async getLockMessage(request: EscrowRequest, rawtx: string): Promise<EscrowMessage> {\n\n\n        return {\n            action: request.action,\n            item: request.orderItem.itemHash,\n            nonce: request.nonce,\n            info: {\n                memo: request.memo\n            },\n            escrow: {\n                type: 'lock',\n                rawtx\n            }\n        } as EscrowMessage;\n    }\n\n    /**\n     * creates the EscrowMessage for EscrowReleaseRequest\n     *\n     * @param releaseRequest\n     * @param escrow\n     */\n    private async getReleaseMessage(request: EscrowRequest, rawtx: string): Promise<EscrowMessage> {\n\n        return {\n            action: request.action,\n            item: request.orderItem.itemHash,\n            memo: request.memo,\n            escrow: {\n                type: 'release',\n                rawtx\n            }\n        } as EscrowMessage;\n    }\n\n    /**\n     * creates the EscrowMessage for EscrowRefundRequest\n     *\n     * @param refundRequest\n     * @param escrow\n     */\n    private async getRefundMessage(request: EscrowRequest, rawtx: string): Promise<EscrowMessage> {\n\n        return {\n            action: request.action,\n            item: request.orderItem.itemHash,\n            accepted: request.accepted,\n            memo: request.memo,\n            escrow: {\n                type: 'refund',\n                rawtx\n            }\n        } as EscrowMessage;\n    }\n\n    /**\n     * Checks if the escrowAction is allowed for the given escrow\n     *\n     * @param escrowAction\n     * @param escrow\n     * @returns {boolean}\n     */\n    private checkEscrowActionValidity(escrowAction: EscrowMessageType, escrow?: resources.Escrow): boolean {\n        let isValid = true;\n        // TODO: implement\n        if (!isValid) {\n            isValid = false;\n            // throw new MessageException('Action is not valid for the Escrow');\n        }\n        return isValid;\n    }\n}\n"]}