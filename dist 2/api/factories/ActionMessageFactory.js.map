{"version":3,"file":"ActionMessageFactory.js","sourceRoot":"","sources":["../../../src/api/factories/ActionMessageFactory.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAE1C,+CAAuD;AACvD,4DAAyD;AAQzD,kEAA+D;AAC/D,mFAAgF;AAGhF,4EAAyE;AAEzE,sEAAmE;AAGnE,8DAA2D;AAE3D,IAAa,oBAAoB,GAAjC;IAII,YACmD,MAAyB;QAAzB,WAAM,GAAN,MAAM,CAAmB;QAExE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAEY,QAAQ,CAAC,OAAiF,EACjF,aAAqB,EAAE,WAAkC;;YAE3E,IAAI,0BAAsD,CAAC;YAC3D,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;YAEnD,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBACrB,KAAK,+CAAsB,CAAC,WAAW;oBACnC,MAAM,kBAAkB,GAAG,OAAgC,CAAC;oBAC5D,MAAM,kBAAkB,GAAG,IAAI,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;oBAC3E,0BAA0B,GAAG;wBACzB,eAAe,EAAE,aAAa;wBAC9B,MAAM,EAAE,kBAAkB,CAAC,MAAM,CAAC,QAAQ,EAAE;wBAC5C,OAAO,EAAE,kBAAkB;wBAC3B,IAAI;qBACuB,CAAC;oBAChC,KAAK,CAAC;gBAEV,KAAK,+BAAc,CAAC,OAAO,CAAC;gBAC5B,KAAK,+BAAc,CAAC,UAAU,CAAC;gBAC/B,KAAK,+BAAc,CAAC,UAAU,CAAC;gBAC/B,KAAK,+BAAc,CAAC,UAAU;oBAC1B,MAAM,UAAU,GAAG,OAAqB,CAAC;oBACzC,MAAM,OAAO,GAAG,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;oBACxD,0BAA0B,GAAG;wBACzB,eAAe,EAAE,aAAa;wBAC9B,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE;wBACpC,OAAO;wBACP,IAAI;qBACuB,CAAC;oBAChC,KAAK,CAAC;gBAEV,KAAK,qCAAiB,CAAC,QAAQ,CAAC;gBAChC,KAAK,qCAAiB,CAAC,kBAAkB,CAAC;gBAC1C,KAAK,qCAAiB,CAAC,UAAU,CAAC;gBAClC,KAAK,qCAAiB,CAAC,WAAW;oBAC9B,MAAM,aAAa,GAAG,OAAwB,CAAC;oBAE/C,8EAA8E;oBAC9E,EAAE,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;wBACrB,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;4BACtB,aAAa,CAAC,IAAI,GAAG,EAAE,CAAC;wBAC5B,CAAC;wBACD,aAAa,CAAC,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC;oBACjD,CAAC;oBAED,0BAA0B,GAAG;wBACzB,eAAe,EAAE,aAAa;wBAC9B,MAAM,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE;wBACvC,KAAK,EAAE,aAAa,CAAC,KAAK;wBAC1B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,aAAa,CAAC,IAAgC;wBACpD,MAAM,EAAE,aAAa,CAAC,MAAoC;wBAC1D,IAAI;qBACuB,CAAC;oBAChC,KAAK,CAAC;gBACV,KAAK,yCAAmB,CAAC,eAAe,CAAC;gBACrC,kBAAkB;gBAClB,sDAAsD;gBACtD,iCAAiC;gBACjC,mCAAmC;gBACnC,SAAS;gBACb,KAAK,iCAAe,CAAC,OAAO,CAAC;gBACzB,kBAAkB;gBACtB;oBACI,MAAM,IAAI,iDAAuB,CAAC,8BAA8B,CAAC,CAAC;YAC1E,CAAC;YAED,MAAM,CAAC,0BAA0B,CAAC;QACtC,CAAC;KAAA;IAEO,sBAAsB,CAAC,UAA8C;QACzE,MAAM,cAAc,GAAiC,EAAE,CAAC;QACxD,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YACrB,GAAG,CAAC,CAAC,MAAM,aAAa,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC7C,MAAM,aAAa,GAAG;oBAClB,MAAM,EAAE,aAAa,CAAC,EAAE;oBACxB,SAAS,EAAE,aAAa,CAAC,KAAK;iBACH,CAAC;gBAChC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACvC,CAAC;QACL,CAAC;QACD,MAAM,CAAC,cAAc,CAAC;IAC1B,CAAC;IAEO,mBAAmB,CAAC,WAAkC;QAC1D,MAAM,CAAC;YACH,KAAK,EAAE,WAAW,CAAC,KAAK;YACxB,OAAO,EAAE,WAAW,CAAC,OAAO;YAC5B,QAAQ,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;YACxC,IAAI,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;YAChC,IAAI,EAAE,WAAW,CAAC,IAAI;YACtB,EAAE,EAAE,WAAW,CAAC,EAAE;SACO,CAAC;IAElC,CAAC;CACJ,CAAA;AA1GY,oBAAoB;IAKxB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;;GALlC,oBAAoB,CA0GhC;AA1GY,oDAAoB","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { BidMessageType } from '../enums/BidMessageType';\nimport { ActionMessageCreateRequest } from '../requests/ActionMessageCreateRequest';\nimport * as resources from 'resources';\nimport { ActionMessageInterface } from '../messages/ActionMessageInterface';\nimport { MessageInfoCreateRequest } from '../requests/MessageInfoCreateRequest';\nimport { MessageEscrowCreateRequest } from '../requests/MessageEscrowCreateRequest';\nimport { MessageDataCreateRequest } from '../requests/MessageDataCreateRequest';\nimport { MessageObjectCreateRequest } from '../requests/MessageObjectCreateRequest';\nimport { EscrowMessageType } from '../enums/EscrowMessageType';\nimport { InternalServerException } from '../exceptions/InternalServerException';\nimport { BidMessage } from '../messages/BidMessage';\nimport { EscrowMessage } from '../messages/EscrowMessage';\nimport { ListingItemMessageType } from '../enums/ListingItemMessageType';\nimport { ListingItemAddMessage } from '../messages/ListingItemAddMessage';\nimport { ProposalMessageType } from '../enums/ProposalMessageType';\nimport { ProposalMessageInterface } from '../messages/ProposalMessageInterface';\nimport { VoteMessageInterface } from '../messages/VoteMessageInterface';\nimport { VoteMessageType } from '../enums/VoteMessageType';\n\nexport class ActionMessageFactory {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async getModel(message: ActionMessageInterface | ProposalMessageInterface | VoteMessageInterface,\n                          listingItemId: number, smsgMessage: resources.SmsgMessage): Promise<ActionMessageCreateRequest> {\n\n        let actionMessageCreateRequest: ActionMessageCreateRequest;\n        const data = this.getModelMessageData(smsgMessage);\n\n        switch (message.action) {\n            case ListingItemMessageType.MP_ITEM_ADD:\n                const listingItemMessage = message as ListingItemAddMessage;\n                const listingItemobjects = this.getModelMessageObjects(listingItemMessage);\n                actionMessageCreateRequest = {\n                    listing_item_id: listingItemId,\n                    action: listingItemMessage.action.toString(),\n                    objects: listingItemobjects,\n                    data\n                } as ActionMessageCreateRequest;\n                break;\n\n            case BidMessageType.MPA_BID:\n            case BidMessageType.MPA_ACCEPT:\n            case BidMessageType.MPA_REJECT:\n            case BidMessageType.MPA_CANCEL:\n                const bidMessage = message as BidMessage;\n                const objects = this.getModelMessageObjects(bidMessage);\n                actionMessageCreateRequest = {\n                    listing_item_id: listingItemId,\n                    action: bidMessage.action.toString(),\n                    objects,\n                    data\n                } as ActionMessageCreateRequest;\n                break;\n\n            case EscrowMessageType.MPA_LOCK:\n            case EscrowMessageType.MPA_REQUEST_REFUND:\n            case EscrowMessageType.MPA_REFUND:\n            case EscrowMessageType.MPA_RELEASE:\n                const escrowMessage = message as EscrowMessage;\n\n                // MPA-RELEASE& MPA-REFUND & MPA-REQUEST-REFUND can have memo in a weird place\n                if (escrowMessage.memo) {\n                    if (!escrowMessage.info) {\n                        escrowMessage.info = {};\n                    }\n                    escrowMessage.info.memo = escrowMessage.memo;\n                }\n\n                actionMessageCreateRequest = {\n                    listing_item_id: listingItemId,\n                    action: escrowMessage.action.toString(),\n                    nonce: escrowMessage.nonce,\n                    accepted: escrowMessage.accepted,\n                    info: escrowMessage.info as MessageInfoCreateRequest,\n                    escrow: escrowMessage.escrow as MessageEscrowCreateRequest,\n                    data\n                } as ActionMessageCreateRequest;\n                break;\n            case ProposalMessageType.MP_PROPOSAL_ADD:\n                // TODO: implement\n                // const proposalMessage = message as ProposalMessage;\n                // actionMessageCreateRequest = {\n                // } as ActionMessageCreateRequest;\n                // break;\n            case VoteMessageType.MP_VOTE:\n                // TODO: implement\n            default:\n                throw new InternalServerException('Unknown message action type.');\n        }\n\n        return actionMessageCreateRequest;\n    }\n\n    private getModelMessageObjects(bidMessage: BidMessage | ListingItemAddMessage): MessageObjectCreateRequest[] {\n        const createRequests: MessageObjectCreateRequest[] = [];\n        if (bidMessage.objects) {\n            for (const messageObject of bidMessage.objects) {\n                const createRequest = {\n                    dataId: messageObject.id,\n                    dataValue: messageObject.value\n                } as MessageObjectCreateRequest;\n                createRequests.push(createRequest);\n            }\n        }\n        return createRequests;\n    }\n\n    private getModelMessageData(smsgMessage: resources.SmsgMessage): MessageDataCreateRequest {\n        return {\n            msgid: smsgMessage.msgid,\n            version: smsgMessage.version,\n            received: new Date(smsgMessage.received),\n            sent: new Date(smsgMessage.sent),\n            from: smsgMessage.from,\n            to: smsgMessage.to\n        } as MessageDataCreateRequest;\n\n    }\n}\n"]}