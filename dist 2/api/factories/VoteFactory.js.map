{"version":3,"file":"VoteFactory.js","sourceRoot":"","sources":["../../../src/api/factories/VoteFactory.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAE1C,+CAAuD;AAMvD,6EAA0E;AAE1E,IAAa,WAAW,GAAxB;IAII,YACgF,qBAA4C,EACzE,MAAyB;QADI,0BAAqB,GAArB,qBAAqB,CAAuB;QACzE,WAAM,GAAN,MAAM,CAAmB;QAExE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IACU,UAAU,CAAC,eAAgC,EAAE,QAA4B,EAAE,cAAwC,EACxG,aAAgC,EAAE,YAAoB;;YAE1E,MAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC;YACnC,MAAM,QAAQ,GAAG,cAAc,CAAC,QAAQ,CAAC;YACzC,MAAM,KAAK,GAAG,aAAa,CAAC,OAAO,CAAC;YACpC,MAAM,KAAK,GAAG,YAAY,CAAC;YAC3B,MAAM,MAAM,GAAG,CAAC,CAAC;YAEjB,MAAM,CAAC;gBACH,MAAM,EAAE,eAAe;gBACvB,YAAY;gBACZ,QAAQ;gBACR,KAAK;gBACL,KAAK;gBACL,MAAM;aACM,CAAC;QACrB,CAAC;KAAA;IAED;;;;;;;;OAQG;IACU,QAAQ,CAAC,WAAwB,EAAE,QAA4B,EAAE,KAAa,EAAE,MAAc,EACrF,MAAe;;YAEjC,MAAM,WAAW,GAAG;gBAChB,KAAK,EAAE,WAAW,CAAC,KAAK;gBACxB,KAAK;gBACL,MAAM;aACY,CAAC;YAEvB,qCAAqC;YACrC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,4BAA4B,CAAC,QAAQ,CAAC,EAAE,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC;YAChH,WAAW,CAAC,kBAAkB,GAAG,MAAM,CAAC,EAAE,CAAC;YAC3C,MAAM,CAAC,WAAW,CAAC;QACvB,CAAC;KAAA;CAEJ,CAAA;AA7DY,WAAW;IAKf,mBAAA,kBAAM,CAAC,iBAAK,CAAC,OAAO,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAA;IACnE,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;6CAD4D,6CAAqB;GALnH,WAAW,CA6DvB;AA7DY,kCAAW","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as _ from 'lodash';\nimport { inject, named } from 'inversify';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { Types, Core, Targets } from '../../constants';\nimport { VoteMessage } from '../messages/VoteMessage';\nimport { VoteMessageType } from '../enums/VoteMessageType';\nimport * as resources from 'resources';\nimport { VoteCreateRequest } from '../requests/VoteCreateRequest';\nimport { VoteUpdateRequest } from '../requests/VoteUpdateRequest';\nimport { ProposalOptionService } from '../services/ProposalOptionService';\n\nexport class VoteFactory {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Service) @named(Targets.Service.ProposalOptionService) public proposalOptionService: ProposalOptionService,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     *\n     * @param {VoteMessageType} voteMessageType\n     * @param {string} itemHash\n     * @param {IdValuePair[]} idValuePairObjects\n     * @returns {Promise<VoteMessage>}\n     */\n    public async getMessage(voteMessageType: VoteMessageType, proposal: resources.Proposal, proposalOption: resources.ProposalOption,\n                            senderProfile: resources.Profile, currentBlock: number): Promise<VoteMessage> {\n\n        const proposalHash = proposal.hash;\n        const optionId = proposalOption.optionId;\n        const voter = senderProfile.address;\n        const block = currentBlock;\n        const weight = 1;\n\n        return {\n            action: voteMessageType,\n            proposalHash,\n            optionId,\n            voter,\n            block,\n            weight\n        } as VoteMessage;\n    }\n\n    /**\n     *\n     * @param {VoteMessage} voteMessage\n     * @param {\"resources\".Proposal} proposal\n     * @param {number} block\n     * @param {number} weight\n     * @param {boolean} create\n     * @returns {Promise<VoteCreateRequest | VoteUpdateRequest>}\n     */\n    public async getModel(voteMessage: VoteMessage, proposal: resources.Proposal, block: number, weight: number,\n                          create: boolean): Promise<VoteCreateRequest | VoteUpdateRequest> {\n\n        const voteRequest = {\n            voter: voteMessage.voter,\n            block,\n            weight\n        } as VoteCreateRequest;\n\n        // TODO: remove the service from here\n        const option = await this.proposalOptionService.findOneByProposalAndOptionId(proposal.id, voteMessage.optionId);\n        voteRequest.proposal_option_id = option.id;\n        return voteRequest;\n    }\n\n}\n"]}