{"version":3,"file":"MarketRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/MarketRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { Market } from '../models/Market';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nexport class MarketRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.Market) public MarketModel: typeof Market,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async getDefault(withRelated: boolean = true): Promise<Market> {\n        return await this.findOneByName(process.env.DEFAULT_MARKETPLACE_NAME, withRelated);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<Market>> {\n        const list = await this.MarketModel.fetchAll();\n        return list as Bookshelf.Collection<Market>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Market> {\n        return await this.MarketModel.fetchById(id, withRelated);\n    }\n\n    public async findOneByAddress(address: string, withRelated: boolean = true): Promise<Market> {\n        return await this.MarketModel.fetchByAddress(address, withRelated);\n    }\n\n    public async findOneByName(name: string, withRelated: boolean = true): Promise<Market> {\n        return await this.MarketModel.fetchByName(name, withRelated);\n    }\n\n    public async create(data: any): Promise<Market> {\n        const market = this.MarketModel.forge<Market>(data);\n        try {\n            const marketCreated = await market.save();\n            return await this.MarketModel.fetchById(marketCreated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not create the market!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<Market> {\n        const market = this.MarketModel.forge<Market>({ id });\n        try {\n            const marketUpdated = await market.save(data, { patch: true });\n            return await this.MarketModel.fetchById(marketUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the market!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let market = this.MarketModel.forge<Market>({ id });\n        try {\n            market = await market.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await market.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the market!', error);\n        }\n    }\n\n}\n"]}