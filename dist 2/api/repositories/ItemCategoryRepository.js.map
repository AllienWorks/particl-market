{"version":3,"file":"ItemCategoryRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/ItemCategoryRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { ItemCategory } from '../models/ItemCategory';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nexport class ItemCategoryRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.ItemCategory) public ItemCategoryModel: typeof ItemCategory,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ItemCategory>> {\n        const list = await this.ItemCategoryModel.fetchAll();\n        return list as Bookshelf.Collection<ItemCategory>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ItemCategory> {\n        return this.ItemCategoryModel.fetchById(id, withRelated);\n    }\n\n    public async findOneByKey(key: string, withRelated: boolean = true): Promise<ItemCategory> {\n        return this.ItemCategoryModel.fetchByKey(key, withRelated);\n    }\n\n    public async findRoot(): Promise<ItemCategory> {\n        return await this.ItemCategoryModel.fetchRoot();\n    }\n\n    public async findByName(name: string, withRelated: boolean = true): Promise<Bookshelf.Collection<ItemCategory>> {\n        return this.ItemCategoryModel.fetchAllByName(name, withRelated);\n    }\n\n    public async isCategoryExists(categoryName: string, parentCategoryId: number | null): Promise<ItemCategory> {\n        return this.ItemCategoryModel.fetchCategoryByNameAndParentID(categoryName, parentCategoryId);\n    }\n\n    public async create(data: any): Promise<ItemCategory> {\n        const itemCategory = this.ItemCategoryModel.forge<ItemCategory>(data);\n        try {\n            const itemCategoryCreated = await itemCategory.save();\n            return this.ItemCategoryModel.fetchById(itemCategoryCreated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not create the itemCategory!', error);\n        }\n    }\n\n    public async update(id: number, data: any, patching: boolean = true): Promise<ItemCategory> {\n        const itemCategory = this.ItemCategoryModel.forge<ItemCategory>({ id });\n        try {\n\n            const itemCategoryUpdated = await itemCategory.save(data, { defaults: true, patch: patching });\n            return await this.ItemCategoryModel.fetchById(itemCategoryUpdated.id);\n\n        } catch (error) {\n            throw new DatabaseException('Could not update the itemCategory!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let itemCategory = this.ItemCategoryModel.forge<ItemCategory>({ id });\n        try {\n            itemCategory = await itemCategory.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await itemCategory.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the itemCategory!', error);\n        }\n    }\n\n}\n"]}