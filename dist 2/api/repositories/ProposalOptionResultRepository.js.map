{"version":3,"file":"ProposalOptionResultRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/ProposalOptionResultRepository.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAGjF,yCAA0C;AAC1C,+CAAuD;AAEvD,uEAAoE;AACpE,uEAAoE;AAGpE,IAAa,8BAA8B,GAA3C;IAII,YAC2E,yBAAsD,EAC9E,MAAyB;QADD,8BAAyB,GAAzB,yBAAyB,CAA6B;QAC9E,WAAM,GAAN,MAAM,CAAmB;QAExE,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAEY,OAAO;;YAChB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,QAAQ,EAAE,CAAC;YAC7D,MAAM,CAAC,IAAkD,CAAC;QAC9D,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU,EAAE,cAAuB,IAAI;;YACxD,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,SAAS,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;QACrE,CAAC;KAAA;IAEY,MAAM,CAAC,IAAS;;YACzB,MAAM,oBAAoB,GAAG,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAuB,IAAI,CAAC,CAAC;YAC9F,IAAI,CAAC;gBACD,MAAM,2BAA2B,GAAG,MAAM,oBAAoB,CAAC,IAAI,EAAE,CAAC;gBACtE,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,SAAS,CAAC,2BAA2B,CAAC,EAAE,CAAC,CAAC;YACpF,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,MAAM,IAAI,qCAAiB,CAAC,6CAA6C,GAAG,KAAK,EAAE,KAAK,CAAC,CAAC;YAC9F,CAAC;QACL,CAAC;KAAA;IAEY,MAAM,CAAC,EAAU,EAAE,IAAS;;YACrC,MAAM,oBAAoB,GAAG,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAuB,EAAE,EAAE,EAAE,CAAC,CAAC;YAChG,IAAI,CAAC;gBACD,MAAM,2BAA2B,GAAG,MAAM,oBAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC3F,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,SAAS,CAAC,2BAA2B,CAAC,EAAE,CAAC,CAAC;YACpF,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,MAAM,IAAI,qCAAiB,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;YACrF,CAAC;QACL,CAAC;KAAA;IAEY,OAAO,CAAC,EAAU;;YAC3B,IAAI,oBAAoB,GAAG,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAuB,EAAE,EAAE,EAAE,CAAC,CAAC;YAC9F,IAAI,CAAC;gBACD,oBAAoB,GAAG,MAAM,oBAAoB,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;YAC/E,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,MAAM,IAAI,qCAAiB,CAAC,EAAE,CAAC,CAAC;YACpC,CAAC;YAED,IAAI,CAAC;gBACD,MAAM,oBAAoB,CAAC,OAAO,EAAE,CAAC;gBACrC,MAAM,CAAC;YACX,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,MAAM,IAAI,qCAAiB,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;YACrF,CAAC;QACL,CAAC;KAAA;CAEJ,CAAA;AAxDY,8BAA8B;IAKlC,mBAAA,kBAAM,CAAC,iBAAK,CAAC,KAAK,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAA;IAC9D,mBAAA,kBAAM,CAAC,iBAAK,CAAC,IAAI,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAA;;GANlC,8BAA8B,CAwD1C;AAxDY,wEAA8B","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { ProposalOptionResult } from '../models/ProposalOptionResult';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nexport class ProposalOptionResultRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.ProposalOptionResult) public ProposalOptionResultModel: typeof ProposalOptionResult,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ProposalOptionResult>> {\n        const list = await this.ProposalOptionResultModel.fetchAll();\n        return list as Bookshelf.Collection<ProposalOptionResult>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ProposalOptionResult> {\n        return this.ProposalOptionResultModel.fetchById(id, withRelated);\n    }\n\n    public async create(data: any): Promise<ProposalOptionResult> {\n        const proposalOptionResult = this.ProposalOptionResultModel.forge<ProposalOptionResult>(data);\n        try {\n            const proposalOptionResultCreated = await proposalOptionResult.save();\n            return this.ProposalOptionResultModel.fetchById(proposalOptionResultCreated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not create the proposalOptionResult! ' + error, error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<ProposalOptionResult> {\n        const proposalOptionResult = this.ProposalOptionResultModel.forge<ProposalOptionResult>({ id });\n        try {\n            const proposalOptionResultUpdated = await proposalOptionResult.save(data, { patch: true });\n            return this.ProposalOptionResultModel.fetchById(proposalOptionResultUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the proposalOptionResult!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let proposalOptionResult = this.ProposalOptionResultModel.forge<ProposalOptionResult>({ id });\n        try {\n            proposalOptionResult = await proposalOptionResult.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await proposalOptionResult.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the proposalOptionResult!', error);\n        }\n    }\n\n}\n"]}