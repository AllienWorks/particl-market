{"version":3,"file":"PaymentInformationRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/PaymentInformationRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { PaymentInformation } from '../models/PaymentInformation';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nexport class PaymentInformationRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.PaymentInformation) public PaymentInformationModel: typeof PaymentInformation,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<PaymentInformation>> {\n        const list = await this.PaymentInformationModel.fetchAll();\n        return list as Bookshelf.Collection<PaymentInformation>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<PaymentInformation> {\n        return this.PaymentInformationModel.fetchById(id, withRelated);\n    }\n\n    public async create(data: any): Promise<PaymentInformation> {\n        const paymentInformation = this.PaymentInformationModel.forge<PaymentInformation>(data);\n        try {\n            const paymentInformationCreated = await paymentInformation.save();\n            return this.PaymentInformationModel.fetchById(paymentInformationCreated.id);\n        } catch (error) {\n            this.log.error(error);\n            throw new DatabaseException('Could not create the paymentInformation!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<PaymentInformation> {\n        const paymentInformation = this.PaymentInformationModel.forge<PaymentInformation>({ id });\n        try {\n            const paymentInformationUpdated = await paymentInformation.save(data, { patch: true });\n            return this.PaymentInformationModel.fetchById(paymentInformationUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the paymentInformation!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let paymentInformation = this.PaymentInformationModel.forge<PaymentInformation>({ id });\n        try {\n            paymentInformation = await paymentInformation.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await paymentInformation.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the paymentInformation!', error);\n        }\n    }\n\n}\n"]}