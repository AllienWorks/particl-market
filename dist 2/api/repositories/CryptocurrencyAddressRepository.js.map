{"version":3,"file":"CryptocurrencyAddressRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/CryptocurrencyAddressRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { CryptocurrencyAddress } from '../models/CryptocurrencyAddress';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nexport class CryptocurrencyAddressRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.CryptocurrencyAddress) public CryptocurrencyAddressModel: typeof CryptocurrencyAddress,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<CryptocurrencyAddress>> {\n        const list = await this.CryptocurrencyAddressModel.fetchAll();\n        return list as Bookshelf.Collection<CryptocurrencyAddress>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<CryptocurrencyAddress> {\n        return this.CryptocurrencyAddressModel.fetchById(id, withRelated);\n    }\n\n    public async create(data: any): Promise<CryptocurrencyAddress> {\n        const cryptocurrencyAddress = this.CryptocurrencyAddressModel.forge<CryptocurrencyAddress>(data);\n        try {\n            const cryptocurrencyAddressCreated = await cryptocurrencyAddress.save();\n            return this.CryptocurrencyAddressModel.fetchById(cryptocurrencyAddressCreated.id);\n        } catch (error) {\n            this.log.error(error);\n            throw new DatabaseException('Could not create the cryptocurrencyAddress!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<CryptocurrencyAddress> {\n        const cryptocurrencyAddress = this.CryptocurrencyAddressModel.forge<CryptocurrencyAddress>({ id });\n        try {\n            const cryptocurrencyAddressUpdated = await cryptocurrencyAddress.save(data, { patch: true });\n            return this.CryptocurrencyAddressModel.fetchById(cryptocurrencyAddressUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the cryptocurrencyAddress!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let cryptocurrencyAddress = this.CryptocurrencyAddressModel.forge<CryptocurrencyAddress>({ id });\n        try {\n            cryptocurrencyAddress = await cryptocurrencyAddress.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await cryptocurrencyAddress.destroy();\n            return;\n        } catch (error) {\n            this.log.error(error);\n            throw new DatabaseException('Could not delete the cryptocurrencyAddress!', error);\n        }\n    }\n\n}\n"]}