{"version":3,"file":"ItemInformationRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/ItemInformationRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { ItemInformation } from '../models/ItemInformation';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nexport class ItemInformationRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.ItemInformation) public ItemInformationModel: typeof ItemInformation,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ItemInformation>> {\n        const list = await this.ItemInformationModel.fetchAll();\n        return list as Bookshelf.Collection<ItemInformation>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ItemInformation> {\n        return await this.ItemInformationModel.fetchById(id, withRelated);\n    }\n\n    public async findByItemTemplateId(listingItemTemplateId: number, withRelated: boolean = true): Promise<ItemInformation> {\n        return await this.ItemInformationModel.findByItemTemplateId(listingItemTemplateId, withRelated);\n    }\n\n    public async create(data: any): Promise<ItemInformation> {\n        const itemInformation = this.ItemInformationModel.forge<ItemInformation>(data);\n        try {\n            const itemInformationCreated = await itemInformation.save();\n            const result = await this.ItemInformationModel.fetchById(itemInformationCreated.id);\n            return result;\n        } catch (error) {\n            throw new DatabaseException('Could not create the itemInformation!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<ItemInformation> {\n        const itemInformation = this.ItemInformationModel.forge<ItemInformation>({ id });\n        try {\n            const itemInformationUpdated = await itemInformation.save(data, { patch: true });\n            return await this.ItemInformationModel.fetchById(itemInformationUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the itemInformation!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let itemInformation = this.ItemInformationModel.forge<ItemInformation>({ id });\n        try {\n            itemInformation = await itemInformation.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await itemInformation.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the itemInformation!', error);\n        }\n    }\n\n}\n"]}