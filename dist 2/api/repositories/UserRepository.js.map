{"version":3,"file":"UserRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/UserRepository.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAQjF,yCAA0C;AAC1C,+CAAiD;AAEjD,uEAAoE;AACpE,uEAAoE;AAGpE,IAAa,cAAc,GAA3B;IAEI,YAC2D,SAAsB;QAAtB,cAAS,GAAT,SAAS,CAAa;IAC7E,CAAC;IAEL;;;;;;;OAOG;IACU,OAAO;;YAChB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAQ,CAAC;QAC3C,CAAC;KAAA;IAED;;;;;;OAMG;IACU,OAAO,CAAC,EAAU;;YAC3B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QACxC,CAAC;KAAA;IAED;;;;;;OAMG;IACU,YAAY,CAAC,MAAc;;YACpC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAChD,CAAC;KAAA;IAED;;;;;;;OAOG;IACU,MAAM,CAAC,IAAS;;YACzB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAO,IAAI,CAAC,CAAC;YAC9C,IAAI,CAAC;gBACD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;gBACtC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YACpD,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,MAAM,IAAI,qCAAiB,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YACrE,CAAC;QACL,CAAC;KAAA;IAED;;;;;;;OAOG;IACU,MAAM,CAAC,EAAU,EAAE,IAAS;;YACrC,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAO,EAAE,EAAE,EAAE,CAAC,CAAC;YAChD,IAAI,CAAC;gBACD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC3D,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAEpD,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,MAAM,IAAI,qCAAiB,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YACrE,CAAC;QACL,CAAC;KAAA;IAED;;;;;;;OAOG;IACU,OAAO,CAAC,EAAU;;YAC3B,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAO,EAAE,EAAE,EAAE,CAAC,CAAC;YAC9C,IAAI,CAAC;gBACD,IAAI,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;YAC/C,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,MAAM,IAAI,qCAAiB,CAAC,EAAE,CAAC,CAAC;YACpC,CAAC;YAED,IAAI,CAAC;gBACD,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;gBACrB,MAAM,CAAC;YACX,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,MAAM,IAAI,qCAAiB,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YACrE,CAAC;QACL,CAAC;KAAA;CAEJ,CAAA;AArGY,cAAc;IAGlB,mBAAA,kBAAM,CAAC,iBAAK,CAAC,KAAK,CAAC,CAAA,EAAE,mBAAA,iBAAK,CAAC,mBAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;;GAH1C,cAAc,CAqG1B;AArGY,wCAAc","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\n/**\n * UserRepository\n * ------------------------------\n */\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Targets } from '../../constants';\nimport { User } from '../models/User';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\n\n\nexport class UserRepository {\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.User) public UserModel: typeof User\n    ) { }\n\n    /**\n     * Retrieves all user data out of the database\n     *\n     * @static\n     * @returns {Promise<Bookshelf.Collection<User>>}\n     *\n     * @memberof UserRepository\n     */\n    public async findAll(): Promise<Bookshelf.Collection<User>> {\n        return this.UserModel.fetchAll<User>();\n    }\n\n    /**\n     * Retrieves one user entity of the database\n     *\n     * @static\n     * @param {number} id of the user\n     * @returns {Promise<User>}\n     */\n    public async findOne(id: number): Promise<User> {\n        return this.UserModel.fetchById(id);\n    }\n\n    /**\n     * Retrieves one user entity of the database\n     *\n     * @static\n     * @param {number} id of the user\n     * @returns {Promise<User>}\n     */\n    public async findByUserId(userId: string): Promise<User> {\n        return this.UserModel.fetchByUserId(userId);\n    }\n\n    /**\n     * Creates a new user entity in the database and returns\n     * the new created entity\n     *\n     * @static\n     * @param {*} data is the new user\n     * @returns {Promise<User>}\n     */\n    public async create(data: any): Promise<User> {\n        const user = this.UserModel.forge<User>(data);\n        try {\n            const createdUser = await user.save();\n            return this.UserModel.fetchById(createdUser.id);\n        } catch (error) {\n            throw new DatabaseException('Could not create the user!', error);\n        }\n    }\n\n    /**\n     * Updates a already existing entity and returns the new one\n     *\n     * @static\n     * @param {number} id\n     * @param {*} data\n     * @returns {Promise<User>}\n     */\n    public async update(id: number, data: any): Promise<User> {\n        const user = this.UserModel.forge<User>({ id });\n        try {\n            const updatedUser = await user.save(data, { patch: true });\n            return this.UserModel.fetchById(updatedUser.id);\n\n        } catch (error) {\n            throw new DatabaseException('Could not update the user!', error);\n        }\n    }\n\n    /**\n     * Removes a entity in the database, but if there is not user\n     * with the given id, we will throw a Not-Found exception\n     *\n     * @static\n     * @param {number} id\n     * @returns {Promise<void>}\n     */\n    public async destroy(id: number): Promise<void> {\n        let user = this.UserModel.forge<User>({ id });\n        try {\n            user = await user.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await user.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the user!', error);\n        }\n    }\n\n}\n"]}