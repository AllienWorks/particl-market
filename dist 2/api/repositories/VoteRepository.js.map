{"version":3,"file":"VoteRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/VoteRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { Vote } from '../models/Vote';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nexport class VoteRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.Vote) public VoteModel: typeof Vote,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<Vote>> {\n        const list = await this.VoteModel.fetchAll();\n        return list as Bookshelf.Collection<Vote>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Vote> {\n        return this.VoteModel.fetchById(id, withRelated);\n    }\n\n    public async findOneByVoterAndProposalId(voter: string, proposalId: number, withRelated: boolean = true): Promise<Vote> {\n        return this.VoteModel.fetchByVoterAndProposalId(voter, proposalId, withRelated);\n    }\n\n    public async create(data: any): Promise<Vote> {\n        const vote = this.VoteModel.forge<Vote>(data);\n        try {\n            const voteCreated = await vote.save();\n            return this.VoteModel.fetchById(voteCreated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not create the vote! ' + error, error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<Vote> {\n        const vote = this.VoteModel.forge<Vote>({ id });\n        try {\n            const voteUpdated = await vote.save(data, { patch: true });\n            return this.VoteModel.fetchById(voteUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the vote! ' + error, error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let vote = this.VoteModel.forge<Vote>({ id });\n        try {\n            vote = await vote.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await vote.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the vote! ' + error, error);\n        }\n    }\n\n}\n"]}