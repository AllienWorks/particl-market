{"version":3,"file":"OrderRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/OrderRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { Order } from '../models/Order';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { OrderSearchParams } from '../requests/OrderSearchParams';\n\nexport class OrderRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.Order) public OrderModel: typeof Order,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<Order>> {\n        const list = await this.OrderModel.fetchAll();\n        return list as Bookshelf.Collection<Order>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Order> {\n        return this.OrderModel.fetchById(id, withRelated);\n    }\n\n    /**\n     *\n     * @param options, OrderSearchParams\n     * @returns {Promise<Bookshelf.Collection<Order>>}\n     */\n    public async search(options: OrderSearchParams, withRelated: boolean): Promise<Bookshelf.Collection<Order>> {\n        return this.OrderModel.search(options, withRelated);\n    }\n\n    public async create(data: any): Promise<Order> {\n        const order = this.OrderModel.forge<Order>(data);\n        try {\n            const orderCreated = await order.save();\n            return this.OrderModel.fetchById(orderCreated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not create the order!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<Order> {\n        const order = this.OrderModel.forge<Order>({ id });\n        try {\n            const orderUpdated = await order.save(data, { patch: true });\n            return this.OrderModel.fetchById(orderUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the order!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let order = this.OrderModel.forge<Order>({ id });\n        try {\n            order = await order.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await order.destroy();\n            return;\n        } catch (error) {\n            this.log.debug('error:', error);\n            throw new DatabaseException('Could not delete the order!', error);\n        }\n    }\n\n}\n"]}