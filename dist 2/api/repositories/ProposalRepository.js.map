{"version":3,"file":"ProposalRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/ProposalRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { Proposal } from '../models/Proposal';\nimport { ProposalSearchParams } from '../requests/ProposalSearchParams';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { SearchOrder } from '../enums/SearchOrder';\nimport { ProposalType } from '../enums/ProposalType';\n\nexport class ProposalRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.Proposal) public ProposalModel: typeof Proposal,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    /**\n     *\n     * @param {ListingItemSearchParams} options\n     * @param {boolean} withRelated\n     * @returns {Promise<Bookshelf.Collection<ListingItem>>}\n     */\n    public async searchBy(options: ProposalSearchParams, withRelated: boolean = true): Promise<Bookshelf.Collection<Proposal>> {\n        return this.ProposalModel.searchBy(options, withRelated);\n    }\n\n    public async findAll(withRelated: boolean = true): Promise<Bookshelf.Collection<Proposal>> {\n        const searchParams = {\n            startBlock: '*',\n            endBlock: '*',\n            order: SearchOrder.ASC,\n            type: ProposalType.PUBLIC_VOTE\n        } as ProposalSearchParams;\n        return await this.searchBy(searchParams, withRelated);\n    }\n\n    public async findOneByHash(hash: string, withRelated: boolean = true): Promise<Proposal> {\n        return this.ProposalModel.fetchByHash(hash, withRelated);\n    }\n\n    public async findOneByItemHash(itemHash: string, withRelated: boolean = true): Promise<Proposal> {\n        return this.ProposalModel.fetchByItemHash(itemHash, withRelated);\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Proposal> {\n        return this.ProposalModel.fetchById(id, withRelated);\n    }\n\n    public async create(data: any): Promise<Proposal> {\n        const proposal = this.ProposalModel.forge<Proposal>(data);\n        try {\n            const proposalCreated = await proposal.save();\n            return this.ProposalModel.fetchById(proposalCreated.id);\n        } catch (error) {\n            this.log.error('error:', error);\n            throw new DatabaseException('Could not create the proposal!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<Proposal> {\n        const proposal = this.ProposalModel.forge<Proposal>({ id });\n        try {\n            const proposalUpdated = await proposal.save(data, { patch: true });\n            return this.ProposalModel.fetchById(proposalUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the proposal!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let proposal = this.ProposalModel.forge<Proposal>({ id });\n        try {\n            proposal = await proposal.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await proposal.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the proposal!', error);\n        }\n    }\n\n}\n"]}