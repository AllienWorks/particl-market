{"version":3,"file":"ListingItemTemplateRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/ListingItemTemplateRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { ListingItemTemplate } from '../models/ListingItemTemplate';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { ListingItemTemplateSearchParams } from '../requests/ListingItemTemplateSearchParams';\n\nexport class ListingItemTemplateRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.ListingItemTemplate) public ListingItemTemplateModel: typeof ListingItemTemplate,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ListingItemTemplate>> {\n        const list = await this.ListingItemTemplateModel.fetchAll();\n        return list as Bookshelf.Collection<ListingItemTemplate>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ListingItemTemplate> {\n        return this.ListingItemTemplateModel.fetchById(id, withRelated);\n    }\n\n    /**\n     *\n     * @param {string} hash\n     * @param {boolean} withRelated\n     * @returns {Promise<ListingItemTemplate>}\n     */\n    public async findOneByHash(hash: string, withRelated: boolean = true): Promise<ListingItemTemplate> {\n        return this.ListingItemTemplateModel.fetchByHash(hash, withRelated);\n    }\n\n    /**\n     *\n     * @param options, ListingItemSearchParams\n     * @returns {Promise<Bookshelf.Collection<ListingItemTemplate>>}\n     */\n    public async search(options: ListingItemTemplateSearchParams): Promise<Bookshelf.Collection<ListingItemTemplate>> {\n        return this.ListingItemTemplateModel.searchBy(options);\n\n    }\n\n    public async create(data: any): Promise<ListingItemTemplate> {\n        const listingItemTemplate = this.ListingItemTemplateModel.forge<ListingItemTemplate>(data);\n        try {\n            const listingItemTemplateCreated = await listingItemTemplate.save();\n            return this.ListingItemTemplateModel.fetchById(listingItemTemplateCreated.id);\n        } catch (error) {\n            this.log.error('error: ', error);\n            throw new DatabaseException('Could not create the listingItemTemplate!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<ListingItemTemplate> {\n        const listingItemTemplate = this.ListingItemTemplateModel.forge<ListingItemTemplate>({ id });\n        try {\n            const listingItemTemplateUpdated = await listingItemTemplate.save(data, { patch: true });\n            return this.ListingItemTemplateModel.fetchById(listingItemTemplateUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the listingItemTemplate!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let listingItemTemplate = this.ListingItemTemplateModel.forge<ListingItemTemplate>({ id });\n        try {\n            listingItemTemplate = await listingItemTemplate.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await listingItemTemplate.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the listingItemTemplate!', error);\n        }\n    }\n\n}\n"]}