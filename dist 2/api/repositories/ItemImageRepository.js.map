{"version":3,"file":"ItemImageRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/ItemImageRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { ItemImage } from '../models/ItemImage';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nexport class ItemImageRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.ItemImage) public ItemImageModel: typeof ItemImage,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ItemImage>> {\n        const list = await this.ItemImageModel.fetchAll();\n        return list as Bookshelf.Collection<ItemImage>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ItemImage> {\n        return await this.ItemImageModel.fetchById(id, withRelated);\n    }\n\n    public async create(data: any): Promise<ItemImage> {\n        const startTime = new Date().getTime();\n        const itemImage = this.ItemImageModel.forge<ItemImage>(data);\n        try {\n            const itemImageCreated = await itemImage.save();\n            const result = await this.ItemImageModel.fetchById(itemImageCreated.id);\n            this.log.debug('itemImageRepository.create: ' + (new Date().getTime() - startTime) + 'ms');\n            return result;\n        } catch (error) {\n            throw new DatabaseException('Could not create the itemImage!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<ItemImage> {\n        const itemImage = this.ItemImageModel.forge<ItemImage>({ id });\n        try {\n            const itemImageUpdated = await itemImage.save(data, { patch: true });\n            return await this.ItemImageModel.fetchById(itemImageUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the itemImage!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let itemImage = this.ItemImageModel.forge<ItemImage>({ id });\n        try {\n            itemImage = await itemImage.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await itemImage.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the itemImage!', error);\n        }\n    }\n\n}\n"]}