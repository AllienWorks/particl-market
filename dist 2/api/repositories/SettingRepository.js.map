{"version":3,"file":"SettingRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/SettingRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { Setting } from '../models/Setting';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nexport class SettingRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.Setting) public SettingModel: typeof Setting,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<Setting>> {\n        const list = await this.SettingModel.fetchAll();\n        return list as Bookshelf.Collection<Setting>;\n    }\n\n    public async findAllByProfileId(profileId: number, withRelated: boolean = true): Promise<Bookshelf.Collection<Setting>> {\n        return this.SettingModel.fetchAllByProfileId(profileId, withRelated);\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Setting> {\n        return this.SettingModel.fetchById(id, withRelated);\n    }\n\n    public async findOneByKeyAndProfileId(key: string, profileId: number, withRelated: boolean = true): Promise<Setting> {\n        return this.SettingModel.fetchByKeyAndProfileId(key, profileId, withRelated);\n    }\n\n    public async create(data: any): Promise<Setting> {\n        const setting = this.SettingModel.forge<Setting>(data);\n        try {\n            const settingCreated = await setting.save();\n            return this.SettingModel.fetchById(settingCreated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not create the setting!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<Setting> {\n        const setting = this.SettingModel.forge<Setting>({ id });\n        try {\n            const settingUpdated = await setting.save(data, { patch: true });\n            return this.SettingModel.fetchById(settingUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the setting!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let setting = this.SettingModel.forge<Setting>({ id });\n        try {\n            setting = await setting.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await setting.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the setting!', error);\n        }\n    }\n\n}\n"]}