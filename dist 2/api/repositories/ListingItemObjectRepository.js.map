{"version":3,"file":"ListingItemObjectRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/ListingItemObjectRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { ListingItemObject } from '../models/ListingItemObject';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { ListingItemObjectSearchParams } from '../requests/ListingItemObjectSearchParams';\n\nexport class ListingItemObjectRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.ListingItemObject) public ListingItemObjectModel: typeof ListingItemObject,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ListingItemObject>> {\n        const list = await this.ListingItemObjectModel.fetchAll();\n        return list as Bookshelf.Collection<ListingItemObject>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ListingItemObject> {\n        return this.ListingItemObjectModel.fetchById(id, withRelated);\n    }\n\n    /**\n     *\n     * @param options, ListingItemObjectSearchParams\n     * @returns {Promise<Bookshelf.Collection<ListingItemObject>>}\n     */\n    public async search(options: ListingItemObjectSearchParams): Promise<Bookshelf.Collection<ListingItemObject>> {\n        return this.ListingItemObjectModel.searchBy(options);\n    }\n\n    public async create(data: any): Promise<ListingItemObject> {\n        const listingItemObject = this.ListingItemObjectModel.forge<ListingItemObject>(data);\n        try {\n            const listingItemObjectCreated = await listingItemObject.save();\n            return this.ListingItemObjectModel.fetchById(listingItemObjectCreated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not create the listingItemObject!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<ListingItemObject> {\n        const listingItemObject = this.ListingItemObjectModel.forge<ListingItemObject>({ id });\n        try {\n            const listingItemObjectUpdated = await listingItemObject.save(data, { patch: true });\n            return this.ListingItemObjectModel.fetchById(listingItemObjectUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the listingItemObject!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let listingItemObject = this.ListingItemObjectModel.forge<ListingItemObject>({ id });\n        try {\n            listingItemObject = await listingItemObject.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await listingItemObject.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the listingItemObject!', error);\n        }\n    }\n\n}\n"]}