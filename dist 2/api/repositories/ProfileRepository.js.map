{"version":3,"file":"ProfileRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/ProfileRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { Profile } from '../models/Profile';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nexport class ProfileRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.Profile) public ProfileModel: typeof Profile,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async getDefault(withRelated: boolean = true): Promise<Profile> {\n        return await this.findOneByName('DEFAULT', withRelated);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<Profile>> {\n        const list = await this.ProfileModel.fetchAll();\n        return list as Bookshelf.Collection<Profile>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Profile> {\n        return await this.ProfileModel.fetchById(id, withRelated);\n    }\n\n    public async findOneByName(name: string, withRelated: boolean = true): Promise<Profile> {\n        return await this.ProfileModel.fetchByName(name, withRelated);\n    }\n\n    public async findOneByAddress(name: string, withRelated: boolean = true): Promise<Profile> {\n        return await this.ProfileModel.fetchByAddress(name, withRelated);\n    }\n\n    public async create(data: any): Promise<Profile> {\n        const profile = this.ProfileModel.forge<Profile>(data);\n        try {\n            const profileCreated = await profile.save();\n            return await this.ProfileModel.fetchById(profileCreated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not create the profile!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<Profile> {\n        const profile = this.ProfileModel.forge<Profile>({ id });\n        try {\n            const profileUpdated = await profile.save(data, { patch: true });\n            return await this.ProfileModel.fetchById(profileUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the profile!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let profile = this.ProfileModel.forge<Profile>({ id });\n        try {\n            profile = await profile.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await profile.destroy();\n            return;\n        } catch (error) {\n            this.log.error('ERROR: ', error);\n            throw new DatabaseException('Could not delete the profile!', error);\n        }\n    }\n\n}\n"]}