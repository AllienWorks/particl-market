{"version":3,"file":"BidRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/BidRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { Bid } from '../models/Bid';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { BidSearchParams } from '../requests/BidSearchParams';\n\nexport class BidRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.Bid) public BidModel: typeof Bid,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<Bid>> {\n        const list = await this.BidModel.fetchAll();\n        return list as Bookshelf.Collection<Bid>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<Bid> {\n        return this.BidModel.fetchById(id, withRelated);\n    }\n\n    /**\n     *\n     * @param options, BidSearchParams\n     * @returns {Promise<Bookshelf.Collection<Bid>>}\n     */\n    public async search(options: BidSearchParams, withRelated: boolean): Promise<Bookshelf.Collection<Bid>> {\n        return this.BidModel.search(options, withRelated);\n    }\n\n    public async create(data: any): Promise<Bid> {\n        const bid = this.BidModel.forge<Bid>(data);\n        try {\n            const bidCreated = await bid.save();\n            return this.BidModel.fetchById(bidCreated.id);\n        } catch (error) {\n            this.log.error('Could not creat the bid!', error);\n            throw new DatabaseException('Could not create the bid!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<Bid> {\n        const bid = this.BidModel.forge<Bid>({ id });\n        try {\n            const bidUpdated = await bid.save(data, { patch: true });\n            return this.BidModel.fetchById(bidUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the bid!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let bid = this.BidModel.forge<Bid>({ id });\n        try {\n            bid = await bid.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await bid.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the bid!', error);\n        }\n    }\n\n}\n"]}