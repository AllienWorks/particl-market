{"version":3,"file":"ShoppingCartItemRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/ShoppingCartItemRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { ShoppingCartItem } from '../models/ShoppingCartItem';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nexport class ShoppingCartItemRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.ShoppingCartItem) public ShoppingCartItemModel: typeof ShoppingCartItem,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ShoppingCartItem>> {\n        const list = await this.ShoppingCartItemModel.fetchAll();\n        return list as Bookshelf.Collection<ShoppingCartItem>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ShoppingCartItem> {\n        return this.ShoppingCartItemModel.fetchById(id, withRelated);\n    }\n\n    public async findOneByCartIdAndListingItemId(cartId: number, listingItemId: number): Promise<ShoppingCartItem> {\n        return this.ShoppingCartItemModel.fetchByCartIdAndListingItemId(cartId, listingItemId);\n    }\n\n    public async findAllByCartId(cartId: number): Promise<Bookshelf.Collection<ShoppingCartItem>> {\n        return this.ShoppingCartItemModel.fetchAllByCartId(cartId);\n    }\n\n    public async create(data: any): Promise<ShoppingCartItem> {\n        const shoppingCartItem = this.ShoppingCartItemModel.forge<ShoppingCartItem>(data);\n        try {\n            const shoppingCartItemCreated = await shoppingCartItem.save();\n            return this.ShoppingCartItemModel.fetchById(shoppingCartItemCreated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not create the shoppingCartItem!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<ShoppingCartItem> {\n        const shoppingCartItem = this.ShoppingCartItemModel.forge<ShoppingCartItem>({ id });\n        try {\n            const shoppingCartItemUpdated = await shoppingCartItem.save(data, { patch: true });\n            return this.ShoppingCartItemModel.fetchById(shoppingCartItemUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the shoppingCartItem!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let shoppingCartItem = this.ShoppingCartItemModel.forge<ShoppingCartItem>({ id });\n        try {\n            shoppingCartItem = await shoppingCartItem.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await shoppingCartItem.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the shoppingCartItem!', error);\n        }\n    }\n\n    public async clearCart(cartId: number): Promise<void> {\n        return this.ShoppingCartItemModel.clearCart(cartId);\n    }\n\n}\n"]}