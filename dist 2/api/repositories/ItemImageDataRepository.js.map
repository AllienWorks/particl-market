{"version":3,"file":"ItemImageDataRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/ItemImageDataRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { ItemImageData } from '../models/ItemImageData';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nexport class ItemImageDataRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.ItemImageData) public ItemImageDataModel: typeof ItemImageData,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ItemImageData>> {\n        const list = await this.ItemImageDataModel.fetchAll();\n        return list as Bookshelf.Collection<ItemImageData>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ItemImageData> {\n        return this.ItemImageDataModel.fetchById(id, withRelated);\n    }\n\n    public async create(data: any): Promise<ItemImageData> {\n        const itemImageData = this.ItemImageDataModel.forge<ItemImageData>(data);\n        try {\n            const itemImageDataCreated = await itemImageData.save();\n            return this.ItemImageDataModel.fetchById(itemImageDataCreated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not create the itemImageData!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<ItemImageData> {\n        const itemImageData = this.ItemImageDataModel.forge<ItemImageData>({ id });\n        try {\n            const itemImageDataUpdated = await itemImageData.save(data, { patch: true });\n            return this.ItemImageDataModel.fetchById(itemImageDataUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the itemImageData!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let itemImageData = this.ItemImageDataModel.forge<ItemImageData>({ id });\n        try {\n            itemImageData = await itemImageData.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await itemImageData.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the itemImageData!', error);\n        }\n    }\n\n}\n"]}