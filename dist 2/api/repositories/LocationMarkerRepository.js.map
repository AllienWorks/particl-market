{"version":3,"file":"LocationMarkerRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/LocationMarkerRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { LocationMarker } from '../models/LocationMarker';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nexport class LocationMarkerRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.LocationMarker) public LocationMarkerModel: typeof LocationMarker,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<LocationMarker>> {\n        const list = await this.LocationMarkerModel.fetchAll();\n        return list as Bookshelf.Collection<LocationMarker>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<LocationMarker> {\n        return this.LocationMarkerModel.fetchById(id, withRelated);\n    }\n\n    public async create(data: any): Promise<LocationMarker> {\n        const locationMarker = this.LocationMarkerModel.forge<LocationMarker>(data);\n        try {\n            const locationMarkerCreated = await locationMarker.save();\n            return this.LocationMarkerModel.fetchById(locationMarkerCreated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not create the locationMarker!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<LocationMarker> {\n        const locationMarker = this.LocationMarkerModel.forge<LocationMarker>({ id });\n        try {\n            const locationMarkerUpdated = await locationMarker.save(data, { patch: true });\n            return this.LocationMarkerModel.fetchById(locationMarkerUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the locationMarker!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let locationMarker = this.LocationMarkerModel.forge<LocationMarker>({ id });\n        try {\n            locationMarker = await locationMarker.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await locationMarker.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the locationMarker!', error);\n        }\n    }\n\n}\n"]}