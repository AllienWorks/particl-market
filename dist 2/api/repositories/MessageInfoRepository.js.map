{"version":3,"file":"MessageInfoRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/MessageInfoRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { MessageInfo } from '../models/MessageInfo';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nexport class MessageInfoRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.MessageInfo) public MessageInfoModel: typeof MessageInfo,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<MessageInfo>> {\n        const list = await this.MessageInfoModel.fetchAll();\n        return list as Bookshelf.Collection<MessageInfo>;\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<MessageInfo> {\n        return this.MessageInfoModel.fetchById(id, withRelated);\n    }\n\n    public async create(data: any): Promise<MessageInfo> {\n        const messageInfo = this.MessageInfoModel.forge<MessageInfo>(data);\n        try {\n            const messageInfoCreated = await messageInfo.save();\n            return this.MessageInfoModel.fetchById(messageInfoCreated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not create the messageInfo!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<MessageInfo> {\n        const messageInfo = this.MessageInfoModel.forge<MessageInfo>({ id });\n        try {\n            const messageInfoUpdated = await messageInfo.save(data, { patch: true });\n            return this.MessageInfoModel.fetchById(messageInfoUpdated.id);\n        } catch (error) {\n            throw new DatabaseException('Could not update the messageInfo!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let messageInfo = this.MessageInfoModel.forge<MessageInfo>({ id });\n        try {\n            messageInfo = await messageInfo.fetch({ require: true });\n        } catch (error) {\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await messageInfo.destroy();\n            return;\n        } catch (error) {\n            throw new DatabaseException('Could not delete the messageInfo!', error);\n        }\n    }\n\n}\n"]}