{"version":3,"file":"ListingItemRepository.js","sourceRoot":"","sources":["../../../src/api/repositories/ListingItemRepository.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as Bookshelf from 'bookshelf';\nimport { inject, named } from 'inversify';\nimport { Types, Core, Targets } from '../../constants';\nimport { ListingItem } from '../models/ListingItem';\nimport { DatabaseException } from '../exceptions/DatabaseException';\nimport { NotFoundException } from '../exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\nimport { ListingItemSearchParams } from '../requests/ListingItemSearchParams';\n\nexport class ListingItemRepository {\n\n    public log: LoggerType;\n\n    constructor(\n        @inject(Types.Model) @named(Targets.Model.ListingItem) public ListingItemModel: typeof ListingItem,\n        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType\n    ) {\n        this.log = new Logger(__filename);\n    }\n\n    public async findAll(): Promise<Bookshelf.Collection<ListingItem>> {\n        const list = await this.ListingItemModel.fetchAll();\n        return list as Bookshelf.Collection<ListingItem>;\n    }\n\n    public async findByCategory(categoryId: number, withRelated: boolean = true): Promise<Bookshelf.Collection<ListingItem>> {\n        return await this.ListingItemModel.fetchByCategory(categoryId, withRelated);\n    }\n\n    public async findOne(id: number, withRelated: boolean = true): Promise<ListingItem> {\n        return this.ListingItemModel.fetchById(id, withRelated);\n    }\n\n    public async findExpired(): Promise<Bookshelf.Collection<ListingItem>> {\n        return this.ListingItemModel.fetchExpired();\n    }\n\n\n    /**\n     *\n     * @param {string} hash\n     * @param {boolean} withRelated\n     * @returns {Promise<ListingItem>}\n     */\n    public async findOneByHash(hash: string, withRelated: boolean = true): Promise<ListingItem> {\n        return this.ListingItemModel.fetchByHash(hash, withRelated);\n    }\n\n    /**\n     *\n     * @param {ListingItemSearchParams} options\n     * @param {boolean} withRelated\n     * @returns {Promise<Bookshelf.Collection<ListingItem>>}\n     */\n    public async search(options: ListingItemSearchParams, withRelated: boolean): Promise<Bookshelf.Collection<ListingItem>> {\n        return this.ListingItemModel.searchBy(options, withRelated);\n    }\n\n    public async create(data: any): Promise<ListingItem> {\n        const listingItem = this.ListingItemModel.forge<ListingItem>(data);\n        try {\n            const listingItemCreated = await listingItem.save();\n            const result = this.ListingItemModel.fetchById(listingItemCreated.id);\n            return result;\n        } catch (error) {\n            this.log.error(error);\n            throw new DatabaseException('Could not create the listingItem!', error);\n        }\n    }\n\n    public async update(id: number, data: any): Promise<ListingItem> {\n        const listingItem = this.ListingItemModel.forge<ListingItem>({ id });\n        try {\n            const listingItemUpdated = await listingItem.save(data, { patch: true });\n            return this.ListingItemModel.fetchById(listingItemUpdated.id);\n        } catch (error) {\n            this.log.error(error);\n            throw new DatabaseException('Could not update the listingItem!', error);\n        }\n    }\n\n    public async destroy(id: number): Promise<void> {\n        let listingItem = this.ListingItemModel.forge<ListingItem>({ id });\n        try {\n            listingItem = await listingItem.fetch({ require: true });\n        } catch (error) {\n            this.log.error(error);\n            throw new NotFoundException(id);\n        }\n\n        try {\n            await listingItem.destroy();\n            return;\n        } catch (error) {\n            this.log.error(error);\n            throw new DatabaseException('Could not delete the listingItem!', error);\n        }\n    }\n\n}\n"]}