{"version":3,"file":"WinstonAdapter.js","sourceRoot":"","sources":["../../../src/config/logger/WinstonAdapter.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;AAEjF;;;;;;;;GAQG;AAEH,mCAAmC;AACnC,gEAA6D;AAC7D,wDAAqD;AAGrD;IAII,YAAoB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;QAC7B,MAAM,IAAI,GAAQ;YACd,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC;gBAC3B,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,SAAS;gBAC5B,SAAS,EAAE,IAAI;gBACf,gBAAgB,EAAE,yBAAW,CAAC,YAAY,EAAE;gBAC5C,IAAI,EAAE,yBAAW,CAAC,YAAY,EAAE;gBAChC,QAAQ,EAAE,CAAC,yBAAW,CAAC,YAAY,EAAE;aACxC,CAAC;SACL,CAAC;QAEF,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,IAAI,CACL,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;gBACxB,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,SAAS;gBAC5B,QAAQ,EAAE,iBAAO,CAAC,UAAU,EAAE;gBAC9B,gBAAgB,EAAE,yBAAW,CAAC,YAAY,EAAE;gBAC5C,IAAI,EAAE,yBAAW,CAAC,YAAY,EAAE;gBAChC,OAAO,EAAE,QAAQ;gBACjB,QAAQ,EAAE,CAAC;gBACX,QAAQ,EAAE,KAAK;aAClB,CAAC,CAAC,CAAC;QACZ,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC;YAC7B,UAAU,EAAE,IAAI;YAChB,WAAW,EAAE,KAAK;SACrB,CAAC,CAAC;IACP,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,GAAG,IAAW;QACxC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAChF,CAAC;IAEM,IAAI,CAAC,OAAe,EAAE,GAAG,IAAW;QACvC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/E,CAAC;IAEM,IAAI,CAAC,OAAe,EAAE,GAAG,IAAW;QACvC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/E,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,GAAG,IAAW;QACxC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAChF,CAAC;IAEO,SAAS,CAAC,IAAW;QACzB,MAAM,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;IAC/D,CAAC;IAEO,WAAW;QACf,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC;IAC7B,CAAC;CAEJ;AA1DD,wCA0DC","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\n/**\n * core.log.WinstonAdapter\n * ------------------------------------------------\n *\n * This adapter uses the winston module to print all logs\n * to the terminal.\n *\n * Remote logging can be added here to this adapter.\n */\n\nimport * as winston from 'winston';\nimport { Environment } from '../../core/helpers/Environment';\nimport { DataDir } from '../../core/helpers/DataDir';\n\n\nexport class WinstonAdapter implements interfaces.LoggerAdapter {\n\n    private logger: winston.LoggerInstance;\n\n    constructor(private scope: string) {\n        const logs: any = [\n            new winston.transports.Console({\n                level: process.env.LOG_LEVEL,\n                timestamp: true,\n                handleExceptions: Environment.isProduction(),\n                json: Environment.isProduction(),\n                colorize: !Environment.isProduction()\n            })\n        ];\n\n        if (process.env.LOG_PATH) {\n            logs.push(\n                new winston.transports.File({\n                    level: process.env.LOG_LEVEL,\n                    filename: DataDir.getLogFile(),\n                    handleExceptions: Environment.isProduction(),\n                    json: Environment.isProduction(),\n                    maxsize: 52428800, // 50MB\n                    maxFiles: 5,\n                    colorize: false\n                }));\n        }\n\n        this.logger = new winston.Logger({\n            transports: logs,\n            exitOnError: false\n        });\n    }\n\n    public debug(message: string, ...args: any[]): void {\n        this.logger.debug(`${this.formatScope()} ${message}`, this.parseArgs(args));\n    }\n\n    public info(message: string, ...args: any[]): void {\n        this.logger.info(`${this.formatScope()} ${message}`, this.parseArgs(args));\n    }\n\n    public warn(message: string, ...args: any[]): void {\n        this.logger.warn(`${this.formatScope()} ${message}`, this.parseArgs(args));\n    }\n\n    public error(message: string, ...args: any[]): void {\n        this.logger.error(`${this.formatScope()} ${message}`, this.parseArgs(args));\n    }\n\n    private parseArgs(args: any[]): any {\n        return (args && args[0] && args[0].length > 0) ? args : '';\n    }\n\n    private formatScope(): string {\n        return `[${this.scope}]`;\n    }\n\n}\n"]}