{"version":3,"file":"Server.js","sourceRoot":"","sources":["../../src/core/Server.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\n/**\n * core.Server\n * ------------------------------------\n *\n * The Server class is responsible to listen to http server\n * events and to react to it.\n */\n\nimport * as http from 'http';\nimport * as express from 'express';\nimport { Logger } from './Logger';\nimport { Environment } from './helpers/Environment';\nimport { SwaggerUI } from './SwaggerUI';\nimport { ApiMonitor } from './ApiMonitor';\nimport { ApiInfo } from './ApiInfo';\nimport { CliIndex } from './CliIndex';\n\n\nexport class Server {\n\n    /**\n     * Normalize port for the express application\n     *\n     * @param {string} port\n     * @returns {(number | string | boolean)}\n     *\n     * @memberof Server\n     */\n    public static normalizePort(port: string): number | string | boolean {\n        const parsedPort = parseInt(port, 10);\n        if (isNaN(parsedPort)) { // named pipe\n            return port;\n        }\n        if (parsedPort >= 0) { // port number\n            return parsedPort;\n        }\n        return false;\n    }\n\n    private log = new Logger(__filename);\n\n    constructor(public httpServer: http.Server) { }\n\n    /**\n     * Listen to the given http server\n     *\n     * @param {http.Server} httpServer\n     * @param {express.Application} app\n     *\n     * @memberof Server\n     */\n    public use(app: express.Application): void {\n        this.httpServer.on('listening', () => {\n            this.onStartUp(app);\n        });\n        this.httpServer.on('error', (error) => {\n            this.onError(error);\n        });\n    }\n\n    /**\n     * This is called when the server has started and is ready.\n     *\n     *\n     * @memberof Server\n     */\n    public onStartUp(app: express.Application): void {\n        this.log.debug(``);\n        this.log.debug(`Aloha, your app is ready on ${app.get('host')}:${app.get('port')}${process.env.APP_URL_PREFIX}`);\n        this.log.debug(`To shut it down, press <CTRL> + C at any time.`);\n        this.log.debug(``);\n        this.log.debug('-------------------------------------------------------');\n        this.log.debug(`Environment  : ${Environment.getNodeEnv()}`);\n        // this.log.debug(`Version      : ${Environment.getPkg().version}`);\n        this.log.debug(``);\n        if (Environment.isTruthy(process.env.API_INFO_ENABLED)) {\n            this.log.debug(`API Info     : ${app.get('host')}:${app.get('port')}${ApiInfo.getRoute()}`);\n        }\n        if (Environment.isTruthy(process.env.SWAGGER_ENABLED)) {\n            this.log.debug(`Swagger      : ${app.get('host')}:${app.get('port')}${SwaggerUI.getRoute()}`);\n        }\n        if (Environment.isTruthy(process.env.CLI_ENABLED)) {\n            this.log.debug(`CLI          : ${app.get('host')}:${app.get('port')}${CliIndex.getRoute()}`);\n        }\n        if (Environment.isTruthy(process.env.MONITOR_ENABLED)) {\n            this.log.debug(`Monitor      : ${app.get('host')}:${app.get('port')}${ApiMonitor.getRoute()}`);\n        }\n\n        this.log.debug(`RPCServer    : ${app.get('host')}:${app.get('port')}/api/rpc`);\n        this.log.debug('-------------------------------------------------------');\n        this.log.debug('');\n    }\n\n    /**\n     * This is called when the server throws an error like the given\n     * port is already used\n     *\n     * @param {*} error\n     *\n     * @memberof Server\n     */\n    public onError(error: any): void {\n        if (error.syscall !== 'listen') {\n            throw error;\n        }\n        switch (error.code) {\n            case 'EACCES':\n                this.log.error('The Server requires elevated privileges: ', error);\n                process.exit(1);\n                break;\n            case 'EADDRINUSE':\n                this.log.error('Port is already in use or blocked by the os: ', error);\n                process.exit(1);\n                break;\n            default:\n                throw error;\n        }\n    }\n\n}\n"]}