{"version":3,"file":"App.js","sourceRoot":"","sources":["../../src/core/App.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as express from 'express';\nimport { Container } from 'inversify';\nimport { InversifyExpressServer } from 'inversify-express-utils';\nimport { Logger } from './Logger';\nimport { LoggerConfig } from '../config/LoggerConfig';\nimport { Bootstrap } from './Bootstrap';\nimport { Server } from './Server';\nimport { IoC } from './IoC';\nimport { AppConfig } from '../config/AppConfig';\nimport { Types, Core } from '../constants';\nimport { EventEmitter } from './api/events';\nimport { ServerStartedListener } from '../api/listeners/ServerStartedListener';\nimport { SocketIoServer } from './SocketIoServer';\nimport { EnvConfig } from '../config/env/EnvConfig';\nimport { ProductionEnvConfig } from '../config/env/ProductionEnvConfig';\nimport { DataDir } from './helpers/DataDir';\nimport * as databaseMigrate from '../database/migrate';\nimport {Environment} from './helpers/Environment';\n\n\nexport interface Configurable {\n    configure(app: App): void;\n}\n\nexport class App {\n\n    private express: express.Application = express();\n    private server: Server;\n    private socketIoServer: SocketIoServer;\n    private inversifyExpressServer: InversifyExpressServer;\n    private ioc: IoC = new IoC();\n    private log: Logger = new Logger(__filename);\n    private bootstrapApp: Bootstrap;\n    private configurations: Configurable[] = [];\n    private envConfig: EnvConfig;\n\n    constructor(envConfig?: EnvConfig) {\n\n        // if envConfig isn't given, use ProductionEnvConfig\n        this.envConfig = !envConfig ? new ProductionEnvConfig() : envConfig;\n        this.bootstrapApp = new Bootstrap(this.envConfig);\n\n        // Configure the logger, because we need it already.\n        const loggerConfig = new LoggerConfig();\n        loggerConfig.configure();\n\n        if (process.env.EXPRESS_ENABLED) {\n            this.log.info('Defining app...');\n            this.bootstrapApp.defineExpressApp(this.express);\n        }\n    }\n\n    get IoC(): Container {\n        return this.ioc.container;\n    }\n\n    get Express(): express.Application {\n        return this.express;\n    }\n\n    get Server(): Server {\n        return this.server;\n    }\n\n    public Logger(scope: string): Logger {\n        return new Logger(scope || __filename);\n    }\n\n    public configure(configurations: Configurable): void {\n        this.configurations.push(configurations);\n    }\n\n    /**\n     * ..called from app.ts\n     *\n     * @returns {Promise<EventEmitter>}\n     */\n    public async bootstrap(): Promise<any> {\n        this.log.info('Configuring app...');\n\n        if (Environment.isTruthy(process.env.INIT)) {\n            await DataDir.createDefaultEnvFile()\n                .catch(reason => {\n                    this.log.error('Error: ', JSON.stringify(reason, null, 2));\n                    // TODO: exit codes for different problems\n                    return process.exit(1);\n                });\n        }\n\n        // Perform database migrations\n        // TODO: migrate fails when db is created from the desktop and when run from the marketplace project and vice versa\n        if (Environment.isTruthy(process.env.MIGRATE)) {\n            const result = await databaseMigrate.migrate();\n            this.log.error('migration result: ', JSON.stringify(result, null, 2));\n        } else {\n            this.log.debug('Skipping database migration.');\n        }\n\n        if (Environment.isTruthy(process.env.EXPRESS_ENABLED)) {\n            // Add express monitor app\n            this.bootstrapApp.setupMonitor(this.express);\n            // Configure the app config for all the middlewares\n            const appConfig = new AppConfig();\n            appConfig.configure(this);\n            // Configure all custom configurations\n            this.configurations.forEach((c) => c.configure(this));\n        }\n\n        // Setup the ioc of inversify\n        this.log.info('Binding IoC modules...');\n        await this.ioc.bindModules();\n\n        if (Environment.isTruthy(process.env.EXPRESS_ENABLED)) {\n            this.log.info('Setting up IoC...');\n            this.inversifyExpressServer = this.bootstrapApp.setupInversifyExpressServer(this.express, this.ioc);\n            this.express = this.bootstrapApp.bindInversifyExpressServer(this.express, this.inversifyExpressServer);\n            this.bootstrapApp.setupCoreTools(this.express);\n            this.log.info('Starting app...');\n\n            this.server = new Server(this.bootstrapApp.startServer(this.express));\n            this.server.use(this.express);\n        }\n\n        if (Environment.isTruthy(process.env.SOCKETIO_ENABLED)) {\n            // create our socketioserver\n            this.socketIoServer = this.bootstrapApp.createSocketIoServer(this.server, this.ioc);\n        }\n\n        this.log.info('App is ready!');\n\n        const eventEmitter = this.ioc.container.getNamed<EventEmitter>(Types.Core, Core.Events);\n        eventEmitter.emit(ServerStartedListener.Event, 'Hello!');\n\n        return eventEmitter;\n    }\n\n}\n"]}