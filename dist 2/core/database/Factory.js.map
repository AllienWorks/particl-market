{"version":3,"file":"Factory.js","sourceRoot":"","sources":["../../../src/core/database/Factory.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;AAEjF;;;GAGG;AAEH,+BAA+B;AAE/B,2CAAwC;AACxC,iDAA8C;AAG9C;IAaI,YAAoB,KAAwB;QAAxB,UAAK,GAAL,KAAK,CAAmB;QACxC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACzB,CAAC;IAbM,MAAM,CAAC,WAAW;QACrB,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;YACpB,OAAO,CAAC,QAAQ,GAAG,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC;QAC1C,CAAC;QACD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;IAC5B,CAAC;IAUM,MAAM,CAAC,WAAgB,EAAE,QAAwD;QACpF,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,GAAG,IAAI,qBAAS,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IAC7F,CAAC;IAEM,GAAG,CAAC,WAAgB,EAAE,GAAG,IAAW;QACvC,MAAM,CAAC,IAAI,2BAAY,CACnB,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,EACjD,IAAI,CACP,CAAC;IACN,CAAC;IAEO,cAAc,CAAC,KAA6B;QAChD,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC;IACxC,CAAC;CAEJ;AAjCD,0BAiCC","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\n/**\n * core.database.Factory\n * ------------------------------------------------\n */\n\nimport * as Faker from 'faker';\nimport * as bookshelf from 'bookshelf';\nimport { BluePrint } from './BluePrint';\nimport { ModelFactory } from './ModelFactory';\n\n\nexport class Factory {\n\n    public static getInstance(): Factory {\n        if (!Factory.instance) {\n            Factory.instance = new Factory(Faker);\n        }\n        return Factory.instance;\n    }\n\n    private static instance: Factory;\n\n    private blueprints: { [key: string]: BluePrint };\n\n    constructor(private faker: Faker.FakerStatic) {\n        this.blueprints = {};\n    }\n\n    public define(ModelStatic: any, callback: (faker: Faker.FakerStatic, args: any[]) => any): void {\n        this.blueprints[this.getNameOfModel(ModelStatic)] = new BluePrint(ModelStatic, callback);\n    }\n\n    public get(ModelStatic: any, ...args: any[]): ModelFactory {\n        return new ModelFactory(\n            this.faker,\n            this.blueprints[this.getNameOfModel(ModelStatic)],\n            args\n        );\n    }\n\n    private getNameOfModel(Model: typeof bookshelf.Model): string {\n        return new Model().constructor.name;\n    }\n\n}\n"]}