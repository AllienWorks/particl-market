{"version":3,"file":"ShippingZips.js","sourceRoot":"","sources":["../../../src/core/helpers/ShippingZips.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { NotFoundException } from '../../api/exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nimport postalCodes from 'postal-codes-js';\n\nexport class ShippingZips {\n    public static isCountryCodeSupported( countryCode: string ): boolean {\n        if ( !countryCode ) {\n            return false;\n        }\n        countryCode = countryCode.toString().toUpperCase();\n\n        // Countries not supported by the lib but should be.\n        switch ( countryCode ) {\n            case 'AQ':\n            case 'GS':\n            case 'IO':\n            case 'NI':\n            case 'PN':\n            case 'TF':\n            case 'UM':\n            case 'AG':\n            case 'AE':\n            case 'AO':\n            case 'BF':\n            case 'BI':\n            case 'BJ':\n            case 'BM':\n            case 'BQ':\n            case 'BS':\n            case 'BW':\n            case 'BZ':\n            // Below here haven't had their zips programmed into validate()\n            case 'CD':\n            case 'CF':\n            case 'CG':\n            case 'CI':\n            case 'CK':\n            case 'CM':\n            case 'DJ':\n            case 'DM':\n            case 'ER':\n            case 'FJ':\n            case 'GA':\n            case 'GD':\n            case 'GH':\n            case 'GM':\n            case 'GQ':\n            case 'GY':\n            case 'HK':\n            case 'IE':\n            case 'KI':\n            case 'KM':\n            case 'KN':\n            case 'KP':\n            case 'ML':\n            case 'MO':\n            case 'MR':\n            case 'MW':\n            case 'NR':\n            case 'NU':\n            case 'QA':\n            case 'RW':\n            case 'SB':\n            case 'SC':\n            case 'SS':\n            case 'SL':\n            case 'SR':\n            case 'ST':\n            case 'SY':\n            case 'TG':\n            case 'TK':\n            case 'TL':\n            case 'TO':\n            case 'TV':\n            case 'UG':\n            case 'VU':\n            case 'YE':\n            case 'ZW':\n                return true;\n        }\n\n        try {\n            const retval = postalCodes.validate(countryCode, '___SOMETHINGTHATISNTAPOSTCODE___');\n            const regex = new RegExp('^(Missing country code.|Unknown alpha2/alpha3 country code: )');\n            return ( regex.test(retval) === false );\n        } catch ( ex ) {\n            return false;\n        }\n    }\n\n    /*\n     */\n    public static validate( countryCode: string, zip: string ): boolean {\n        return true;\n        //\n        // countryCode = countryCode.toString().toUpperCase();\n        // zip = zip.toString().toUpperCase();\n        //\n        // // Non-standard postal codes\n        // switch ( countryCode ) {\n        //     case 'AQ':\n        //     case 'GS':\n        //     case 'IO':\n        //     case 'NI':\n        //     case 'PN':\n        //     case 'TF':\n        //     case 'UM':\n        //     case 'AG':\n        //     case 'AE':\n        //     case 'AO':\n        //     case 'BF':\n        //     case 'BI':\n        //     case 'BJ':\n        //     case 'BM':\n        //     case 'BQ':\n        //     case 'BS':\n        //     case 'BW':\n        //     case 'BZ':\n        //     // Below here haven't had their zips programmed into validate()\n        //     case 'CD':\n        //     case 'CF':\n        //     case 'CG':\n        //     case 'CI':\n        //     case 'CK':\n        //     case 'CM':\n        //     case 'DJ':\n        //     case 'DM':\n        //     case 'ER':\n        //     case 'FJ':\n        //     case 'GA':\n        //     case 'GD':\n        //     case 'GH':\n        //     case 'GM':\n        //     case 'GQ':\n        //     case 'GY':\n        //     case 'HK':\n        //     case 'IE':\n        //     case 'KI':\n        //     case 'KM':\n        //     case 'KN':\n        //     case 'KP':\n        //     case 'ML':\n        //     case 'MO':\n        //     case 'MR':\n        //     case 'MW':\n        //     case 'NR':\n        //     case 'NU':\n        //     case 'QA':\n        //     case 'RW':\n        //     case 'SB':\n        //     case 'SC':\n        //     case 'SS':\n        //     case 'SL':\n        //     case 'SR':\n        //     case 'ST':\n        //     case 'SY':\n        //     case 'TG':\n        //     case 'TK':\n        //     case 'TL':\n        //     case 'TO':\n        //     case 'TV':\n        //     case 'UG':\n        //     case 'VU':\n        //     case 'YE':\n        //     case 'ZW':\n        //         return true;\n        //         // Below may be regions / states, or may be postal regions, not clear\n        //      case 'AG': {\n        //         // https://en.wikipedia.org/wiki/ISO_3166-2:AG\n        //         const regex = new RegExp('^[ \\t]*AG[ \\t-]*(03|04|05|06|07|08|10|11)[ \\t]*$');\n        //         if ( regex.test(zip) ) {\n        //             return true;\n        //         }\n        //         return false;\n        //     }\n        //     case 'AE': {\n        //         // https://en.wikipedia.org/wiki/ISO_3166-2:AE\n        //         const regex = new RegExp('^[ \\t]*AE[ \\t-]*(AZ|AJ|FU|SH|DU|RK|UQ)[ \\t]*$');\n        //         if ( regex.test(zip) ) {\n        //             return true;\n        //         }\n        //         return false;\n        //     }\n        //     case 'AO': {\n        //         // https://en.wikipedia.org/wiki/ISO_3166-2:AE\n        //         const regex = new RegExp('^[ \\t]*AO[ \\t-]*(BGO|BGU|BIE|CAB|CNN|HUA|HUI|CCU|CNO|CUS|LUA|LNO|LSU|MAL|MOX|NAM|UIG|ZAI)[ \\t]*$');\n        //         if ( regex.test(zip) ) {\n        //             return true;\n        //         }\n        //         return false;\n        //     }\n        //     case 'BF': {\n        //         // https://en.wikipedia.org/wiki/ISO_3166-2:AE\n        //         const regex = new RegExp('^[ \\t]*BF[ \\t-]*(01|02|03|04|05|06|07|08|09|10|11|12|13)[ \\t-]*'\n        //         + '(BAL|BAM|BAN|BAZ|BGR|BLG|BLK|COM|GAN|GNA|GOU|HOU|IOB|KAD|KEN|KMD|KMP|KOS|KOP|KOT|KOW|LER|LOR|MOU|NAO|NAM|NAY|NOU|OUB|OUD|PAS|PON|SNG'\n        //         + '|SMT|SEN|SIS|SOM|SOR|TAP|TUI|YAG|YAT|ZIR|ZON|ZOU)[ \\t]*$');\n        //         if ( regex.test(zip) ) {\n        //             return true;\n        //         }\n        //         return false;\n        //     }\n        //     case 'BI': {\n        //         // https://en.wikipedia.org/wiki/ISO_3166-2:AE\n        //         const regex = new RegExp('^[ \\t]*BI[ \\t-]*(BB|BM|BL|BR|CA|CI|GI|KR|KY|KI|MA|MU|MY|MW|NG|RM|RT|RY)[ \\t]*$');\n        //         if ( regex.test(zip) ) {\n        //             return true;\n        //         }\n        //         return false;\n        //     }\n        //     case 'BJ': {\n        //         // https://en.wikipedia.org/wiki/ISO_3166-2:AE\n        //         const regex = new RegExp('^[ \\t]*BJ[ \\t-]*(AL|AK|AQ|BO|CO|KO|DO|LI|MO|OU|PL|ZO)[ \\t]*$');\n        //         if ( regex.test(zip) ) {\n        //             return true;\n        //         }\n        //         return false;\n        //     }\n        //     case 'BQ': {\n        //         // https://en.wikipedia.org/wiki/ISO_3166-2:AE\n        //         const regex = new RegExp('^[ \\t]*BQ[ \\t-]*(BO|SA|SE)[ \\t]*$');\n        //         if ( regex.test(zip) ) {\n        //             return true;\n        //         }\n        //         return false;\n        //     }\n        //     case 'BS': {\n        //         // https://en.wikipedia.org/wiki/ISO_3166-2:AE\n        //         const regex = new RegExp('^[ \\t]*BS[ \\t-]*(AK|BY|BI|BP|CI|CO|CS|CE|FP|CK|EG|EX|GC|HI|HT|IN|LI|'\n        //         + 'MC|MG|MI|NO|NS|NE|RI|RC|SS|SO|SA|SE|SW|WG)[ \\t]*$');\n        //         if ( regex.test(zip) ) {\n        //             return true;\n        //         }\n        //         return false;\n        //     }\n        //     case 'BW': {\n        //         // https://en.wikipedia.org/wiki/ISO_3166-2:AE\n        //         const regex = new RegExp('^[ \\t]*BW[ \\t-]*(CE|CH|FR|GA|GH|JW|KG|KL|KW|LO|NE|NW|SP|SE|SO|ST)[ \\t]*$');\n        //         if ( regex.test(zip) ) {\n        //             return true;\n        //         }\n        //         return false;\n        //     }\n        //     case 'BZ': {\n        //         // https://en.wikipedia.org/wiki/ISO_3166-2:AE\n        //         const regex = new RegExp('^[ \\t]*BZ[ \\t-]*(BZ|CY|CZL|OW|SC|TOL)[ \\t]*$');\n        //         if ( regex.test(zip) ) {\n        //             return true;\n        //         }\n        //         return false;\n        //     }\n        //     case 'NI': {\n        //         // https://en.wikipedia.org/wiki/ISO_3166-2:NI\n        //         const regex = new RegExp('^[ \\t]*NI[ \\t-]*(BO|CA|CI|CO|ES|GR|JI|LE|MD|MN|MS|MT|NS|SJ|RI|AN|AS)[ \\t]*$');\n        //         if ( regex.test(zip) ) {\n        //             return true;\n        //         }\n        //         return false;\n        //     }\n        //     case 'UM': {\n        //         // https://en.wikipedia.org/wiki/ISO_3166-2:UM\n        //         const regex = new RegExp('^[ \\t]*UM[ \\t-]*(81|84|86|67|89|71|76|95|79)[ \\t]*$');\n        //         if ( regex.test(zip) ) {\n        //             return true;\n        //         }\n        //         return false;\n        //     }\n        // }\n        //\n        // return postalCodes.validate(countryCode, zip) === true;\n    }\n}\n"]}