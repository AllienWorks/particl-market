{"version":3,"file":"Environment.js","sourceRoot":"","sources":["../../../src/core/helpers/Environment.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;AAEjF;;;;;GAKG;AAEH,IAAY,eAQX;AARD,WAAY,eAAe;IACvB,8BAAW,CAAA;IACX,4CAAyB,CAAA;IACzB,gCAAa,CAAA;IACb,wCAAqB,CAAA;IACrB,kCAAe,CAAA;IACf,8CAA2B,CAAA;IAC3B,0CAAqB,CAAA;AACzB,CAAC,EARW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAQ1B;AAED;IAEW,MAAM,CAAC,UAAU;QACpB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,eAAe,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IACtE,CAAC;IAEM,MAAM,CAAC,MAAM;QAChB,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,EAAE,CAAC,CAAE,OAAQ,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACrE,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEM,MAAM,CAAC,cAAc;QACxB,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,EAAE,CAAC,CAAE,OAAQ,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,eAAe,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACzE,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEM,MAAM,CAAC,aAAa;QACvB,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,EAAE,CAAC,CAAE,OAAQ,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,eAAe,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QAC5E,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEM,MAAM,CAAC,YAAY;QACtB,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,EAAE,CAAC,CAAE,OAAQ,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,eAAe,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;QAC3E,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEM,MAAM,CAAC,OAAO;QACjB,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,EAAE,CAAC,CAAE,OAAQ,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,eAAe,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACtE,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEM,MAAM,CAAC,SAAS;QACnB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;IAChE,CAAC;IAEM,MAAM,CAAC,SAAS;QACnB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC;IAEM,MAAM,CAAC,QAAQ,CAAC,IAAY;QAC/B,IAAI,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC;QACzC,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;IACL,CAAC;CAEJ;AA9DD,kCA8DC","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\n/**\n * core.Environment\n * ------------------------------------\n *\n * Helps us to simplify 'process.env'.\n */\n\nexport enum EnvironmentType {\n    ALL = 'ALL',\n    PRODUCTION = 'PRODUCTION',\n    TEST = 'TEST',\n    BLACKBOX = 'BLACKBOX',\n    ALPHA = 'ALPHA',\n    DEVELOPMENT = 'DEVELOPMENT',\n    DEFAULT = DEVELOPMENT\n}\n\nexport class Environment {\n\n    public static getNodeEnv(): string {\n        return process.env.NODE_ENV || EnvironmentType.DEFAULT.toString();\n    }\n\n    public static isTest(): boolean {\n        const nodeEnv = this.getNodeEnv();\n        if ( nodeEnv ) {\n            return nodeEnv.toUpperCase() === EnvironmentType.TEST.toString();\n        }\n        return false;\n    }\n\n    public static isBlackBoxTest(): boolean {\n        const nodeEnv = this.getNodeEnv();\n        if ( nodeEnv ) {\n            return nodeEnv.toUpperCase() === EnvironmentType.BLACKBOX.toString();\n        }\n        return false;\n    }\n\n    public static isDevelopment(): boolean {\n        const nodeEnv = this.getNodeEnv();\n        if ( nodeEnv ) {\n            return nodeEnv.toUpperCase() === EnvironmentType.DEVELOPMENT.toString();\n        }\n        return false;\n    }\n\n    public static isProduction(): boolean {\n        const nodeEnv = this.getNodeEnv();\n        if ( nodeEnv ) {\n            return nodeEnv.toUpperCase() === EnvironmentType.PRODUCTION.toString();\n        }\n        return false;\n    }\n\n    public static isAlpha(): boolean {\n        const nodeEnv = this.getNodeEnv();\n        if ( nodeEnv ) {\n            return nodeEnv.toUpperCase() === EnvironmentType.ALPHA.toString();\n        }\n        return false;\n    }\n\n    public static isTestnet(): boolean {\n        return this.isTruthy(process.env.TESTNET) || this.isAlpha();\n    }\n\n    public static isRegtest(): boolean {\n        return this.isTruthy(process.env.REGTEST);\n    }\n\n    public static isTruthy(bool: string): boolean {\n        try {\n            return bool.toLowerCase() === 'true';\n        } catch (e) {\n            return false;\n        }\n    }\n\n}\n"]}