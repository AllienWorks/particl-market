{"version":3,"file":"ObjectHash.js","sourceRoot":"","sources":["../../../src/core/helpers/ObjectHash.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;AAEjF,oCAAoC;AAEpC,2EAAwE;AACxE,+DAA4D;AAC5D,2DAAwD;AACxD,mDAAgD;AAChD,yDAAsD;AACtD,qEAAkE;AAClE,sCAAiD;AAGjD;IAEI;;;;;;;OAOG;IACI,MAAM,CAAC,OAAO,CACjB,YAAiB,EACjB,IAAwB,EACxB,YAAmB,EAAE;QAGrB,MAAM,GAAG,GAAe,IAAI,eAAU,CAAC,UAAU,CAAC,CAAC;QAEnD,IAAI,cAAc,CAAC;QACnB,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,KAAK,uCAAkB,CAAC,yBAAyB,CAAC;YAClD,KAAK,uCAAkB,CAAC,iCAAiC,CAAC;YAC1D,KAAK,uCAAkB,CAAC,WAAW,CAAC;YACpC,KAAK,uCAAkB,CAAC,mBAAmB,EAAE,CAAC;gBAC1C,MAAM,eAAe,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;gBAC9C,cAAc,GAAG,IAAI,yCAAmB,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;gBACxE,KAAK,CAAC;YACV,CAAC;YACD,KAAK,uCAAkB,CAAC,2BAA2B,CAAC;YACpD,KAAK,uCAAkB,CAAC,SAAS,EAAE,CAAC;gBAChC,cAAc,GAAG,IAAI,qCAAiB,CAAC,YAAY,CAAC,CAAC;gBACrD,KAAK,CAAC;YACV,CAAC;YACD,KAAK,uCAAkB,CAAC,mBAAmB,EAAE,CAAC;gBAC1C,cAAc,GAAG,IAAI,6BAAa,CAAC,YAAY,CAAC,CAAC;gBACjD,KAAK,CAAC;YACV,CAAC;YACD,KAAK,uCAAkB,CAAC,gBAAgB,CAAC;YACzC,KAAK,uCAAkB,CAAC,sBAAsB,EAAE,CAAC;gBAC7C,cAAc,GAAG,IAAI,mCAAgB,CAAC,YAAY,CAAC,CAAC;gBACpD,KAAK,CAAC;YACV,CAAC;YACD,KAAK,uCAAkB,CAAC,4BAA4B,EAAE,CAAC;gBACnD,cAAc,GAAG,IAAI,+CAAsB,CAAC,YAAY,CAAC,CAAC;gBAC1D,KAAK,CAAC;YACV,CAAC;YACD,KAAK,uCAAkB,CAAC,OAAO,EAAE,CAAC;gBAC9B,cAAc,GAAG,YAAY,CAAC;YAClC,CAAC;QACL,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;QAElG,yCAAyC;QACzC,2FAA2F;QAC3F,gDAAgD;QAChD,IAAI;QAEJ,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;CACJ;AA5DD,gCA4DC","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as crypto from 'crypto-js';\nimport * as _ from 'lodash';\nimport { HashableObjectType } from '../../api/enums/HashableObjectType';\nimport { HashableListingItem } from './HashableListingItem';\nimport { HashableItemImage } from './HashableItemImage';\nimport { HashableOrder } from './HashableOrder';\nimport { HashableProposal } from './HashableProposal';\nimport { HashableProposalOption } from './HashableProposalOption';\nimport { Logger as LoggerType } from '../Logger';\nimport {MessageException} from '../../api/exceptions/MessageException';\n\nexport class ObjectHash {\n\n    /**\n     *\n     * @param objectToHash\n     * @param {HashableObjectType} type\n     * @param {string[]} extraData\n     * @param {boolean} timestampedHash\n     * @returns {string}\n     */\n    public static getHash(\n        objectToHash: any,\n        type: HashableObjectType,\n        extraData: any[] = []\n    ): string {\n\n        const log: LoggerType = new LoggerType(__filename);\n\n        let hashableObject;\n        switch (type) {\n            case HashableObjectType.LISTINGITEM_CREATEREQUEST:\n            case HashableObjectType.LISTINGITEMTEMPLATE_CREATEREQUEST:\n            case HashableObjectType.LISTINGITEM:\n            case HashableObjectType.LISTINGITEMTEMPLATE: {\n                const timestampedHash = extraData[0] || false;\n                hashableObject = new HashableListingItem(objectToHash, timestampedHash);\n                break;\n            }\n            case HashableObjectType.ITEMIMAGEDATA_CREATEREQUEST:\n            case HashableObjectType.ITEMIMAGE: {\n                hashableObject = new HashableItemImage(objectToHash);\n                break;\n            }\n            case HashableObjectType.ORDER_CREATEREQUEST: {\n                hashableObject = new HashableOrder(objectToHash);\n                break;\n            }\n            case HashableObjectType.PROPOSAL_MESSAGE:\n            case HashableObjectType.PROPOSAL_CREATEREQUEST: {\n                hashableObject = new HashableProposal(objectToHash);\n                break;\n            }\n            case HashableObjectType.PROPOSALOPTION_CREATEREQUEST: {\n                hashableObject = new HashableProposalOption(objectToHash);\n                break;\n            }\n            case HashableObjectType.DEFAULT: {\n                hashableObject = objectToHash;\n            }\n        }\n\n        const hash = crypto.SHA256(JSON.stringify(hashableObject).split('').sort().toString()).toString();\n\n        // if (process.env.NODE_ENV === 'test') {\n        //    log.debug('hashableObject, ' + type + ': ', JSON.stringify(hashableObject, null, 2));\n        //    log.debug('hashableObject, hash: ', hash);\n        // }\n\n        return hash;\n    }\n}\n"]}