{"version":3,"file":"DataDir.js","sourceRoot":"","sources":["../../../src/core/helpers/DataDir.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { Environment } from '../../core/helpers/Environment';\nimport * as os from 'os';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { envConfig } from '../../config/EnvironmentConfig';\nimport {EnvConfig} from '../../config/env/EnvConfig';\nimport {MessageException} from '../../api/exceptions/MessageException';\n\n/**\n * core.DataDir\n * ------------------------------------\n *\n * Manages the data directories for particl-market.\n *\n *  Linux:\n *  OSX:\n *  Windows:\n *\n *  In test and development environments\n */\nexport class DataDir {\n\n    public static getDataDirPath(): string {\n        if (!this.datadir) {\n            console.log('DataDir: not yet initialized.');\n            this.initialize(envConfig());\n        }\n        return this.datadir;\n    }\n\n    public static getDefaultDataDirPath(): string {\n\n        const homeDir: string = os.homedir ? os.homedir() : process.env['HOME'];\n\n        let dir = '';\n        const appName = 'particl-market';\n\n        switch (process.platform) {\n            case 'linux': {\n                dir = path.join(homeDir, '.' + appName);\n                break;\n            }\n\n            case 'darwin': {\n                dir = path.join(homeDir, 'Library', 'Application Support', appName);\n                break;\n            }\n\n            case 'win32': {\n                dir = path.join(process.env['APPDATA'], appName);\n                break;\n            }\n        }\n\n        // return path to datadir (mainnet vs testnet)\n        // and set the main datadir variable.\n        const dataDir = path.join(dir, (Environment.isRegtest() ? 'regtest' : ( Environment.isTestnet() ? 'testnet' : '') ));\n        return dataDir;\n    }\n\n    public static getUploadsPath(): string {\n        return path.join(this.getDataDirPath(), 'uploads');\n    }\n\n    public static getDatabasePath(): string {\n        return path.join(this.getDataDirPath(), 'database');\n    }\n\n    public static getDatabaseFile(): string {\n        const databaseFile = path.join(this.getDatabasePath(), 'marketplace.db');\n        return databaseFile;\n    }\n\n    public static getLogFile(): string {\n        return path.join(this.getDataDirPath(), process.env.LOG_PATH || 'marketplace.log');\n    }\n\n    public static checkIfExists(dir: string, expectFailure?: boolean): boolean {\n        try {\n            fs.accessSync(dir, (fs.constants || fs).R_OK);\n            // console.log('found:', dir);\n            return true;\n        } catch (err) {\n            if (!expectFailure) {\n                console.error('DataDir: Could not find path:', dir);\n                console.error(err);\n            }\n        }\n        return false;\n    }\n\n    public static initialize(env: EnvConfig): boolean {\n        console.log('DataDir: initializing folder structure..');\n\n        // if env contains custom datadir, use that. else use default.\n        if (env && env.dataDir) {\n            this.datadir = env.dataDir;\n        } else {\n            this.datadir = this.getDefaultDataDirPath();\n            env.dataDir = this.datadir;\n        }\n\n        const database = this.getDatabasePath();\n        const uploads = this.getUploadsPath();\n\n        console.log('initialize, datadir: ', this.datadir);\n        console.log('initialize, database: ', database);\n        console.log('initialize, uploads: ', uploads);\n\n        // may also be the particl-market/testnet\n        // so check if upper directory exists.\n        // TODO: what is this tesnet?!\n        if (this.datadir.endsWith('testnet') || this.datadir.endsWith('tesnet/') || this.datadir.endsWith('regtest')) {\n            const dir = path.dirname(this.datadir); // pop the 'testnet' folder name\n            if (!this.checkIfExists(dir, true)) {\n                fs.mkdirSync(dir);\n            }\n        }\n\n        if (!this.checkIfExists(this.datadir, true)) {\n            fs.mkdirSync(this.datadir);\n        }\n\n        if (!this.checkIfExists(database, true)) {\n            fs.mkdirSync(database);\n        }\n\n        if (!this.checkIfExists(uploads, true)) {\n            fs.mkdirSync(uploads);\n        }\n\n        console.log('DataDir: should have created all folders, checking..');\n\n        // do a final check, doesn't hurt.\n        const ok = this.check();\n        console.log('DataDir: is initialized: ', ok);\n\n        return ok;\n    }\n\n    public static check(): boolean {\n        const datadir = this.getDataDirPath();\n        const database = this.getDatabasePath();\n        const uploads = this.getUploadsPath();\n\n        return this.checkIfExists(datadir)\n                && this.checkIfExists(database)\n                && this.checkIfExists(uploads);\n    }\n\n    public static createDefaultEnvFile(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            // The .env file that we use as template is stored in different locations\n            // /somepath/particl-market/srcORdist/core/helpers -> /somepath/particl-market/srcORdist/\n            let dir = path.dirname(path.dirname(__dirname));\n            let dotenv;\n\n            const mask = path.dirname(dir);\n            const isDist: boolean = dir.replace(mask, '').replace(path.sep, '') === 'dist';\n\n            if (isDist) {\n                // running from a distributable\n                const try1 = path.join(dir, '.env');\n                if (this.checkIfExists(try1)) {\n                    console.log('found distributable .env', try1);\n                    dotenv = try1;\n                } else {\n                    console.error('distributable .env not found');\n                    reject('distributable .env not found');\n                }\n            } else {\n                // we're most likely running from source\n                dir = path.dirname(dir);\n                const try2 = path.join(dir, '.env');\n                if (this.checkIfExists(try2)) {\n                    console.log('DataDir: found the local .env', try2);\n                    dotenv = try2;\n                } else {\n                    console.error('DataDir: src .env not found');\n                    reject('src .env not found');\n                }\n            }\n\n            // copy .env to new location!\n            // TODO: error handling on streams\n            console.log('copying and potentially overwritting .env file');\n            const defaultDotEnvPath = path.join(this.getDataDirPath(), '.env');\n            fs.createReadStream(dotenv).pipe(fs.createWriteStream(defaultDotEnvPath))\n            .on('close', (ex) => {\n                if (ex) {\n                    reject(ex);\n                } else {\n                    // should have worked, now let's verify.\n                    resolve(this.checkIfExists(defaultDotEnvPath));\n                }\n            });\n        });\n    }\n\n    public static getDefaultMigrationsPath(): string {\n        return path.join(__dirname, '../../database/migrations');\n    }\n\n    public static getDefaultSeedsPath(): string {\n        return path.join(__dirname, '../../database/seeds');\n    }\n\n    private static datadir: string;\n\n}\n"]}