{"version":3,"file":"ShippingCountries.js","sourceRoot":"","sources":["../../../src/core/helpers/ShippingCountries.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport { getDataSet, reduce } from 'iso3166-2-db';\nimport { NotFoundException } from '../../api/exceptions/NotFoundException';\nimport { Logger as LoggerType } from '../../core/Logger';\n\nexport class ShippingCountries {\n    public static countryCodeList;\n    public static countryList;\n\n    public static initialize(): void {\n        this.countryCodeList = reduce(getDataSet(), 'en');\n        this.countryList = {}; // TODO: named as List even though it is not a list but an object,\n\n        for ( const x in this.countryCodeList ) {\n            if ( x ) {\n                this.countryList[this.countryCodeList[x].name.toUpperCase()] = x.toUpperCase();\n            }\n        }\n    }\n\n    /**\n     * TODO: desc\n     *\n     * @param countryCode\n     * @returns {boolean}\n     */\n    public static getCountry( countryCode: string ): string {\n        countryCode = countryCode.toString().toUpperCase();\n        if ( this.countryCodeList[countryCode] ) {\n            return this.countryCodeList[countryCode].iso;\n        }\n        throw new NotFoundException(`Could not find country code <${countryCode}>`);\n    }\n\n    /**\n     * TODO: desc\n     *\n     * @param country\n     * @returns {any}\n     */\n    public static getCountryCode( country: string ): string {\n        country = country.toString().toUpperCase();\n        if ( this.countryList[country] ) {\n            return this.countryList[country];\n        }\n        throw new NotFoundException(`Could not find country <${country}>`);\n    }\n\n    /**\n     * TODO: desc\n     *\n     * @param country\n     * @returns {boolean}\n     */\n    public static isValidCountry( country: string ): boolean {\n        country = country.toString().toUpperCase();\n        if ( this.countryList[country] ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * TODO: desc\n     *\n     * @param countryCode\n     * @returns {boolean}\n     */\n    public static isValidCountryCode( countryCode: string ): boolean {\n        countryCode = countryCode.toString().toUpperCase();\n        if ( this.countryCodeList[countryCode] ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Convert country to country code, if valid country.\n     * If country code and invalid, throw exception and print to log.\n     * TODO: remove log\n     * TODO: validate is not a method that should make conversion from country to countryCode\n     *\n     * @param log\n     * @param countryCode\n     * @returns {string}\n     */\n    public static validate( log: LoggerType, countryCode: string ): string {\n        countryCode = countryCode.toString().toUpperCase();\n        if ( ShippingCountries.isValidCountry(countryCode) ) {\n            countryCode = ShippingCountries.getCountryCode(countryCode);\n        } else if (ShippingCountries.isValidCountryCode(countryCode) === false)  { //  Check if valid country code\n            log.warn(`Country code <${countryCode}> was not valid!`);\n            throw new NotFoundException(`Country code <${countryCode}> was not valid!`);\n        }\n        return countryCode;\n    }\n}\nShippingCountries.initialize();\n"]}