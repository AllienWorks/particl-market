{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../src/core/Logger.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as path from 'path';\n\n/**\n * core.log.Log\n * ------------------------------------------------\n *\n * This is the main Logger Object. You can create a scope logger\n * or directly use the static log methods.\n *\n * By Default it uses the debug-adapter, but you are able to change\n * this in the start up process in the core/index.ts file.\n */\n\nexport class Logger {\n\n    public static DEFAULT_SCOPE = 'app';\n\n    public static addAdapter(key: string, adapter: interfaces.LoggerAdapterConstructor): void {\n        Logger.Adapters.set(key, adapter);\n    }\n\n    public static setAdapter(key: string): void {\n        const adapter = Logger.Adapters.get(key);\n        if (adapter !== undefined) {\n            Logger.Adapter = adapter;\n        } else {\n            console.log(`No log adapter with key ${key} was found!`);\n        }\n    }\n\n    private static Adapter: interfaces.LoggerAdapterConstructor;\n    private static Adapters: Map<string, interfaces.LoggerAdapterConstructor> = new Map();\n\n    // tslint:disable:no-ignored-return\n    // tslint:disable:no-misleading-array-reverse\n    private static parsePathToScope(filepath: string): string {\n        if (filepath.indexOf(path.sep) >= 0) {\n            // split and reverse filepath\n            const split = filepath.split(path.sep).reverse();\n            const rebuild: string[] = [];\n            // rebuild from filename, to dirs.\n            split.some((e) => {\n                // abort if we reach the src or dist directory\n                const quit = (['src', 'dist'].indexOf(e) !== -1);\n                if (!quit) {\n                    rebuild.push(e);\n                }\n                return quit;\n            });\n            filepath = rebuild.reverse().join(path.sep);\n            filepath = filepath.replace('.ts', '');\n            filepath = filepath.replace('.js', '');\n        }\n        return filepath;\n    }\n    // tslint:enable:no-misleading-array-reverse\n    // tslint:enable:no-ignored-return\n\n    private scope: string;\n    private adapter: interfaces.LoggerAdapter;\n\n    constructor(scope?: string) {\n        this.scope = Logger.parsePathToScope((scope) ? scope : Logger.DEFAULT_SCOPE);\n    }\n\n    public getAdapter(): interfaces.LoggerAdapter {\n        return this.adapter;\n    }\n\n    public debug(message: string, ...args: any[]): void {\n        this.log('debug', message, args);\n    }\n\n    public info(message: string, ...args: any[]): void {\n        this.log('info', message, args);\n    }\n\n    public warn(message: string, ...args: any[]): void {\n        this.log('warn', message, args);\n    }\n\n    public error(message: string, ...args: any[]): void {\n        this.log('error', message, args);\n    }\n\n    private log(level: string, message: string, args: any[]): void {\n        this.lazyLoadAdapter();\n        if (this.adapter) {\n            this.adapter[level](message, args);\n        }\n    }\n\n    private lazyLoadAdapter(): void {\n        if (!this.adapter) {\n            if (Logger.Adapter) {\n                this.adapter = new Logger.Adapter(this.scope);\n            } else {\n                console.log('Please add a log adapter in the LoggerConfig!');\n            }\n        }\n    }\n\n}\n"]}