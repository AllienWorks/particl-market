{"version":3,"file":"RequestBody.js","sourceRoot":"","sources":["../../../src/core/api/RequestBody.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;;AAEjF;;;;;;;;;;GAUG;AAEH,4BAA0B;AAC1B,qDAA2C;AAC3C,kFAA+E;AAG/E;IAEI;;;OAGG;IACH,YAAY,KAAW;QACnB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACR,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAChC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG;gBACb,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IAED;;OAEG;IACU,QAAQ,CAAC,wBAAiC,KAAK;;YACxD,MAAM,MAAM,GAAG,MAAM,0BAAQ,CAAC,IAAI,EAAE,EAAE,qBAAqB,EAAE,CAAC,CAAC;YAC/D,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC9B,MAAM,IAAI,yCAAmB,CAAC,2BAA2B,EAAE,MAAM,CAAC,CAAC;YACvE,CAAC;YACD,MAAM,CAAC;QACX,CAAC;KAAA;CAEJ;AA1BD,kCA0BC","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\n/**\n * core.api.RequestBody\n * ------------------------------------------------\n *\n * This class is used to verify a valid payload an prepare\n * it for further actions in the services. To validate we\n * use the module 'class-validator'.\n *\n * If you want to skip missing properties just override the\n * validate method in your extended request class.\n */\n\nimport 'reflect-metadata';\nimport { validate } from 'class-validator';\nimport { ValidationException } from '../../api/exceptions/ValidationException';\n\n\nexport class RequestBody {\n\n    /**\n     * Creates an instance of RequestBody and if a input is given\n     * we store the values into the correct property\n     */\n    constructor(input?: any) {\n        if (input) {\n            const keys = Object.keys(input);\n            keys.forEach((key) => {\n                this[key] = input[key];\n            });\n        }\n    }\n\n    /**\n     * Validates the body on the basis of the validator-annotations\n     */\n    public async validate(skipMissingProperties: boolean = false): Promise<void> {\n        const errors = await validate(this, { skipMissingProperties });\n        if (errors && errors.length > 0) {\n            throw new ValidationException('Request body is not valid', errors);\n        }\n        return;\n    }\n\n}\n"]}