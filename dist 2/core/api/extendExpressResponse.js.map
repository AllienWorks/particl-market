{"version":3,"file":"extendExpressResponse.js","sourceRoot":"","sources":["../../../src/core/api/extendExpressResponse.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;AAcpE,QAAA,qBAAqB,GAAG,CAAC,GAAsB,EAAE,GAAuB,EAAE,IAA0B;IAE7G;;;OAGG;IACH,GAAG,CAAC,EAAE,GAAG,CAAI,IAAO,EAAE,UAAqC,EAAE;QACzD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAChB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC;IAEF;;;OAGG;IACH,GAAG,CAAC,OAAO,GAAG,CAAI,IAAO,EAAE,UAAqC,EAAE;QAC9D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAChB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC;IAEF;;;OAGG;IACH,GAAG,CAAC,KAAK,GAAG,CAAI,IAAO,EAAE,UAAqC,EAAE;QAC5D,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACjC,CAAC,CAAC;IAEF;;;OAGG;IACH,GAAG,CAAC,OAAO,GAAG,CAAI,IAAO,EAAE,UAAqC,EAAE;QAC9D,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACjC,CAAC,CAAC;IAEF;;;OAGG;IACH,GAAG,CAAC,SAAS,GAAG,CAAC,UAAqC,EAAE;QACpD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAChB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC;IAEF;;;OAGG;IACH,GAAG,CAAC,MAAM,GAAG,CAAC,MAAc,EAAE,OAAe,EAAE,KAAW;QACtD,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACnB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC;IAEF,IAAI,EAAE,CAAC;AACX,CAAC,CAAC;AAGF;;GAEG;AACH,wBAAkC,IAAO,EAAE,UAAqC,EAAE;IAC9E,MAAM,iBACF,OAAO,EAAE,IAAI,IACV,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,EAC/B,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,IAC9B,IAAI,IACN;AACN,CAAC;AAPD,wCAOC;AAED;;GAEG;AACH,oBAA2B,OAAe,EAAE,KAAW;IACnD,MAAM,iBACF,OAAO,EAAE,KAAK,EACd,OAAO,IACJ,EAAE,KAAK,EAAE,EACd;AACN,CAAC;AAND,gCAMC;AAED,uDAAuD;AACvD,wBAAwB,KAAc;IAClC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACR,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;IAC9B,CAAC;IACD,UAAU;AACd,CAAC;AAED,sBAAsB,MAAkC;IACpD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACT,MAAM,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;IAC7B,CAAC;IACD,UAAU;AACd,CAAC","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\n/**\n * core.api.extendExpressResponse\n * ------------------------------------------------\n *\n * We use this middleware to extend the express response object, so\n * we can access the new functionality in our controllers. The extension\n * should simplify common responses.\n */\n\nimport * as express from 'express';\n\n\nexport const extendExpressResponse = (req: myExpress.Request, res: myExpress.Response, next: express.NextFunction) => {\n\n    /**\n     * 200 - OK\n     * This is used for successful responses and a json body\n     */\n    res.ok = <T>(data: T, options: myExpress.ResponseOptions = {}) => {\n        res.status(200);\n        return res.json(bodySuccessful(data, options));\n    };\n\n    /**\n     * 201 - Created\n     * This is used for created resources\n     */\n    res.created = <T>(data: T, options: myExpress.ResponseOptions = {}) => {\n        res.status(201);\n        return res.json(bodySuccessful(data, options));\n    };\n\n    /**\n     * 200 - Found\n     * Like the ok function\n     */\n    res.found = <T>(data: T, options: myExpress.ResponseOptions = {}) => {\n        return res.ok(data, options);\n    };\n\n    /**\n     * 200 - Updated\n     * Like the ok function\n     */\n    res.updated = <T>(data: T, options: myExpress.ResponseOptions = {}) => {\n        return res.ok(data, options);\n    };\n\n    /**\n     * 200 - Destroyed\n     * This is the response after a resource has been removed\n     */\n    res.destroyed = (options: myExpress.ResponseOptions = {}) => {\n        res.status(200);\n        return res.json(bodySuccessful(null));\n    };\n\n    /**\n     * 400-500 - Failed\n     * This is used when a request has failed\n     */\n    res.failed = (status: number, message: string, error?: any) => {\n        res.status(status);\n        return res.json(bodyFailed(message, error));\n    };\n\n    next();\n};\n\n\n/**\n * This body parser is used to show successful responses to the client\n */\nexport function bodySuccessful<T>(data: T, options: myExpress.ResponseOptions = {}): any {\n    return {\n        success: true,\n        ...prepareMessage(options.message),\n        ...prepareLinks(options.links),\n        data\n    };\n}\n\n/**\n * This body parse is used for error messages to the client\n */\nexport function bodyFailed(message: string, error?: any): any {\n    return {\n        success: false,\n        message,\n        ...{ error }\n    };\n}\n\n///////////////////////////////////////////////////////\nfunction prepareMessage(value?: string): any {\n    if (value) {\n        return { message: value };\n    }\n    // return;\n}\n\nfunction prepareLinks(values?: myExpress.ResponseLinks[]): any {\n    if (values) {\n        return { links: values };\n    }\n    // return;\n}\n"]}