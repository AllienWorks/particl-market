{"version":3,"file":"IoC.js","sourceRoot":"","sources":["../../src/core/IoC.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\n/**\n * IOC - CONTAINER\n * ----------------------------------------\n *\n * Bind every controller and service to the ioc container. All controllers\n * will then be bonded to the express structure with their defined routes.\n */\n\nimport * as glob from 'glob';\nimport * as path from 'path';\nimport { Container, decorate, injectable } from 'inversify';\nimport { Types, Core, Targets } from '../constants';\nimport { events, EventEmitter } from './api/events';\nimport { Logger } from './Logger';\nimport { IocConfig } from '../config/IocConfig';\nimport { Environment } from './helpers/Environment';\n\nexport class IoC {\n\n    public container: Container;\n    public libConfiguration: (container: Container) => Container;\n    public customConfiguration: (container: Container) => Container;\n\n    private log: Logger = new Logger(__filename);\n    private cliIo;\n\n    constructor() {\n        this.container = new Container();\n        const config = new IocConfig();\n        config.configure(this);\n    }\n\n    public configure(configuration: (container: Container) => Container): void {\n        this.customConfiguration = configuration;\n    }\n\n    public configureLib(configuration: (container: Container) => Container): void {\n        this.libConfiguration = configuration;\n    }\n\n    public async bindModules(): Promise<void> {\n\n        this.log.info('binding core');\n        this.bindCore();\n\n        if (this.libConfiguration) {\n            this.container = this.libConfiguration(this.container);\n        }\n\n        this.log.info('binding models');\n        await this.bindModels();\n        this.log.info('binding repositories');\n        await this.bindRepositories();\n        this.log.info('binding services');\n        await this.bindServices();\n        this.log.info('binding commands');\n        await this.bindCommands();\n        this.log.info('binding factories');\n        await this.bindFactories();\n        this.log.info('binding message processors');\n        await this.bindMessageProcessors();\n        this.log.info('binding listeners');\n        await this.bindListeners();\n\n        if (!Environment.isTest()) {\n            this.log.info('binding middlewares');\n            await this.bindMiddlewares();\n            this.log.info('binding controllers');\n            await this.bindControllers();\n        }\n\n        if (this.customConfiguration) {\n            this.container = this.customConfiguration(this.container);\n        }\n        this.log.info('binding done.');\n\n    }\n\n    private bindCore(): void {\n        this.container.bind<typeof Logger>(Types.Core).toConstantValue(Logger).whenTargetNamed(Core.Logger);\n        this.container.bind<EventEmitter>(Types.Core).toConstantValue(events).whenTargetNamed(Core.Events);\n    }\n\n    private bindModels(): Promise<void> {\n        return this.bindFiles('/models/**/*.ts', Targets.Model, (name: any, value: any) => {\n            decorate(injectable(), value);\n            this.container\n                .bind<any>(Types.Model)\n                .toConstantValue(value)\n                .whenTargetNamed(name);\n        });\n    }\n\n    private bindRepositories(): Promise<void> {\n        return this.bindFiles(\n            '/repositories/**/*Repository.ts',\n            Targets.Repository,\n            (name: any, value: any) => this.bindFile(Types.Repository, name, value));\n    }\n\n    private bindServices(): Promise<void> {\n        return this.bindFiles(\n            '/services/**/*Service.ts',\n            Targets.Service,\n            (name: any, value: any) => this.bindFile(Types.Service, name, value));\n    }\n\n    private bindCommands(): Promise<void> {\n        return this.bindFiles(\n            '/commands/**/*Command.ts',\n            Targets.Command,\n            (name: any, value: any) => this.bindFile(Types.Command, name, value));\n    }\n\n    private bindFactories(): Promise<void> {\n        return this.bindFiles(\n            '/factories/**/*Factory.ts',\n            Targets.Factory,\n            (name: any, value: any) => this.bindFile(Types.Factory, name, value));\n    }\n\n    private bindMessageProcessors(): Promise<void> {\n        return this.bindFiles(\n            '/messageprocessors/**/*Processor.ts',\n            Targets.MessageProcessor,\n            (name: any, value: any) => this.bindFile(Types.MessageProcessor, name, value));\n    }\n\n    private bindMiddlewares(): Promise<void> {\n        return this.bindFiles(\n            '/middlewares/**/*Middleware.ts',\n            Targets.Middleware,\n            (name: any, value: any) => this.bindFile(Types.Middleware, name, value));\n    }\n\n    private bindControllers(): Promise<void> {\n        return this.bindFiles(\n            '/controllers/**/*Controller.ts',\n            Targets.Controller,\n            (name: any, value: any) => this.bindFile(Types.Controller, name, value));\n    }\n\n    private bindListeners(): Promise<void> {\n        return this.bindFiles('/listeners/**/*Listener.ts', Targets.Listener, (name: any, value: any) => {\n            decorate(injectable(), value);\n            this.container\n                .bind<any>(Types.Listener)\n                .to(value)\n                .inSingletonScope()\n                .whenTargetNamed(name);\n\n            const listener: interfaces.Listener = this.container.getNamed<any>(Types.Listener, name);\n            events.on(value.Event, (...args) => listener.act(...args));\n        });\n    }\n\n    private bindFile(type: any, name: string, value: any): void {\n        decorate(injectable(), value);\n        this.container\n            .bind<any>(type)\n            .to(value)\n            .inSingletonScope()\n            .whenTargetNamed(name);\n    }\n\n    private bindFiles(filePath: string, target: any, callback: (name: any, value: any) => void): Promise<void> {\n        return new Promise<void>((resolve) => {\n            this.getFiles(filePath, (files: string[]) => {\n                // this.log.info('bindFiles, filePath:', filePath);\n                // this.log.info('bindFiles, files:', files);\n                files.forEach((file: any) => {\n                    let fileExport;\n                    let fileClass;\n                    let fileTarget;\n                    const isRecursive = file.name.indexOf('.') > 0;\n                    try {\n                        fileExport = require(`${file.filePath}`);\n                    } catch (e) {\n                        this.log.warn(e.message);\n                        return;\n                    }\n                    if (fileExport === undefined) {\n                        this.log.warn(`Could not find the file ${file.name}!`);\n                        return;\n                    }\n                    if (isRecursive) {\n                        fileClass = this.getClassOfFileExport(file.name, fileExport);\n                        fileTarget = this.getTargetOfFile(file.name, target);\n\n                    } else {\n                        fileClass = fileExport[file.name];\n                        fileTarget = target && target[file.name];\n                    }\n\n                    if (fileClass === undefined) {\n                        this.log.warn(`Name of the file '${file.name}' does not match to the class name!`);\n                        return;\n                    }\n\n                    if (fileTarget === undefined) {\n                        this.log.warn(`Please define your '${file.name}' class is in the target constants.`);\n                        return;\n                    }\n\n                    callback(fileTarget, fileClass);\n                });\n                resolve();\n            });\n        });\n    }\n\n    private getClassOfFileExport(name: string, fileExport: any): any {\n        const fileParts = name.split('.');\n        let fileClass = fileExport;\n        fileParts.forEach((part) => {\n            if (fileClass.hasOwnProperty(part)) {\n                fileClass = fileClass[part];\n            }\n        });\n        return fileClass;\n    }\n\n    private getTargetOfFile(name: string, target: any): any {\n        const fileParts = name.split('.');\n        let fileTarget = target;\n        fileParts.forEach((part) => {\n            fileTarget = fileTarget[part];\n        });\n        return fileTarget;\n    }\n\n    private getBasePath(): string {\n        const baseFolder = __dirname.indexOf(`${path.sep}src${path.sep}`) >= 0 || __dirname.indexOf(`${path.sep}test${path.sep}`) >= 0\n            ? `${path.sep}src${path.sep}`\n            : `${path.sep}dist${path.sep}`;\n        const baseRoot = __dirname.substring(0, __dirname.indexOf(baseFolder)); // path.normalize(__dirname + '/../../..')\n        // this.log.info('baseFolder: ', baseFolder);\n        // this.log.info('baseRoot: ', baseFolder);\n        return path.join(baseRoot, baseFolder, 'api');\n    }\n\n    private getFiles(filePath: string, done: (files: any[]) => void): void {\n        const isTypeScript = __dirname.indexOf(`${path.sep}src${path.sep}`) >= 0 || __dirname.indexOf(`${path.sep}test${path.sep}`) >= 0;\n        if (!isTypeScript) {\n            filePath = filePath.replace('.ts', '.js');\n        }\n\n        const pattern = this.getBasePath() + filePath;\n        glob(pattern, (err: any, files: string[]) => {\n            if (err) {\n                this.log.warn(`Could not read the folder ${filePath}!`);\n                return;\n            }\n            done(files.map((p: string) => this.parseFilePath(p)));\n        });\n    }\n\n    private parseFilePath(filePath: string): any {\n        const p = filePath.substring(this.getBasePath().length + 1);\n        const dir = p.split('/')[0];\n        const file = p.substr(dir.length + 1);\n        const name = file.replace('/', '.').substring(0, file.length - 3);\n        return {\n            filePath,\n            dir,\n            file,\n            name\n        };\n    }\n\n}\n"]}