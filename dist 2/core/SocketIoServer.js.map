{"version":3,"file":"SocketIoServer.js","sourceRoot":"","sources":["../../src/core/SocketIoServer.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;AAEjF,sCAAsC;AAEtC,qCAAkC;AAClC,4CAA2C;AAI3C;IAQI,YAAmB,UAAuB,EAAE,GAAQ;QAAjC,eAAU,GAAV,UAAU,CAAa;QAJlC,QAAG,GAAG,IAAI,eAAM,CAAC,UAAU,CAAC,CAAC;QAE7B,YAAO,GAAG,EAAE,CAAC;QAGjB,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAe,iBAAK,CAAC,IAAI,EAAE,gBAAI,CAAC,MAAM,CAAC,CAAC;QAClF,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;IACzD,CAAC;IAEM,IAAI,CAAC,SAAiB,EAAE,GAAW;QACtC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IACvC,CAAC;IAEO,SAAS,CAAC,EAAY;QAC1B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAE7C,EAAE,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;QAEpC,kCAAkC;QAClC,EAAE,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,SAAS,EAAE,QAAQ;YACxC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,MAAM;YACvB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;YACjC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,GAAG,MAAM,CAAC,EAAE,GAAG,YAAY,CAAC,CAAC;YACzD,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,GAAG,EAAE,CAAC,MAAM,CAAC,YAAY,GAAG,oBAAoB,CAAC,CAAC;YAE9E,6BAA6B;YAC7B,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK;gBAC9B,qEAAqE;gBACrE,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,KAAK;gBAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC/B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,GAAG,MAAM,CAAC,EAAE,GAAG,eAAe,CAAC,CAAC;gBAC5D,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,KAAK,EAAE;oBACpC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;gBACjC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,IAAI;gBACzB,+CAA+C;YACnD,CAAC,CAAC,CAAC;QAEP,CAAC,CAAC,CAAC;QAEH,WAAW,CAAC;YACR,4CAA4C;YAC5C,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,EAAC,CAAC,CAAC;QAClE,CAAC,EAAE,KAAK,CAAC,CAAC;QAEV,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;CAEJ;AA7DD,wCA6DC","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as SocketIO from 'socket.io';\nimport * as http from 'http';\nimport { Logger } from './Logger';\nimport { Core, Types } from '../constants';\nimport { EventEmitter } from './api/events';\nimport { IoC } from './IoC';\n\nexport class SocketIoServer {\n\n    public socketIO: SocketIO;\n\n    private log = new Logger(__filename);\n    private eventEmitter;\n    private clients = {};\n\n    constructor(public httpServer: http.Server, ioc: IoC) {\n        this.eventEmitter = ioc.container.getNamed<EventEmitter>(Types.Core, Core.Events);\n        this.eventEmitter.setMaxListeners(10);\n        this.socketIO = this.configure(SocketIO(httpServer));\n    }\n\n    public emit(eventType: string, msg: string): void {\n        this.socketIO.emit(eventType, msg);\n    }\n\n    private configure(io: SocketIO): SocketIO {\n        this.log.debug('Configuring SocketIoServer');\n\n        io.set('transports', ['websocket']);\n\n        // allow any user to authenticate.\n        io.set('authorization', (handshake, callback) => {\n            return callback(null, true);\n        });\n\n        io.on('connection', (client) => {\n            this.clients[client.id] = client;\n            this.log.debug('socket.io: ' + client.id + ' connected');\n            this.log.debug('socket.io: ' + io.engine.clientsCount + ' sockets connected');\n\n            // listen to messages for cli\n            this.eventEmitter.on('cli', (event) => {\n                // this.log.debug('message for cli', JSON.stringify(event, null, 2));\n                client.emit('cli', event);\n            });\n\n            client.on('disconnect', (event) => {\n                delete this.clients[client.id];\n                this.log.debug('socket.io: ' + client.id + ' disconnected');\n                this.eventEmitter.removeListener('cli', () => {\n                    this.log.debug('cli', event);\n                });\n            });\n\n            client.on('serverpong', (data) => {\n                // this.log.debug('received pong from client');\n            });\n\n        });\n\n        setInterval(() => {\n            // this.log.debug('sending ping to client');\n            io.sockets.emit('serverping', { data: new Date().toString()});\n        }, 15000);\n\n        return io;\n    }\n\n}\n"]}