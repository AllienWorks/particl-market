{"version":3,"file":"Bootstrap.js","sourceRoot":"","sources":["../../src/core/Bootstrap.ts"],"names":[],"mappings":";AAAA,yDAAyD;AACzD,mEAAmE;AACnE,iFAAiF;;AAIjF,qEAAiE;AACjE,qCAAkC;AAClC,qCAAkC;AAClC,uCAAoC;AACpC,6CAA0C;AAC1C,6DAA0D;AAC1D,uEAAoE;AACpE,2CAAwC;AAExC,yCAAsC;AACtC,qDAAkD;AAGlD;IAKI,YAAY,SAAoB;QAHzB,QAAG,GAAW,IAAI,eAAM,CAAC,UAAU,CAAC,CAAC;QAIxC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAEM,gBAAgB,CAAC,GAAwB;QAC5C,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACtC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,eAAM,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC;QACtE,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAEM,YAAY,CAAC,GAAwB;QACxC,MAAM,UAAU,GAAG,IAAI,uBAAU,EAAE,CAAC;QACpC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IAEM,cAAc,CAAC,GAAwB;QAC1C,MAAM,OAAO,GAAG,IAAI,iBAAO,EAAE,CAAC;QAC9B,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEnB,MAAM,QAAQ,GAAG,IAAI,mBAAQ,EAAE,CAAC;QAChC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEpB,MAAM,SAAS,GAAG,IAAI,qBAAS,EAAE,CAAC;QAClC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IAEM,WAAW,CAAC,GAAwB;QACvC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IACvC,CAAC;IAEM,2BAA2B,CAAC,GAAwB,EAAE,GAAQ;QACjE,MAAM,sBAAsB,GAAG,IAAI,gDAAsB,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE;YAChF,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc;SACvC,EAAE,GAAG,CAAC,CAAC;QACR,sBAAsB,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,6CAAqB,CAAC,CAAC,CAAC;QACtE,sBAAsB,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,mCAAgB,CAAC,CAAC,CAAC;QACtE,MAAM,CAAC,sBAAsB,CAAC;IAClC,CAAC;IAEM,0BAA0B,CAAC,GAAwB,EAAE,sBAA8C;QACtG,IAAI,CAAC;YACD,GAAG,GAAG,sBAAsB,CAAC,KAAK,EAAE,CAAC;QACzC,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YAC1B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAEM,oBAAoB,CAAC,MAAc,EAAE,GAAQ;QAC/C,MAAM,CAAC,IAAI,+BAAc,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;IACvD,CAAC;CACJ;AAzDD,8BAyDC","sourcesContent":["// Copyright (c) 2017-2018, The Particl Market developers\n// Distributed under the GPL software license, see the accompanying\n// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE\n\nimport * as http from 'http';\nimport * as express from 'express';\nimport { InversifyExpressServer } from 'inversify-express-utils';\nimport { Server } from './Server';\nimport { Logger } from './Logger';\nimport { ApiInfo } from './ApiInfo';\nimport { ApiMonitor } from './ApiMonitor';\nimport { exceptionHandler } from './api/exceptionHandler';\nimport { extendExpressResponse } from './api/extendExpressResponse';\nimport { SwaggerUI } from './SwaggerUI';\nimport { IoC } from './IoC';\nimport { CliIndex } from './CliIndex';\nimport { SocketIoServer } from './SocketIoServer';\nimport { EnvConfig } from '../config/env/EnvConfig';\n\nexport class Bootstrap {\n\n    public log: Logger = new Logger(__filename);\n    private envConfig: EnvConfig;\n\n    constructor(envConfig: EnvConfig) {\n        this.envConfig = envConfig;\n    }\n\n    public defineExpressApp(app: express.Application): express.Application {\n        app.set('host', process.env.APP_HOST);\n        app.set('port', Server.normalizePort(process.env.APP_PORT || '3000'));\n        return app;\n    }\n\n    public setupMonitor(app: express.Application): void {\n        const apiMonitor = new ApiMonitor();\n        apiMonitor.setup(app);\n    }\n\n    public setupCoreTools(app: express.Application): void {\n        const apiInfo = new ApiInfo();\n        apiInfo.setup(app);\n\n        const cliIndex = new CliIndex();\n        cliIndex.setup(app);\n\n        const swaggerUI = new SwaggerUI();\n        swaggerUI.setup(app);\n    }\n\n    public startServer(app: express.Application): http.Server {\n        return app.listen(app.get('port'));\n    }\n\n    public setupInversifyExpressServer(app: express.Application, ioc: IoC): InversifyExpressServer {\n        const inversifyExpressServer = new InversifyExpressServer(ioc.container, undefined, {\n            rootPath: process.env.APP_URL_PREFIX\n        }, app);\n        inversifyExpressServer.setConfig((a) => a.use(extendExpressResponse));\n        inversifyExpressServer.setErrorConfig((a) => a.use(exceptionHandler));\n        return inversifyExpressServer;\n    }\n\n    public bindInversifyExpressServer(app: express.Application, inversifyExpressServer: InversifyExpressServer): express.Application {\n        try {\n            app = inversifyExpressServer.build();\n        } catch (e) {\n            this.log.error(e.message);\n            process.exit(1);\n        }\n        return app;\n    }\n\n    public createSocketIoServer(server: Server, ioc: IoC): SocketIoServer {\n         return new SocketIoServer(server.httpServer, ioc);\n    }\n}\n"]}