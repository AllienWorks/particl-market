
workspace:
  base: /workspace      # shared base volume available to all pipeline steps.
  path: particl-market  # default working directory, where your code is cloned


kind: pipeline
name: Build and Push


# To enable docker image caching all you need is:
# DRONE_VOLUME=/tmp/drone-cache:/cache drone-server variable;
# storage_path: /drone/docker and use_cache: true parameters for plugins/docker job;
# drillster/drone-volume-cache of course ;-)
# https://github.com/drone-plugins/drone-docker/issues/172

steps:

- name: restore cache
  image: plugins/s3-cache:latest
  settings:
    pull: true
    endpoint: http://drone-minio1:9001
    access_key:
      from_secret: MINIO_ACCESS_KEY
    secret_key:
      from_secret: MINIO_SECRET_KEY
#    endpoint: https://mp-ci-cache.ams3.digitaloceanspaces.com
#    access_key:
#      from_secret: CACHE_ACCESS_KEY
#    secret_key:
#      from_secret: CACHE_SECRET_KEY
    restore: true
    path: /particl/particl-market/

#- name: restore cache
#  image: ludx/drone-volume-cache:master
#  pull: always
#  settings:
#    restore: true       # instruct plugin to restore cache, can be true or false
#    mount:              # list of folders or files to cache
#      - node_modules
#    ttl: 10             # maximum cache lifetime in days
#  volumes:              # mount the cache volume, needs "trusted"
#    - name: cache
#      path: /cache


#- name: build and push image
#  image: plugins/docker
#  pull: always
#  storage_path: /workspace/docker       # the path where persisted data such as images, volumes, and cluster state
                                        # are stored (default: /var/lib/docker)
#  settings:
#    repo: ludx/particl-market-ci
#    dockerfile: Dockerfile.ci
#    username:
#      from_secret: REGISTRY_USER
#    password:
#      from_secret: REGISTRY_PASSWORD
#    debug: true
#    tags:
#      - latest
#      - ${DRONE_COMMIT_SHA}


# TODO: caching
# - https://github.com/drone-plugins/drone-docker/issues/172
# - https://discourse.drone.io/t/how-do-i-cache-node-modules-between-builds/1946/2



#- name: run unit tests
#  image: ludx/particl-market-ci:${DRONE_COMMIT_SHA}
#  commands:
    #- echo "app:"
    #- ls -al /app
    #- echo "workspace:"
    #- ls -al /workspace
    #- ls -al /workspace/particl-market
#    - cp -rf /workspace/particl-market/node_modules /app || true    # copy the node_modules from the cached workspace
#    - cd /app                                                       # cd the actual app folder from the workspace
#    - bin/ci-unit-tests.sh                                          # run the tests
#    - cp -rf /app/node_modules /workspace/particl-market/           # copy the node_modules to the workspace so they can be cached


- name: ls cache test1
  image: docker
  commands:
    - echo "DRONE_COMMIT_MESSAGE ${DRONE_COMMIT_MESSAGE}"
    - echo "DRONE_REPO_NAMESPACE ${DRONE_REPO_NAMESPACE}"
    - echo "DRONE_REPO_NAME ${DRONE_REPO_NAME}"
    - echo "DRONE_REPO ${DRONE_REPO}"
    - echo "DRONE_BUILD_NUMBER ${DRONE_BUILD_NUMBER}"
    - echo "workspace:"
    - ls -al /workspace/particl-market
    - mkdir -p "/workspace/particl-market/node_modules"
    - touch /workspace/particl-market/node_modules/testfile


# cache files and directories between builds
#- name: rebuild cache
#  image: ludx/drone-volume-cache:master
#  privileged: true
#  settings:
#    rebuild: true       # instruct plugin to rebuild cache, can be true or false
#    mount:              # list of folders or files to cache
#      - node_modules
#  volumes:              # mount the cache volume, needs "trusted"
#    - name: cache
#      path: /cache

- name: rebuild cache
  image: plugins/s3-cache:latest
  settings:
    pull: true
    endpoint: http://drone-minio1:9001
#    endpoint: http://minio1:9000
    access_key:
      from_secret: MINIO_ACCESS_KEY
    secret_key:
      from_secret: MINIO_SECRET_KEY
#    endpoint: https://mp-ci-cache.ams3.digitaloceanspaces.com
#    access_key:
#      from_secret: CACHE_ACCESS_KEY
#    secret_key:
#      from_secret: CACHE_SECRET_KEY
    rebuild: true
    debug: true
    mount:
      - node_modules
    path: /particl/particl-market/
    fallback_path: /particl/particl-market/
#    when:
#      event: push


- name: flush
  image: plugins/s3-cache:latest
  settings:
    pull: true
    endpoint: http://drone-minio1:9001
    access_key:
      from_secret: MINIO_ACCESS_KEY
    secret_key:
      from_secret: MINIO_SECRET_KEY
#    endpoint: https://mp-ci-cache.ams3.digitaloceanspaces.com
#    access_key:
#      from_secret: CACHE_ACCESS_KEY
#    secret_key:
#      from_secret: CACHE_SECRET_KEY
    flush: true
    flush_age: 14
    flush_path: /particl/particl-market/

volumes:
#- name: node_modules
#  host:
#    path: /root/data/drone-agents-node_modules
- name: cache
  host:
    path: /root/data/drone-agents

#- name: test
#  image: docker
#  environment:
#      DOCKER_HOST: unix:///drone/docker.sock
#      DOCKER_USER:
#          from_secret: REGISTRY_USERNAME
#      DOCKER_PASSWORD:
#          from_secret: REGISTRY_PASSWORD
#      REGISTRY_EMAIL: juha.kovanen@gmail.com
#  commands:
#  - sleep 10 # gives docker enough time to initialize
#  - echo $DOCKER_USER
#  - echo $DOCKER_PASSWORD
#  - docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD}
#  - docker run --name testapp ludx/particl-market-ci:${DRONE_COMMIT_SHA} bin/ci-unit-tests.sh
#
#services:
#- name: docker
#  image: docker:dind
#  privileged: true
#  command: [ '-H', 'unix:///drone/docker.sock' ]

# pipeline describes build steps
#pipeline:
    # every entry in the pipeline describes a single build step
#    build_image:
#        image: node
#        environment:
#            VERSION: "${DRONE_TAG}"
#            COMMIT: "${DRONE_COMMIT_SHA:0:7}"

        # commands executed in the container
#        commands:
#            - ./bin/ci-post.sh "[$CIRCLE_BRANCH] Building $CIRCLE_BUILD_URL" "CircleCI" "$DISCORD_URL"
#            - ./bin/ci-create-build-version.sh
#            - docker login $REGISTRY -u $REGISTRY_USER -p $REGISTRY_PASS
#            - docker build --pull --cache-from "$IMAGE_NAME" --tag "$REGISTRY/$IMAGE_NAME:$CIRCLE_SHA1" -f Dockerfile.ci .
#            - docker push $REGISTRY/$IMAGE_NAME:$CIRCLE_SHA1
