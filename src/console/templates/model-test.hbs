// Copyright (c) 2017-2019, The Particl Market developers
// Distributed under the GPL software license, see the accompanying
// file COPYING or https://github.com/particl/particl-market/blob/develop/LICENSE

import * from 'jest';
import * as resources from 'resources';
import { app } from '../../src/app';
import { Logger as LoggerType } from '../../src/core/Logger';
import { Types, Core, Targets } from '../../src/constants';
import { TestUtil } from './lib/TestUtil';
import { TestDataService } from '../../src/api/services/TestDataService';
import { ValidationException } from '../../src/api/exceptions/ValidationException';
import { NotFoundException } from '../../src/api/exceptions/NotFoundException';
import { {{name.capitalize}} } from '../../src/api/models/{{name.capitalize}}';
import { {{name.capitalize}}Service } from '../../src/api/services/{{name.capitalize}}Service';
import { {{name.capitalize}}CreateRequest } from '../../src/api/requests/{{name.capitalize}}CreateRequest';
import { {{name.capitalize}}UpdateRequest } from '../../src/api/requests/{{name.capitalize}}UpdateRequest';

describe('{{name.capitalize}}', () => {
    jasmine.DEFAULT_TIMEOUT_INTERVAL = process.env.JASMINE_TIMEOUT;

    const log: LoggerType = new LoggerType(__filename);
    const testUtil = new TestUtil();

    let testDataService: TestDataService;
    let {{name.camelCase}}Service: {{name.capitalize}}Service;
    let profileService: ProfileService;
    let marketService: MarketService;

    let defaultProfile: resources.Profile;
    let defaultMarket: resources.Market;
    let created{{name.capitalize}}: resources.{{name.capitalize}};

    const testData = {
        {{#each properties}}
        {{name.camelCase}}: undefined{{#unless @last}},{{/unless}} // TODO: Add test value
        {{/each}}
    } as {{name.capitalize}}CreateRequest;

    const testDataUpdated = {
        {{#each properties}}
        {{name.camelCase}}: undefined{{#unless @last}},{{/unless}} // TODO: Add test value
        {{/each}}
    } as {{name.capitalize}}UpdateRequest;

    beforeAll(async () => {
        await testUtil.bootstrapAppContainer(app);  // bootstrap the app

        testDataService = app.IoC.getNamed<TestDataService>(Types.Service, Targets.Service.TestDataService);
        {{name.camelCase}}Service = app.IoC.getNamed<{{name.capitalize}}Service>(Types.Service, Targets.Service.{{name.capitalize}}Service);
        profileService = app.IoC.getNamed<ProfileService>(Types.Service, Targets.Service.ProfileService);
        marketService = app.IoC.getNamed<MarketService>(Types.Service, Targets.Service.MarketService);

        // clean up the db, first removes all data and then seeds the db with default data
        await testDataService.clean();


    });

    afterAll(async () => {
        //
    });

    /*
    test('Should throw ValidationException because there is no related_id', async () => {
        expect.assertions(1);
        await {{name.camelCase}}Service.create(testData).catch(e =>
            expect(e).toEqual(new ValidationException('Request body is not valid', []))
        );
    });
    */

    test('Should throw ValidationException because we want to create a empty {{name.capitalize}}', async () => {
        expect.assertions(1);
        await {{name.camelCase}}Service.create({} as {{name.capitalize}}CreateRequest).catch(e =>
            expect(e).toEqual(new ValidationException('Request body is not valid', []))
        );
    });

    test('Should create a new {{name.capitalize}}', async () => {

        created{{name.capitalize}}: resources.{{name.capitalize}} = await {{name.camelCase}}Service.create(testData)
            .then(value => value.toJSON());
        const result: resources.{{name.capitalize}} = created{{name.capitalize}};

        // test the values
        // expect(result.value).toBe(testData.value);
        {{#each properties}}
        expect(result.{{name.camelCase}}).toBe(testData.{{name.camelCase}});
        {{/each}}
    });

    test('Should list {{name.capitalize}}s with our new create one', async () => {
        const {{name.camelCase}}s: resources.{{name.capitalize}}[] = await {{name.camelCase}}Service.findAll()
            .then(value => value.toJSON());
        expect({{name.camelCase}}s.length).toBe(1);

        const result: resources.{{name.capitalize}} = {{name.camelCase}}s[0];

        // test the values
        // expect(result.value).toBe(testData.value);
        {{#each properties}}
        expect(result.{{name.camelCase}}).toBe(testData.{{name.camelCase}});
        {{/each}}
    });

    test('Should return one {{name.capitalize}}', async () => {
        const result: resources.{{name.capitalize}} = await {{name.camelCase}}Service.findOne(created{{name.capitalize}}.id)
            .then(value => value.toJSON());

        // test the values
        // expect(result.value).toBe(testData.value);
        {{#each properties}}
        expect(result.{{name.camelCase}}).toBe(testData.{{name.camelCase}});
        {{/each}}
    });

    test('Should update the {{name.capitalize}}', async () => {
        const result: resources.{{name.capitalize}} = await {{name.camelCase}}Service.update(created{{name.capitalize}}.id, testDataUpdated)
            .then(value => value.toJSON());

        // test the values
        // expect(result.value).toBe(testDataUpdated.value);
        {{#each properties}}
        expect(result.{{name.camelCase}}).toBe(testDataUpdated.{{name.camelCase}});
        {{/each}}
    });

    test('Should delete the {{name.capitalize}}', async () => {
        expect.assertions(1);
        await {{name.camelCase}}Service.destroy(createdId);
        await {{name.camelCase}}Service.findOne(createdId).catch(e =>
            expect(e).toEqual(new NotFoundException(createdId))
        );
    });

});
